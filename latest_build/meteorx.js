(()=>{"use strict";var e={948:(e,t,r)=>{function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}r.d(t,{ZP:()=>s});var o=function(){function e(e){this.word=e.trim(),this.replacedWords=new Set}var t=e.prototype;return t.replace=function(e,t,r){if(void 0===r&&(r=!1),!r&&function(e,t,r){return Array.from(r).some((function(r){return r.replace(e,t)!==r}))}(e,t,this.replacedWords))return this;var o=this.word.replace(e,t).trim(),l=this.word.match(e),i=null!==l?Array.from(l).map((function(e){return e.replace(e,t)})):[];if(o!==this.word){for(var a,u=function(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(r)return(r=r.call(e)).next.bind(r);if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var o=0;return function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(i);!(a=u()).done;){var c=a.value;this.replacedWords.add(c)}this.word=o}return this},t.toString=function(){return this.word},e}(),l=["(・`ω´・)",";;w;;","owo","UwU",">w<","^w^","(* ^ ω ^)","(⌒ω⌒)","ヽ(*・ω・)ﾉ","(o´∀`o)","(o･ω･o)","＼(＾▽＾)／"],i=[function(e){return e.replace(/([Ff])uc/g,"$1wuc")},function(e){return e.replace(/([Mm])om/g,"$1wom")},function(e){return e.replace(/\b([Tt])ime\b/g,"$1im")},function(e){return e.replace(/^Me$/g,"Mwe").replace(/^me$/g,"mwe")},function(e){return e.replace(/([Oo])ver/g,"$1wor")},function(e){return e.replace(/ove/g,"uv").replace(/OVE/g,"UV")},function(e){return e.replace(/\b(ha|hah|heh|hehe)+\b/g,"hehe xD")},function(e){return e.replace(/\b([Tt])he\b/g,"$1eh")},function(e){return e.replace(/\bYou\b/g,"U").replace(/\byou\b/g,"u")},function(e){return e.replace(/Read/g,"Wead").replace(/read/g,"wead")},function(e){return e.replace(/([Ww])orse/g,"$1ose")},function(e){return e.replace(/([Gg])reat/g,"$1wate")},function(e){return e.replace(/([Aa])viat/g,"$1wiat")},function(e){return e.replace(/([Dd])edicat/g,"$1editat")},function(e){return e.replace(/([Rr])emember/g,"$1ember")},function(e){return e.replace(/([Ww])hen/g,"$1en")},function(e){return e.replace(/([Ff])righten(ed)*/g,"$1rigten")},function(e){return e.replace(/Meme/g,"mem").replace(/Mem/g,"Mem")},function(e){return e.replace(/^([Ff])eel$/g,"$1ell")}],a=[function(e){return e.replace(/o/g,(function(){return Math.round(Math.random())?"owo":"o"}))},function(e){return e.replace(/ew/g,"uwu")},function(e){return e.replace(/([Hh])ey/g,"$1ay")},function(e){return e.replace(/Dead/g,"Ded").replace(/dead/g,"ded")},function(e){return e.replace(/n[aeiou]*t/g,"nd")}],u=[function(e){return e.replace(/[({<]/g,"｡･:*:･ﾟ★,｡･:*:･ﾟ☆").replace(/[)}>]/g,"☆ﾟ･:*:･｡,★ﾟ･:*:･｡")},function(e){return e.replace(/[.,](?![0-9])/g,(function(){return" "+l[Math.floor(Math.random()*l.length)]})).replace(/[!;]+/g,(function(){return" "+l[Math.floor(Math.random()*l.length)]}))},function(e){return e.replace(/that/g,"dat").replace(/That/g,"Dat")},function(e){return e.replace(/[Tt]h(?![Ee])/g,"f").replace(/TH(?!E)/g,"F")},function(e){return e.replace(/le$/g,"wal")},function(e){return e.replace(/ve/g,"we").replace(/Ve/g,"We")},function(e){return e.replace(/ry/g,"wwy")},function(e){return e.replace(/(?:r|l)/g,"w").replace(/(?:R|L)/g,"W")}],c=[function(e){return e.replace(/n([aeiou])/g,"ny$1").replace(/N([aeiou])/g,"Ny$1").replace(/N([AEIOU])/g,"NY$1")},function(e){return e.replace(/ll/g,"ww")},function(e){return e.replace(/[aeiur]l$/g,"wl").replace(/[AEIUR]([lL])$/g,"W$1")},function(e){return e.replace(/([Oo])ld/g,"$1wld").replace(/OLD/g,"OWLD")},function(e){return e.replace(/([Oo])l/g,"$1wl").replace(/OL/g,"OWL")},function(e){return e.replace(/[lr]o/g,"wo").replace(/[LR]([oO])/g,"W$1")},function(e){return e.replace(/([bcdfghjkmnpqstxyz])o/g,"$1wo").replace(/([BCDFGHJKMNPQSTXYZ])([oO])/g,(function(e,t,r){return t+(r.toUpperCase()===r?"W":"w")+r}))},function(e){return e.replace(/[vw]le/g,"wal")},function(e){return e.replace(/([Ff])i/g,"$1wi").replace(/FI/g,"FWI")},function(e){return e.replace(/([Vv])er/g,"wer")},function(e){return e.replace(/([Pp])oi/g,"$1woi")},function(e){return e.replace(/([DdFfGgHhJjPpQqRrSsTtXxYyZz])le$/g,"$1wal")},function(e){return e.replace(/([BbCcDdFfGgKkPpQqSsTtWwXxZz])r/g,"$1w")},function(e){return e.replace(/ly/g,"wy").replace(/Ly/g,"Wy")},function(e){return e.replace(/([Pp])le/g,"$1we")},function(e){return e.replace(/([Nn])r/g,"$1w").replace(/NR/g,"NW")},function(e){return e.replace(/Mem/g,"mwem").replace(/mem/g,"Mwem")},function(e){return e.replace(/([Nn])ywo/g,"$1yo",!0)}];const s=function(e,t){void 0===t&&(t="owo");var r=e.split(/[^\s]+/g),n=e.split(/\s+/g).map((function(e){return new o(e)}));return function(e,t){for(var r=[],n=e,o=t,l=null;n.length>0;)r.push(n.shift()),l=n,n=o,o=l;return o.length>0&&r.push.apply(r,o),r}(r,n=n.map((function(e){switch(i.reduce((function(e,t){return t(e)}),e),t){case"uvu":a.reduce((function(e,t){return t(e)}),e);case"uwu":u.reduce((function(e,t){return t(e)}),e);case"owo":c.reduce((function(e,t){return t(e)}),e)}return e}))).join("")}},54:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.registercmds=void 0;var n=r(948).ZP,o=r(998),l=r(666),i=r(756),a=r(222),u=null;t.registercmds=function(){PluginAPI.addEventListener("packetjoingame",(function(e){u=e.ip})),PluginAPI.addEventListener("sendchatmessage",(function(e){if(".version"===e.message&&((0,o.MeteorXlog)("you are currently using the v1.1 version of MeteorX."),e.preventDefault=!0),".help"===e.message&&((0,o.MeteorXlog)("MeteorX commands : .version , .help , .ip , .uwuify , .mypos, .vclip, .tps, .copycords "),e.preventDefault=!0),".ip"===e.message&&((0,o.MeteorXlog)("the ip of the current server you are playing: "+u+" "),e.preventDefault=!0),".uwuify"===e.message&&((0,o.MeteorXlog)("usage: .uwuify [message]"),e.preventDefault=!0),e.message.startsWith(".uwuify ")){var t=7;if((p=e.message.toString().trim()).length>t&&".uwuify"===p.substring(0,t).trim().toLowerCase()){var r=p.substring(t+1),c=n(r);PluginAPI.network.sendPacketChatMessage({messageIn:c})}e.preventDefault=!0}if(".mypos"===e.message){PluginAPI.addEventListener("update",(function(){(0,l.updatePlayerPosition)()}));var s=Math.trunc(l.getplayerpos.x),g=Math.trunc(l.getplayerpos.y),d=Math.trunc(l.getplayerpos.z);(0,o.MeteorXlog)("your last reported cords(IRL(jk)):  x= "+s+" y= "+g+" z= "+d),e.preventDefault=!0}if(".vclip"===e.message&&((0,o.MeteorXlog)("usage: .vclip [value/blocks]"),e.preventDefault=!0),e.message.startsWith(".vclip ")){var p;if(t=6,(p=e.message.toString().trim()).length>t&&".vclip"===p.substring(0,t).trim().toLowerCase()){var f=p.substring(t+1),y=PluginAPI.player.isRiding();if(!1===y){if(isNaN(f))return void(0,o.MeteorXerror)("the amount of blocks needs to be a Number!");PluginAPI.player.setPosition({x:PluginAPI.player.x,y:PluginAPI.player.y+=f,z:PluginAPI.player.z}),(0,o.MeteorXsuccess)("successfully vclipped "+f+" blocks!")}!0===y&&(0,o.MeteorXerror)("you need to get off this mob/vehicle to use this command!")}e.preventDefault=!0}".tps"===e.message.toLowerCase()&&(e.preventDefault=!0,(0,o.MeteorXlog)("§9 Current server tps is §5~"+(0,i.gettps)().toFixed(1))),".copycords"===e.message&&(PluginAPI.addEventListener("update",(function(){(0,l.updatePlayerPosition)()})),s=Math.trunc(l.getplayerpos.x),g=Math.trunc(l.getplayerpos.y),d=Math.trunc(l.getplayerpos.z),(0,a.copy)(" x= "+s+" y= "+g+" z= "+d),(0,o.MeteorXsuccess)("current cords copied to clipboard!"),e.preventDefault=!0)}))}},260:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnguivisible=t.registergui=void 0;var n=r(845),o=r(943),l=r(617),i=r(410),a=r(850),u=r(650),c=r(142),s=r(754),g=r(483),d=r(930),p=r(315),f=!1;t.registergui=function(){function e(){document.getElementById("myGui")&&document.getElementById("myGui").remove(),f=!1}window.addEventListener("keydown",(function(t){"Shift"===t.key&&t.location===KeyboardEvent.DOM_KEY_LOCATION_RIGHT&&(f?e():function(){e();var t=document.createElement("gui");null!=document.pointerLockElement&&document.exitPointerLock(),t.innerHTML='\n        <gui id="myGui" style="width: 100%;height: 100%;position: fixed;top: 0px;left: 0px;z-index: 10;color: white;font-family: Minecraftia, sans-serif;overflow: hidden scroll;background-color: rgba(80, 80, 80, 0.42);background-blend-mode: multiply;background-size: 64px;">\n        <h1 style="text-shadow: 0px 0px 4px;">MeteorX GUI</h1>\n        <p style="font-size: 0.8rem; color: yellow;">(totally not stolen from plugin manager\'s gui)</p><p style="font-size: 0.8rem; color: yellow;">ik the gui looks kinda bad for a hacked client but its meteorX alpha ig. i WILL update this gui in the future</p><p style="font-size: 0.8rem; color: orangered;">click on "Activate" to activate a hack and click on "Deactivate" to deactivate a hack</p>\n        <table style="table-layout: fixed; width: 100%;">\n            <tbody><tr style="background: rgb(80, 80, 80);">\n                <th style="text-align: center;">Hacks</th>\n                \n            <th style="text-align: center; width: 15%;">Settings</th><th style="text-align: center; width: 15%;" id="hacks">Activate/Deactivate</th></tr>\n            <tr style="box-shadow: grey 0px 2px 0px;">\n            <td style="user-select: text;background-color: #9d00ff30;">Jetpack (hold space to fly) 🎒💨</td>\n            <td style="background-color: #e59400;text-align: center;" id="jetpacksettings">Settings</td><td style="background-color: gray;text-align: center;" id="jetpack">Activate</td>\n            </tr>\n            <tr style="box-shadow: grey 0px 2px 0px;">\n                <td style="user-select: text;background-color: #9d00ff30;">Step</td>\n                <td style="background-color: #9d00ff30;text-align: center;"></td><td style="background-color: gray; text-align: center;" id="step">Activate</td>\n            </tr>\n            <tr style="box-shadow: grey 0px 2px 0px;">\n                <td style="user-select: text;background-color: #9d00ff30;">Spider</td>\n                <td style="background-color: #9d00ff30;text-align: center;"></td><td style="background-color: gray; text-align: center;" id="spider">Activate</td>\n            </tr>\n            <tr style="box-shadow: grey 0px 2px 0px;">\n                <td style="user-select: text;background-color: #9d00ff30;">Nofall</td>\n                <td style="background-color: #9d00ff30;text-align: center;"></td><td style="background-color: gray; text-align: center;" id="nofall">Activate</td>\n            </tr>\n            <tr style="box-shadow: grey 0px 2px 0px;">\n                <td style="user-select: text;background-color: #9d00ff30;">Fullbright</td>\n                <td style="background-color: #9d00ff30;text-align: center;"></td><td style="background-color: gray; text-align: center;" id="fullbright">Activate</td>\n            </tr>\n            <tr style="box-shadow: grey 0px 2px 0px;"> \n            <td style="user-select: text;background-color: #9d00ff30;">NoWeb</td> \n            <td style="background-color: #9d00ff30;text-align: center;"></td><td style="background-color: gray;text-align: center;" id="noweb">Activate</td> \n            </tr> \n            <tr style="box-shadow: grey 0px 2px 0px;"> \n            <td style="user-select: text;background-color: #9d00ff30;">Autoclicker</td> \n             \n            <td style="background-color: #e59400;text-align: center;" id="autoclickersettings">Settings</td><td style="background-color: gray;text-align: center;" id="autoclicker">Activate</td>\n\n            </tr> \n            <tr style="box-shadow: grey 0px 2px 0px;"> \n            <td style="user-select: text;background-color: #9d00ff30;">slipperymod</td> \n            <td style="background-color: #9d00ff30;text-align: center;"></td><td style="background-color: gray;text-align: center;" id="slippery">Activate</td> \n            </tr> \n            <tr style="box-shadow: grey 0px 2px 0px;"> \n            <td style="user-select: text;background-color: #9d00ff30;">autosprint</td> \n            <td style="background-color: #9d00ff30;text-align: center;"></td><td style="background-color: gray;text-align: center;" id="autosprint">Activate</td> \n            </tr> \n            <tr style="box-shadow: grey 0px 2px 0px;"> \n            <td style="user-select: text;background-color: #9d00ff30;">autowtap</td> \n            <td style="background-color: #9d00ff30;text-align: center;"></td><td style="background-color: gray;text-align: center;" id="autowtap">Activate</td> \n            </tr> \n            <tr style="box-shadow: grey 0px 2px 0px;"> \n            <td style="user-select: text;background-color: #9d00ff30;">speed</td> \n             \n            <td style="background-color: #e59400;text-align: center;" id="speedsettings">Settings</td><td style="background-color: gray;text-align: center;" id="speed">Activate</td>\n\n            </tr> \n        </tbody></table>\n        <a style="background: transparent; text-align: center; color: yellow; cursor: pointer; font-family: Minecraftia, sans-serif; text-decoration: underline; border: 0px; margin-right: 1rem; font-size: 1rem;" href="https://github.com/radmanplays/MeteorX-ts/issues/new" target="_blank">suggest a new feature/hack</a>\n        <a style="background: transparent;text-align: center;color: orange;cursor: pointer;font-family: Minecraftia, sans-serif;text-decoration: underline;border: 0px;font-size: 1rem;" href="https://github.com/orgs/EaglerReborn/discussions/9" target="_blank">version Roadmap</a>\n        \n          </gui>\n        ',t.id="myGui",t.style.width="100%",t.style.height="100%",t.style.position="fixed",t.style.top="0px",t.style.left="0px",t.style.zIndex="100",t.style.color="white",t.style.fontFamily="Minecraftia, sans-serif",t.style.overflow="hidden scroll",t.style.backgroundColor="rgba(80, 80, 80, 0.42)",t.style.backgroundBlendMode="multiply",t.style.backgroundSize="64px",document.body.appendChild(t),f=!0;var r=document.getElementById("jetpack"),y=document.getElementById("jetpacksettings"),v=document.getElementById("step"),b=document.getElementById("spider"),k=document.getElementById("nofall"),m=document.getElementById("fullbright"),h=document.getElementById("noweb"),P=document.getElementById("autoclickersettings"),x=document.getElementById("autoclicker"),w=document.getElementById("slippery"),A=document.getElementById("autosprint"),T=document.getElementById("autowtap"),I=document.getElementById("speed"),E=document.getElementById("speedsettings");r.addEventListener("mouseover",(function(){r.style.cursor="pointer"})),y.addEventListener("mouseover",(function(){P.style.cursor="pointer"})),v.addEventListener("mouseover",(function(){v.style.cursor="pointer"})),b.addEventListener("mouseover",(function(){b.style.cursor="pointer"})),k.addEventListener("mouseover",(function(){k.style.cursor="pointer"})),m.addEventListener("mouseover",(function(){m.style.cursor="pointer"})),h.addEventListener("mouseover",(function(){h.style.cursor="pointer"})),P.addEventListener("mouseover",(function(){P.style.cursor="pointer"})),x.addEventListener("mouseover",(function(){x.style.cursor="pointer"})),w.addEventListener("mouseover",(function(){w.style.cursor="pointer"})),A.addEventListener("mouseover",(function(){A.style.cursor="pointer"})),T.addEventListener("mouseover",(function(){T.style.cursor="pointer"})),I.addEventListener("mouseover",(function(){I.style.cursor="pointer"})),E.addEventListener("mouseover",(function(){E.style.cursor="pointer"})),!1===(0,a.returnjetpacktoggle)()&&(r.innerText="Activate",r.style.backgroundColor="green"),!1===(0,n.returnStepToggle)()&&(v.innerText="Activate",v.style.backgroundColor="green"),!1===(0,o.returnSpiderToggle)()&&(b.innerText="Activate",b.style.backgroundColor="green"),!1===(0,l.returnNofallToggle)()&&(k.innerText="Activate",k.style.backgroundColor="green"),!1===(0,i.returnFullbrightToggle)()&&(m.innerText="Activate",m.style.backgroundColor="green"),!1===(0,u.returnnowebToggle)()&&(h.innerText="Activate",h.style.backgroundColor="green"),!1===(0,c.returnautoclickertoggle)()&&(x.innerText="Activate",x.style.backgroundColor="green"),!1===(0,s.returnslipperytoggle)()&&(w.innerText="Activate",w.style.backgroundColor="green"),!1===(0,g.returnautosprinttoggle)()&&(A.innerText="Activate",A.style.backgroundColor="green"),!1===(0,d.returnautowtaptoggle)()&&(T.innerText="Activate",T.style.backgroundColor="green"),!1===(0,p.returnspeedtoggle)()&&(I.innerText="Activate",I.style.backgroundColor="green"),!0===(0,a.returnjetpacktoggle)()&&(r.innerText="Deactivate",r.style.backgroundColor="red"),!0===(0,n.returnStepToggle)()&&(v.innerText="Deactivate",v.style.backgroundColor="red"),!0===(0,o.returnSpiderToggle)()&&(b.innerText="Deactivate",b.style.backgroundColor="red"),!0===(0,l.returnNofallToggle)()&&(k.innerText="Deactivate",k.style.backgroundColor="red"),!0===(0,i.returnFullbrightToggle)()&&(m.innerText="Deactivate",m.style.backgroundColor="red"),!0===(0,u.returnnowebToggle)()&&(h.innerText="Deactivate",h.style.backgroundColor="red"),!0===(0,c.returnautoclickertoggle)()&&(x.innerText="Deactivate",x.style.backgroundColor="red"),!0===(0,s.returnslipperytoggle)()&&(w.innerText="Deactivate",w.style.backgroundColor="red"),!0===(0,g.returnautosprinttoggle)()&&(A.innerText="Deactivate",A.style.backgroundColor="red"),!0===(0,d.returnautowtaptoggle)()&&(T.innerText="Deactivate",T.style.backgroundColor="red"),!0===(0,p.returnspeedtoggle)()&&(I.innerText="Deactivate",I.style.backgroundColor="red"),v.addEventListener("click",(function(){!0!==(0,n.returnStepToggle)()?(v.innerText="Deactivate",v.style.backgroundColor="red",(0,n.setStepToggle)(!0)):(v.innerText="Activate",v.style.backgroundColor="green",(0,n.setStepToggle)(!1))})),b.addEventListener("click",(function(){!0!==(0,o.returnSpiderToggle)()?(b.innerText="Deactivate",b.style.backgroundColor="red",(0,o.setSpiderToggle)(!0)):(b.innerText="Activate",b.style.backgroundColor="green",(0,o.setSpiderToggle)(!1))})),k.addEventListener("click",(function(){!0!==(0,l.returnNofallToggle)()?(k.innerText="Deactivate",k.style.backgroundColor="red",(0,l.setNofallToggle)(!0)):(k.innerText="Activate",k.style.backgroundColor="green",(0,l.setNofallToggle)(!1))})),m.addEventListener("click",(function(){!0!==(0,i.returnFullbrightToggle)()?(m.innerText="Deactivate",m.style.backgroundColor="red",(0,i.setFullbrightToggle)(!0)):(m.innerText="Activate",m.style.backgroundColor="green",(0,i.setFullbrightToggle)(!1))})),r.addEventListener("click",(function(){!0!==(0,a.returnjetpacktoggle)()?(r.innerText="Deactivate",r.style.backgroundColor="red",(0,a.setjetpacktoggle)(!0)):(r.innerText="Activate",r.style.backgroundColor="green",(0,a.setjetpacktoggle)(!1))})),y.addEventListener("click",(function(){var e=prompt("choose the force for jetpack.(more than 0.2 might trigger anticheats)\ndefault : 0.2 \ncurrent : "+(0,a.returnjetpackforce)()),t=Number(e);isNaN(t)&&(alert("jetpackforce is NAN (not a number) setting jetpackforce to default"),(0,a.setjetpackforce)(.2)),null==e||""==e?(alert("User cancelled the prompt.\n setting jetpackforce to default (0.2)"),(0,a.setjetpackforce)(.2)):(alert("jetpackforce set to "+e),(0,a.setjetpackforce)(t))})),h.addEventListener("click",(function(){!0!==(0,u.returnnowebToggle)()?(h.innerText="Deactivate",h.style.backgroundColor="red",(0,u.setnowebToggle)(!0)):(h.innerText="Activate",h.style.backgroundColor="green",(0,u.setnowebToggle)(!1))})),x.addEventListener("click",(function(){!0!==(0,c.returnautoclickertoggle)()?(x.innerText="Deactivate",x.style.backgroundColor="red",(0,c.setautoclickertoggle)(!0)):(x.innerText="Activate",x.style.backgroundColor="green",(0,c.setautoclickertoggle)(!1))})),P.addEventListener("click",(function(){var e=!1,t=prompt("choose mode (by entering a numberin the box below): \n [1] rightclick \n [2] leftclick","2"),r=Number(t);if(null==t||""==t?(console.log("User cancelled the prompt.\n mode set to default(leftclick)"),(0,c.setautoclickermode)("leftclick"),e=!0):"1"===t?(0,c.setautoclickermode)("rightclick"):"2"===t?(0,c.setautoclickermode)("leftclick"):(isNaN(r),alert("invalid input("+t+") please press the settings button again \n and choose the clicking mode that you want"),e=!0),!e){var n=prompt("enter delay between clicks (per tick (20 ticks = 1 second))\n (example : 10) \n (examples not to enter: 69.420) :","20"),o=Number(n);null==n?alert("User cancelled the delay prompt.\n delay set to default (20 ticks(1 cps))"):"1"===t?(0,c.setrightclickdelay)(o):"2"===t?(0,c.setleftclickdelay)(o):isNaN(o)&&alert("the delay that you chose("+n+") is NOT A NUMBER,\nplease press the settings button again and \n choose the delay that you want")}})),w.addEventListener("click",(function(){!0!==(0,s.returnslipperytoggle)()?(w.innerText="Deactivate",w.style.backgroundColor="red",(0,s.setslipperyToggle)(!0)):(w.innerText="Activate",w.style.backgroundColor="green",(0,s.setslipperyToggle)(!1))})),A.addEventListener("click",(function(){!0!==(0,g.returnautosprinttoggle)()?(1==(0,d.returnautowtaptoggle)()&&(T.innerText="Activate",T.style.backgroundColor="green",(0,d.setautowtaptoggle)(!1)),A.innerText="Deactivate",A.style.backgroundColor="red",(0,g.setautosprinttoggle)(!0)):(A.innerText="Activate",A.style.backgroundColor="green",(0,g.setautosprinttoggle)(!1))})),T.addEventListener("click",(function(){!0!==(0,d.returnautowtaptoggle)()?(1==(0,g.returnautosprinttoggle)()&&(A.innerText="Activate",A.style.backgroundColor="green",(0,g.setautosprinttoggle)(!1)),T.innerText="Deactivate",T.style.backgroundColor="red",(0,d.setautowtaptoggle)(!0)):(T.innerText="Activate",T.style.backgroundColor="green",(0,d.setautowtaptoggle)(!1))})),I.addEventListener("click",(function(){!0!==(0,p.returnspeedtoggle)()?(I.innerText="Deactivate",I.style.backgroundColor="red",(0,p.setspeedtoggle)(!0)):(I.innerText="Activate",I.style.backgroundColor="green",(0,p.setspeedtoggle)(!1))})),E.addEventListener("click",(function(){var e=prompt("how fast do you want to be? \ndefault: 2(double the speed) \ncurrent: "+(0,p.returnspeedvalue)()),t=Number(e);isNaN(t)&&(alert("speed is NAN (not a number) setting speed to default"),(0,p.setspeedvalue)(2)),null==e||""==e?(alert("User cancelled the prompt.\n setting speed to default (2)"),(0,p.setspeedvalue)(2)):(alert("speed set to "+e),(0,p.setspeedvalue)(t))}))}()),"Escape"!==t.key&&"`"!==t.key||e()}))},t.returnguivisible=function(){return f}},850:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnisjetpackflying=t.returnjetpackforce=t.setjetpackforce=t.returnjetpacktoggle=t.setjetpacktoggle=t.registerjetpack=void 0;var r=!1,n=.2,o=!1;t.registerjetpack=function(){PluginAPI.require("player"),window.addEventListener("keydown",(function(e){" "===e.key.toLowerCase()&&(o=!0)})),window.addEventListener("keyup",(function(e){" "===e.key.toLowerCase()&&(o=!1)})),PluginAPI.addEventListener("update",(function(){if(1==r&&null!=document.pointerLockElement){if(!o)return;PluginAPI.player.motionY+=n,PluginAPI.player.reload()}}))},t.setjetpacktoggle=function(e){r=e},t.returnjetpacktoggle=function(){return r},t.setjetpackforce=function(e){n=e},t.returnjetpackforce=function(){return n},t.returnisjetpackflying=function(){return o}},754:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnslipperytoggle=t.setslipperyToggle=void 0;var r=!1;t.setslipperyToggle=function(e){r=e},t.returnslipperytoggle=function(){return r}},315:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnspeedvalue=t.setspeedvalue=t.returnspeedtoggle=t.setspeedtoggle=t.registerspeed=void 0;var n=!1,o=2,l=r(850);t.registerspeed=function(){PluginAPI.require("player");var e=PluginAPI.player.motionX,t=PluginAPI.player.motionZ;PluginAPI.addEventListener("update",(function(){PluginAPI.player.onGround?1==n&&(PluginAPI.player.motionX*=o,PluginAPI.player.motionZ*=o):(0,l.returnisjetpackflying)()&&l.returnjetpacktoggle&&1==n&&(PluginAPI.player.motionX*=o,PluginAPI.player.motionZ*=o),0==n&&(PluginAPI.player.motionX=e,PluginAPI.player.motionZ=t)}))},t.setspeedtoggle=function(e){n=e},t.returnspeedtoggle=function(){return n},t.setspeedvalue=function(e){o=e},t.returnspeedvalue=function(){return o}},142:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnrightclickdelay=t.setrightclickdelay=t.returnleftclickdelay=t.setleftclickdelay=t.returnautoclickermode=t.setautoclickermode=t.returnautoclickertoggle=t.setautoclickertoggle=t.registerautoclicker=void 0;var r=!1,n="leftclick",o=20,l=0,i=20,a=0;t.registerautoclicker=function(){PluginAPI.addEventListener("update",(function(){1==r&&("rightclick"===n&&++a>i&&(PluginAPI.rightClickMouse(),a=0),"leftclick"===n&&++l>o&&(PluginAPI.clickMouse(),l=0),PluginAPI.player.reload())}))},t.setautoclickertoggle=function(e){r=e},t.returnautoclickertoggle=function(){return r},t.setautoclickermode=function(e){n=e},t.returnautoclickermode=function(){return n},t.setleftclickdelay=function(e){o=e},t.returnleftclickdelay=function(){return o},t.setrightclickdelay=function(e){i=e},t.returnrightclickdelay=function(){return i}},483:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnautosprinttoggle=t.setautosprinttoggle=t.registerautosprint=void 0;var r=!1;t.registerautosprint=function(){PluginAPI.require("player"),PluginAPI.addEventListener("update",(function(){r&&PluginAPI.player.setSprinting({flag:!0})}))},t.setautosprinttoggle=function(e){r=e},t.returnautosprinttoggle=function(){return r}},930:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnautowtaptoggle=t.setautowtaptoggle=t.registerwtap=void 0;var r=!1;t.registerwtap=function(){var e=0;PluginAPI.addEventListener("update",(function(){r&&(e=-1,PluginAPI.player.setSprinting({flag:!0}),PluginAPI.player.isSwingInProgress&&e<0&&(PluginAPI.player.setSprinting({flag:!1}),e=3))}))},t.setautowtaptoggle=function(e){r=e},t.returnautowtaptoggle=function(){return r}},617:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnNofallToggle=t.setNofallToggle=t.registerNofall=void 0;var r=!1;t.registerNofall=function(){PluginAPI.require("network"),PluginAPI.addEventListener("update",(function(){PluginAPI.player.fallDistance>2&&r&&PluginAPI.network.sendPacketPlayer({isOnGround:!0})}))},t.setNofallToggle=function(e){r=e},t.returnNofallToggle=function(){return r}},650:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnnowebToggle=t.setnowebToggle=t.registernoweb=void 0;var r=!1;t.registernoweb=function(){PluginAPI.require("player"),PluginAPI.addEventListener("update",(function(){1==r&&(PluginAPI.player.isInWeb=!1,PluginAPI.player.reload())}))},t.setnowebToggle=function(e){r=e},t.returnnowebToggle=function(){return r}},943:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnSpiderToggle=t.setSpiderToggle=t.registerSpider=void 0;var r=!1;t.registerSpider=function(){PluginAPI.require("player"),PluginAPI.addEventListener("update",(function(){PluginAPI.player.isCollidedHorizontally&&1==r&&(PluginAPI.player.motionY=.2,PluginAPI.player.reload())}))},t.setSpiderToggle=function(e){r=e},t.returnSpiderToggle=function(){return r}},845:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnStepToggle=t.setStepToggle=t.registerStep=void 0;var r=!1;t.registerStep=function(){PluginAPI.addEventListener("update",(function(){1==r?(PluginAPI.player.stepHeight=1,PluginAPI.player.reload()):(PluginAPI.player.stepHeight=.5,PluginAPI.player.reload())}))},t.setStepToggle=function(e){r=e},t.returnStepToggle=function(){return r}},410:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnFullbrightToggle=t.setFullbrightToggle=t.registerFullbright=void 0;var r=!1;t.registerFullbright=function(){PluginAPI.addEventListener("update",(function(){0==r?(PluginAPI.blocks.air.lightValue=0,PluginAPI.blocks.air.reload()):(PluginAPI.blocks.air.lightValue=10,PluginAPI.blocks.air.reload())}))},t.setFullbrightToggle=function(e){r=e},t.returnFullbrightToggle=function(){return r}},665:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.displayToChat=void 0,t.displayToChat=function(e){PluginAPI.displayToChat({msg:e})}},998:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MeteorXfailure=t.MeteorXsuccess=t.MeteorXerror=t.MeteorXwarning=t.MeteorXlog=void 0;var n=r(665);t.MeteorXlog=function(e){(0,n.displayToChat)("§c[§6MeteorX§c]§f "+e)},t.MeteorXwarning=function(e){(0,n.displayToChat)("§c[§6§lWARNING§c]§f "+e)},t.MeteorXerror=function(e){(0,n.displayToChat)("§c[§4§lERROR§c]§f "+e)},t.MeteorXsuccess=function(e){(0,n.displayToChat)("§a[§2§lSUCCESS§a]§f "+e)},t.MeteorXfailure=function(e){(0,n.displayToChat)("§c[§4§lFAILURE§c]§f "+e)}},222:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.copy=void 0,t.copy=function(e){var t=document.createElement("input");t.value=e,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t)}},666:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.updatePlayerPosition=t.getplayerpos=t.addtoplayerzpos=t.addtoplayerypos=t.addtoplayerxpos=void 0,PluginAPI.require("player");var r={x:0,y:0,z:0};t.getplayerpos=r,t.updatePlayerPosition=function(){r.x=PluginAPI.player.x,r.y=PluginAPI.player.y,r.z=PluginAPI.player.z,PluginAPI.player.reload()},t.addtoplayerxpos=function(e){PluginAPI.player.x+=e},t.addtoplayerypos=function(e){PluginAPI.player.y+=e},t.addtoplayerzpos=function(e){PluginAPI.player.z+=e}},756:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.gettps=t.registertps=void 0;var r=0;t.registertps=function(){var e,t=-1;PluginAPI.addEventListener("packettimeupdate",(function(n){var o=n.totalWorldTime,l=(new Date).getTime();-1==t&&(e=l,t=o);var i=o-t,a=l-e;t=o,e=l,r=i/(a/1e3)}))},t.gettps=function(){return r}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var l=t[n]={exports:{}};return e[n](l,l.exports,r),l.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=r(260),t=r(943),n=r(845),o=r(617),l=r(850),i=r(410),a=r(54),u=r(650),c=r(756),s=r(483),g=r(930),d=r(315);try{console.log("[MeteorX] Loading client..."),(0,a.registercmds)(),(0,u.registernoweb)(),(0,e.registergui)(),(0,l.registerjetpack)(),(0,t.registerSpider)(),(0,n.registerStep)(),(0,o.registerNofall)(),(0,i.registerFullbright)(),(0,c.registertps)(),(0,s.registerautosprint)(),(0,g.registerwtap)(),(0,d.registerspeed)(),console.log("[MeteorX] Finished loading client!")}catch(e){console.error("[MeteorX] Error during client execution:",e)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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USxLQUNwQkQsRUFBZSxFQUFRLEtBQ3ZCcU0sRUFBUyxFQUFRLElBQ2pCbk0sRUFBVSxFQUFRLEtBQ2xCOUMsRUFBUSxFQUFRLEtBQ2hCaUQsRUFBZSxFQUFRLEtBQ3ZCQyxFQUFhLEVBQVEsS0FDckJDLEVBQVUsRUFBUSxLQUN0QixJQUVJNEUsUUFBUUMsSUFBSSxnQ0FFWixFQUFJaUgsRUFBT3JQLGlCQUNYLEVBQUlrRCxFQUFROEksa0JBQ1osRUFBSW9ELEVBQU14TSxnQkFDVixFQUFJSyxFQUFVbUcsb0JBQ2QsRUFBSXRHLEVBQVNxSixtQkFDYixFQUFJdEosRUFBT3lKLGlCQUNYLEVBQUl2SixFQUFTNEksbUJBQ2IsRUFBSTNJLEVBQWF5Six1QkFHakIsRUFBSXJNLEVBQU11TixnQkFDVixFQUFJdEssRUFBYThILHVCQUNqQixFQUFJN0gsRUFBV2lJLGlCQUNmLEVBQUloSSxFQUFRc0csaUJBRVoxQixRQUFRQyxJQUFJLHFDQUNoQixDQUNBLE1BQU9rSCxHQUVIbkgsUUFBUW1ILE1BQU0sMkNBQTRDQSxFQUM5RCxDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWV0ZW9yeC8uL25vZGVfbW9kdWxlcy9vd29pZnktanMvZGlzdC9vd29pZnktanMuZXNtLmpzIiwid2VicGFjazovL21ldGVvcngvLi9zcmMvZXRjL2NtZHMudHMiLCJ3ZWJwYWNrOi8vbWV0ZW9yeC8uL3NyYy9ldGMvZ3VpLnRzIiwid2VicGFjazovL21ldGVvcngvLi9zcmMvbW9kdWxlcy9tb3ZlbWVudC9qZXRwYWNrLnRzIiwid2VicGFjazovL21ldGVvcngvLi9zcmMvbW9kdWxlcy9tb3ZlbWVudC9zbGlwcGVyeS50cyIsIndlYnBhY2s6Ly9tZXRlb3J4Ly4vc3JjL21vZHVsZXMvbW92ZW1lbnQvc3BlZWQudHMiLCJ3ZWJwYWNrOi8vbWV0ZW9yeC8uL3NyYy9tb2R1bGVzL3BsYXllci9hdXRvY2xpY2tlci50cyIsIndlYnBhY2s6Ly9tZXRlb3J4Ly4vc3JjL21vZHVsZXMvcGxheWVyL2F1dG9zcHJpbnQudHMiLCJ3ZWJwYWNrOi8vbWV0ZW9yeC8uL3NyYy9tb2R1bGVzL3BsYXllci9hdXRvd3RhcC50cyIsIndlYnBhY2s6Ly9tZXRlb3J4Ly4vc3JjL21vZHVsZXMvcGxheWVyL25vZmFsbC50cyIsIndlYnBhY2s6Ly9tZXRlb3J4Ly4vc3JjL21vZHVsZXMvcGxheWVyL25vd2ViLnRzIiwid2VicGFjazovL21ldGVvcngvLi9zcmMvbW9kdWxlcy9wbGF5ZXIvc3BpZGVyLnRzIiwid2VicGFjazovL21ldGVvcngvLi9zcmMvbW9kdWxlcy9wbGF5ZXIvc3RlcC50cyIsIndlYnBhY2s6Ly9tZXRlb3J4Ly4vc3JjL21vZHVsZXMvcmVuZGVyL2Z1bGxicmlnaHQudHMiLCJ3ZWJwYWNrOi8vbWV0ZW9yeC8uL3NyYy91dGlscy9jaGF0LnRzIiwid2VicGFjazovL21ldGVvcngvLi9zcmMvdXRpbHMvY2hhdHV0aWxzLnRzIiwid2VicGFjazovL21ldGVvcngvLi9zcmMvdXRpbHMvY2xpcGJvYXJkdXRpbHMudHMiLCJ3ZWJwYWNrOi8vbWV0ZW9yeC8uL3NyYy91dGlscy9wbGF5ZXJ1dGlscy50cyIsIndlYnBhY2s6Ly9tZXRlb3J4Ly4vc3JjL3V0aWxzL3Rwcy50cyIsIndlYnBhY2s6Ly9tZXRlb3J4L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL21ldGVvcngvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL21ldGVvcngvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9tZXRlb3J4Ly4vc3JjL21haW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG5cbiAgcmV0dXJuIGFycjI7XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UobywgYWxsb3dBcnJheUxpa2UpIHtcbiAgdmFyIGl0ID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1tcIkBAaXRlcmF0b3JcIl07XG4gIGlmIChpdCkgcmV0dXJuIChpdCA9IGl0LmNhbGwobykpLm5leHQuYmluZChpdCk7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikge1xuICAgIGlmIChpdCkgbyA9IGl0O1xuICAgIHZhciBpID0gMDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7XG4gICAgICAgIGRvbmU6IHRydWVcbiAgICAgIH07XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IG9baSsrXVxuICAgICAgfTtcbiAgICB9O1xuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG5mdW5jdGlvbiBzZWFyY2hWYWx1ZUNvbnRhaW5zUmVwbGFjZWRXb3JkcyhzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlLCByZXBsYWNlZFdvcmRzKSB7XG4gIHJldHVybiBBcnJheS5mcm9tKHJlcGxhY2VkV29yZHMpLnNvbWUoZnVuY3Rpb24gKHdvcmQpIHtcbiAgICByZXR1cm4gd29yZC5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpICE9PSB3b3JkO1xuICB9KTtcbn1cblxudmFyIFdvcmQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBXb3JkKHdvcmQpIHtcbiAgICB0aGlzLndvcmQgPSB3b3JkLnRyaW0oKTtcbiAgICB0aGlzLnJlcGxhY2VkV29yZHMgPSBuZXcgU2V0KCk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gV29yZC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUsIHJlcGxhY2VSZXBsYWNlZFdvcmRzKSB7XG4gICAgaWYgKHJlcGxhY2VSZXBsYWNlZFdvcmRzID09PSB2b2lkIDApIHtcbiAgICAgIHJlcGxhY2VSZXBsYWNlZFdvcmRzID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFyZXBsYWNlUmVwbGFjZWRXb3JkcyAmJiBzZWFyY2hWYWx1ZUNvbnRhaW5zUmVwbGFjZWRXb3JkcyhzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlLCB0aGlzLnJlcGxhY2VkV29yZHMpKSByZXR1cm4gdGhpcztcbiAgICB2YXIgcmVwbGFjaW5nV29yZCA9IHRoaXMud29yZC5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpLnRyaW0oKTtcbiAgICB2YXIgbWF0Y2hBcnJheSA9IHRoaXMud29yZC5tYXRjaChzZWFyY2hWYWx1ZSk7XG4gICAgdmFyIHJlcGxhY2VkV29yZHMgPSBtYXRjaEFycmF5ICE9PSBudWxsID8gQXJyYXkuZnJvbShtYXRjaEFycmF5KS5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiB4LnJlcGxhY2UoeCwgcmVwbGFjZVZhbHVlKTtcbiAgICB9KSA6IFtdO1xuXG4gICAgaWYgKHJlcGxhY2luZ1dvcmQgIT09IHRoaXMud29yZCkge1xuICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShyZXBsYWNlZFdvcmRzKSwgX3N0ZXA7ICEoX3N0ZXAgPSBfaXRlcmF0b3IoKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIHdvcmQgPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgdGhpcy5yZXBsYWNlZFdvcmRzLmFkZCh3b3JkKTtcbiAgICAgIH1cbiAgICAgIHRoaXMud29yZCA9IHJlcGxhY2luZ1dvcmQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMud29yZDtcbiAgfTtcblxuICByZXR1cm4gV29yZDtcbn0oKTtcblxuLyoqXHJcbiAqIEludGVybGVhdmVzIDIgYXJyYXlzXHJcbiAqIEBpbnRlcm5hbFxyXG4gKiBAcGFyYW0gYSBmaXJzdCBhcnJheVxyXG4gKiBAcGFyYW0gYiBzZWNvbmQgYXJyeVxyXG4gKiBAcmV0dXJucyBhcnJheSB3aXRoIGludGVybGVhdmVkIGVsZW1lbnRzXHJcbiAqL1xuZnVuY3Rpb24gaW50ZXJsZWF2ZUFycmF5cyhhLCBiKSB7XG4gIHZhciBhcnIgPSBbXTtcbiAgdmFyIG9ic2VydmVkID0gYTtcbiAgdmFyIG90aGVyID0gYjtcbiAgdmFyIHRlbXAgPSBudWxsO1xuXG4gIHdoaWxlIChvYnNlcnZlZC5sZW5ndGggPiAwKSB7XG4gICAgYXJyLnB1c2gob2JzZXJ2ZWQuc2hpZnQoKSk7XG4gICAgdGVtcCA9IG9ic2VydmVkO1xuICAgIG9ic2VydmVkID0gb3RoZXI7XG4gICAgb3RoZXIgPSB0ZW1wO1xuICB9XG5cbiAgaWYgKG90aGVyLmxlbmd0aCA+IDApIGFyci5wdXNoLmFwcGx5KGFyciwgb3RoZXIpO1xuICByZXR1cm4gYXJyO1xufVxuXG52YXIgZmFjZXMgPSBbJyjjg7tgz4nCtOODuyknLCAnOzt3OzsnLCAnb3dvJywgJ1V3VScsICc+dzwnLCAnXndeJywgJygqIF4gz4kgXiknLCAnKOKMks+J4oySKScsICfjg70oKuODu8+J44O7Ke++iScsICcob8K04oiAYG8pJywgJyhv772lz4nvvaVvKScsICfvvLwo77y+4pa977y+Ke+8jyddO1xudmFyIE1hcF9PX1RvX093TyA9IGZ1bmN0aW9uIE1hcF9PX1RvX093TyhpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvby9nLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSkgPyAnb3dvJyA6ICdvJztcbiAgfSk7XG59O1xudmFyIE1hcF9Fd19Ub19Vd1UgPSBmdW5jdGlvbiBNYXBfRXdfVG9fVXdVKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC9ldy9nLCAndXd1Jyk7XG59O1xudmFyIE1hcF9IZXlfVG9fSGF5ID0gZnVuY3Rpb24gTWFwX0hleV9Ub19IYXkoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLyhbSGhdKWV5L2csICckMWF5Jyk7XG59O1xudmFyIE1hcF9EZWFkX1RvX0RlZCA9IGZ1bmN0aW9uIE1hcF9EZWFkX1RvX0RlZChpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvRGVhZC9nLCAnRGVkJykucmVwbGFjZSgvZGVhZC9nLCAnZGVkJyk7XG59O1xudmFyIE1hcF9OX1Zvd2VsX1RfVG9fTmQgPSBmdW5jdGlvbiBNYXBfTl9Wb3dlbF9UX1RvX05kKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC9uW2FlaW91XSp0L2csICduZCcpO1xufTtcbnZhciBNYXBfUmVhZF9Ub19XZWFkID0gZnVuY3Rpb24gTWFwX1JlYWRfVG9fV2VhZChpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvUmVhZC9nLCAnV2VhZCcpLnJlcGxhY2UoL3JlYWQvZywgJ3dlYWQnKTtcbn07XG52YXIgTWFwX0JyYWNrZXRzX1RvX1N0YXJUcmFpbHMgPSBmdW5jdGlvbiBNYXBfQnJhY2tldHNfVG9fU3RhclRyYWlscyhpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvWyh7PF0vZywgJ++9oe+9pToqOu+9pe++n+KYhSzvvaHvvaU6KjrvvaXvvp/imIYnKS5yZXBsYWNlKC9bKX0+XS9nLCAn4piG776f772lOio6772l772hLOKYhe++n++9pToqOu+9pe+9oScpO1xufTtcbnZhciBNYXBfUGVyaW9kQ29tbWFFeGNsYW1hdGlvblNlbWljb2xvbl9Ub19LYW9tb2ppcyA9IGZ1bmN0aW9uIE1hcF9QZXJpb2RDb21tYUV4Y2xhbWF0aW9uU2VtaWNvbG9uX1RvX0thb21vamlzKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC9bLixdKD8hWzAtOV0pL2csIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJyAnICsgZmFjZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogZmFjZXMubGVuZ3RoKV07XG4gIH0pLnJlcGxhY2UoL1shO10rL2csIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJyAnICsgZmFjZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogZmFjZXMubGVuZ3RoKV07XG4gIH0pO1xufTtcbnZhciBNYXBfVGhhdF9Ub19EYXQgPSBmdW5jdGlvbiBNYXBfVGhhdF9Ub19EYXQoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL3RoYXQvZywgJ2RhdCcpLnJlcGxhY2UoL1RoYXQvZywgJ0RhdCcpO1xufTtcbnZhciBNYXBfVGhfVG9fRiA9IGZ1bmN0aW9uIE1hcF9UaF9Ub19GKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC9bVHRdaCg/IVtFZV0pL2csICdmJykucmVwbGFjZSgvVEgoPyFFKS9nLCAnRicpO1xufTtcbnZhciBNYXBfTGVfVG9fV2FsID0gZnVuY3Rpb24gTWFwX0xlX1RvX1dhbChpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvbGUkL2csICd3YWwnKTtcbn07XG52YXIgTWFwX1ZlX1RvX1dlID0gZnVuY3Rpb24gTWFwX1ZlX1RvX1dlKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC92ZS9nLCAnd2UnKS5yZXBsYWNlKC9WZS9nLCAnV2UnKTtcbn07XG52YXIgTWFwX1J5X1RvX1d3eSA9IGZ1bmN0aW9uIE1hcF9SeV9Ub19Xd3koaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL3J5L2csICd3d3knKTtcbn07XG52YXIgTWFwX1JPckxfVG9fVyA9IGZ1bmN0aW9uIE1hcF9ST3JMX1RvX1coaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLyg/OnJ8bCkvZywgJ3cnKS5yZXBsYWNlKC8oPzpSfEwpL2csICdXJyk7XG59O1xudmFyIE1hcF9MbF9Ub19XdyA9IGZ1bmN0aW9uIE1hcF9MbF9Ub19XdyhpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvbGwvZywgJ3d3Jyk7XG59O1xudmFyIE1hcF9Wb3dlbE9yUkV4Y2VwdE9fTF9Ub19XbCA9IGZ1bmN0aW9uIE1hcF9Wb3dlbE9yUkV4Y2VwdE9fTF9Ub19XbChpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvW2FlaXVyXWwkL2csICd3bCcpLnJlcGxhY2UoL1tBRUlVUl0oW2xMXSkkL2csICdXJDEnKTtcbn07XG52YXIgTWFwX09sZF9Ub19Pd2xkID0gZnVuY3Rpb24gTWFwX09sZF9Ub19Pd2xkKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC8oW09vXSlsZC9nLCAnJDF3bGQnKS5yZXBsYWNlKC9PTEQvZywgJ09XTEQnKTtcbn07XG52YXIgTWFwX09sX1RvX093bCA9IGZ1bmN0aW9uIE1hcF9PbF9Ub19Pd2woaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLyhbT29dKWwvZywgJyQxd2wnKS5yZXBsYWNlKC9PTC9nLCAnT1dMJyk7XG59O1xudmFyIE1hcF9MT3JSX09fVG9fV28gPSBmdW5jdGlvbiBNYXBfTE9yUl9PX1RvX1dvKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC9bbHJdby9nLCAnd28nKS5yZXBsYWNlKC9bTFJdKFtvT10pL2csICdXJDEnKTtcbn07XG52YXIgTWFwX1NwZWNpZmljQ29uc29uYW50c19PX1RvX0xldHRlcl9BbmRfV28gPSBmdW5jdGlvbiBNYXBfU3BlY2lmaWNDb25zb25hbnRzX09fVG9fTGV0dGVyX0FuZF9XbyhpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvKFtiY2RmZ2hqa21ucHFzdHh5el0pby9nLCAnJDF3bycpLnJlcGxhY2UoLyhbQkNERkdISktNTlBRU1RYWVpdKShbb09dKS9nLCBmdW5jdGlvbiAoXywgbTEsIG0yKSB7XG4gICAgcmV0dXJuIG0xICsgKG0yLnRvVXBwZXJDYXNlKCkgPT09IG0yID8gJ1cnIDogJ3cnKSArIG0yO1xuICB9KTtcbn07XG52YXIgTWFwX1ZPcldfTGVfVG9fV2FsID0gZnVuY3Rpb24gTWFwX1ZPcldfTGVfVG9fV2FsKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC9bdnddbGUvZywgJ3dhbCcpO1xufTtcbnZhciBNYXBfRmlfVG9fRndpID0gZnVuY3Rpb24gTWFwX0ZpX1RvX0Z3aShpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvKFtGZl0paS9nLCAnJDF3aScpLnJlcGxhY2UoL0ZJL2csICdGV0knKTtcbn07XG52YXIgTWFwX1Zlcl9Ub19XZXIgPSBmdW5jdGlvbiBNYXBfVmVyX1RvX1dlcihpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvKFtWdl0pZXIvZywgJ3dlcicpO1xufTtcbnZhciBNYXBfUG9pX1RvX1B3b2kgPSBmdW5jdGlvbiBNYXBfUG9pX1RvX1B3b2koaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLyhbUHBdKW9pL2csICckMXdvaScpO1xufTtcbnZhciBNYXBfU3BlY2lmaWNDb25zb25hbnRzX0xlX1RvX0xldHRlcl9BbmRfV2FsID0gZnVuY3Rpb24gTWFwX1NwZWNpZmljQ29uc29uYW50c19MZV9Ub19MZXR0ZXJfQW5kX1dhbChpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvKFtEZEZmR2dIaEpqUHBRcVJyU3NUdFh4WXlael0pbGUkL2csICckMXdhbCcpO1xufTtcbnZhciBNYXBfQ29uc29uYW50X1JfVG9fQ29uc29uYW50X1cgPSBmdW5jdGlvbiBNYXBfQ29uc29uYW50X1JfVG9fQ29uc29uYW50X1coaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLyhbQmJDY0RkRmZHZ0trUHBRcVNzVHRXd1h4WnpdKXIvZywgJyQxdycpO1xufTtcbnZhciBNYXBfTHlfVG9fV3kgPSBmdW5jdGlvbiBNYXBfTHlfVG9fV3koaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL2x5L2csICd3eScpLnJlcGxhY2UoL0x5L2csICdXeScpO1xufTtcbnZhciBNYXBfUGxlX1RvX1B3ZSA9IGZ1bmN0aW9uIE1hcF9QbGVfVG9fUHdlKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC8oW1BwXSlsZS9nLCAnJDF3ZScpO1xufTtcbnZhciBNYXBfTnJfVG9fTncgPSBmdW5jdGlvbiBNYXBfTnJfVG9fTncoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLyhbTm5dKXIvZywgJyQxdycpLnJlcGxhY2UoL05SL2csICdOVycpO1xufTtcbnZhciBNYXBfTWVtX1RvX013ZW0gPSBmdW5jdGlvbiBNYXBfTWVtX1RvX013ZW0oaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL01lbS9nLCAnbXdlbScpLnJlcGxhY2UoL21lbS9nLCAnTXdlbScpO1xufTtcbnZhciBVbm1hcF9OeXdvX1RvX055byA9IGZ1bmN0aW9uIFVubWFwX055d29fVG9fTnlvKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC8oW05uXSl5d28vZywgJyQxeW8nLCB0cnVlKTtcbn07XG52YXIgTWFwX0Z1Y19Ub19Gd3VjID0gZnVuY3Rpb24gTWFwX0Z1Y19Ub19Gd3VjKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC8oW0ZmXSl1Yy9nLCAnJDF3dWMnKTtcbn07XG52YXIgTWFwX01vbV9Ub19Nd29tID0gZnVuY3Rpb24gTWFwX01vbV9Ub19Nd29tKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC8oW01tXSlvbS9nLCAnJDF3b20nKTtcbn07XG52YXIgTWFwX01lX1RvX013ZSA9IGZ1bmN0aW9uIE1hcF9NZV9Ub19Nd2UoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL15NZSQvZywgJ013ZScpLnJlcGxhY2UoL15tZSQvZywgJ213ZScpO1xufTtcbnZhciBNYXBfTlZvd2VsX1RvX055ID0gZnVuY3Rpb24gTWFwX05Wb3dlbF9Ub19OeShpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvbihbYWVpb3VdKS9nLCAnbnkkMScpLnJlcGxhY2UoL04oW2FlaW91XSkvZywgJ055JDEnKS5yZXBsYWNlKC9OKFtBRUlPVV0pL2csICdOWSQxJyk7XG59O1xudmFyIE1hcF9PdmVfVG9fVXYgPSBmdW5jdGlvbiBNYXBfT3ZlX1RvX1V2KGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC9vdmUvZywgJ3V2JykucmVwbGFjZSgvT1ZFL2csICdVVicpO1xufTtcbnZhciBNYXBfSGFoYV9Ub19IZWhleEQgPSBmdW5jdGlvbiBNYXBfSGFoYV9Ub19IZWhleEQoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1xcYihoYXxoYWh8aGVofGhlaGUpK1xcYi9nLCAnaGVoZSB4RCcpO1xufTtcbnZhciBNYXBfVGhlX1RvX1RlaCA9IGZ1bmN0aW9uIE1hcF9UaGVfVG9fVGVoKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXGIoW1R0XSloZVxcYi9nLCAnJDFlaCcpO1xufTtcbnZhciBNYXBfWW91X1RvX1UgPSBmdW5jdGlvbiBNYXBfWW91X1RvX1UoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1xcYllvdVxcYi9nLCAnVScpLnJlcGxhY2UoL1xcYnlvdVxcYi9nLCAndScpO1xufTtcbnZhciBNYXBfVGltZV9Ub19UaW0gPSBmdW5jdGlvbiBNYXBfVGltZV9Ub19UaW0oaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1xcYihbVHRdKWltZVxcYi9nLCAnJDFpbScpO1xufTtcbnZhciBNYXBfT3Zlcl9Ub19Pd29yID0gZnVuY3Rpb24gTWFwX092ZXJfVG9fT3dvcihpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvKFtPb10pdmVyL2csICckMXdvcicpO1xufTtcbnZhciBNYXBfV29yc2VfVG9fV29zZSA9IGZ1bmN0aW9uIE1hcF9Xb3JzZV9Ub19Xb3NlKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC8oW1d3XSlvcnNlL2csICckMW9zZScpO1xufTtcbnZhciBNYXBfR3JlYXRfVG9fR3dhdGUgPSBmdW5jdGlvbiBNYXBfR3JlYXRfVG9fR3dhdGUoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLyhbR2ddKXJlYXQvZywgJyQxd2F0ZScpO1xufTtcbnZhciBNYXBfQXZpYXRfVG9fQXdpYXQgPSBmdW5jdGlvbiBNYXBfQXZpYXRfVG9fQXdpYXQoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLyhbQWFdKXZpYXQvZywgJyQxd2lhdCcpO1xufTtcbnZhciBNYXBfRGVkaWNhdF9Ub19EZWRpdGF0ID0gZnVuY3Rpb24gTWFwX0RlZGljYXRfVG9fRGVkaXRhdChpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvKFtEZF0pZWRpY2F0L2csICckMWVkaXRhdCcpO1xufTtcbnZhciBNYXBfUmVtZW1iZXJfVG9fUmVtYmVyID0gZnVuY3Rpb24gTWFwX1JlbWVtYmVyX1RvX1JlbWJlcihpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvKFtScl0pZW1lbWJlci9nLCAnJDFlbWJlcicpO1xufTtcbnZhciBNYXBfV2hlbl9Ub19XZW4gPSBmdW5jdGlvbiBNYXBfV2hlbl9Ub19XZW4oaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLyhbV3ddKWhlbi9nLCAnJDFlbicpO1xufTtcbnZhciBNYXBfRnJpZ2h0ZW5lZF9Ub19GcmlndGVuID0gZnVuY3Rpb24gTWFwX0ZyaWdodGVuZWRfVG9fRnJpZ3RlbihpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvKFtGZl0pcmlnaHRlbihlZCkqL2csICckMXJpZ3RlbicpO1xufTtcbnZhciBNYXBfTWVtZV9Ub19NZW0gPSBmdW5jdGlvbiBNYXBfTWVtZV9Ub19NZW0oaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL01lbWUvZywgJ21lbScpLnJlcGxhY2UoL01lbS9nLCAnTWVtJyk7XG59O1xudmFyIE1hcF9GZWVsX1RvX0ZlbGwgPSBmdW5jdGlvbiBNYXBfRmVlbF9Ub19GZWxsKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC9eKFtGZl0pZWVsJC9nLCAnJDFlbGwnKTtcbn07XG5cbnZhciBzcGVjaWZpY1dvcmRNYXBwaW5nQXJyYXkgPSBbTWFwX0Z1Y19Ub19Gd3VjLCBNYXBfTW9tX1RvX013b20sIE1hcF9UaW1lX1RvX1RpbSwgTWFwX01lX1RvX013ZSwgTWFwX092ZXJfVG9fT3dvciwgTWFwX092ZV9Ub19VdiwgTWFwX0hhaGFfVG9fSGVoZXhELCBNYXBfVGhlX1RvX1RlaCwgTWFwX1lvdV9Ub19VLCBNYXBfUmVhZF9Ub19XZWFkLCBNYXBfV29yc2VfVG9fV29zZSwgTWFwX0dyZWF0X1RvX0d3YXRlLCBNYXBfQXZpYXRfVG9fQXdpYXQsIE1hcF9EZWRpY2F0X1RvX0RlZGl0YXQsIE1hcF9SZW1lbWJlcl9Ub19SZW1iZXIsIE1hcF9XaGVuX1RvX1dlbiwgTWFwX0ZyaWdodGVuZWRfVG9fRnJpZ3RlbiwgTWFwX01lbWVfVG9fTWVtLCBNYXBfRmVlbF9Ub19GZWxsXTtcbnZhciB1dnVNYXBwaW5nQXJyYXkgPSBbTWFwX09fVG9fT3dPLCBNYXBfRXdfVG9fVXdVLCBNYXBfSGV5X1RvX0hheSwgTWFwX0RlYWRfVG9fRGVkLCBNYXBfTl9Wb3dlbF9UX1RvX05kXTtcbnZhciB1d3VNYXBwaW5nQXJyYXkgPSBbTWFwX0JyYWNrZXRzX1RvX1N0YXJUcmFpbHMsIE1hcF9QZXJpb2RDb21tYUV4Y2xhbWF0aW9uU2VtaWNvbG9uX1RvX0thb21vamlzLCBNYXBfVGhhdF9Ub19EYXQsIE1hcF9UaF9Ub19GLCBNYXBfTGVfVG9fV2FsLCBNYXBfVmVfVG9fV2UsIE1hcF9SeV9Ub19Xd3ksIE1hcF9ST3JMX1RvX1ddO1xudmFyIG93b01hcHBpbmdBcnJheSA9IFtNYXBfTlZvd2VsX1RvX055LCBNYXBfTGxfVG9fV3csIE1hcF9Wb3dlbE9yUkV4Y2VwdE9fTF9Ub19XbCwgTWFwX09sZF9Ub19Pd2xkLCBNYXBfT2xfVG9fT3dsLCBNYXBfTE9yUl9PX1RvX1dvLCBNYXBfU3BlY2lmaWNDb25zb25hbnRzX09fVG9fTGV0dGVyX0FuZF9XbywgTWFwX1ZPcldfTGVfVG9fV2FsLCBNYXBfRmlfVG9fRndpLCBNYXBfVmVyX1RvX1dlciwgTWFwX1BvaV9Ub19Qd29pLCBNYXBfU3BlY2lmaWNDb25zb25hbnRzX0xlX1RvX0xldHRlcl9BbmRfV2FsLCBNYXBfQ29uc29uYW50X1JfVG9fQ29uc29uYW50X1csIE1hcF9MeV9Ub19XeSwgTWFwX1BsZV9Ub19Qd2UsIE1hcF9Ocl9Ub19OdywgTWFwX01lbV9Ub19Nd2VtLCBVbm1hcF9OeXdvX1RvX055b107XG5cbi8qKlxyXG4gKiBvd29pZnkgZXZlcnl0aGluZ1xyXG4gKiBAcGFyYW0gdiB3b3JkIHRvIG93b2lmeVxyXG4gKiBAcGFyYW0gbGV2ZWwgbGV2ZWwgb2Ygb3dvLW5lc3MuIChvd28gLT4gdXd1IC0+IHV2dSlcclxuICovXG5cbmZ1bmN0aW9uIG93b2lmeSh2LCBsZXZlbCkge1xuICBpZiAobGV2ZWwgPT09IHZvaWQgMCkge1xuICAgIGxldmVsID0gJ293byc7XG4gIH1cblxuICB2YXIgd2hpdGVzcGFjZSA9IHYuc3BsaXQoL1teXFxzXSsvZyk7XG4gIHZhciB3b3JkcyA9IHYuc3BsaXQoL1xccysvZykubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIG5ldyBXb3JkKHgpO1xuICB9KTtcbiAgd29yZHMgPSB3b3Jkcy5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICBzcGVjaWZpY1dvcmRNYXBwaW5nQXJyYXkucmVkdWNlKGZ1bmN0aW9uICh3b3JkLCBmKSB7XG4gICAgICByZXR1cm4gZih3b3JkKTtcbiAgICB9LCB4KTtcblxuICAgIHN3aXRjaCAobGV2ZWwpIHtcbiAgICAgIGNhc2UgJ3V2dSc6XG4gICAgICAgIHV2dU1hcHBpbmdBcnJheS5yZWR1Y2UoZnVuY3Rpb24gKHdvcmQsIGYpIHtcbiAgICAgICAgICByZXR1cm4gZih3b3JkKTtcbiAgICAgICAgfSwgeCk7XG5cbiAgICAgIGNhc2UgJ3V3dSc6XG4gICAgICAgIHV3dU1hcHBpbmdBcnJheS5yZWR1Y2UoZnVuY3Rpb24gKHdvcmQsIGYpIHtcbiAgICAgICAgICByZXR1cm4gZih3b3JkKTtcbiAgICAgICAgfSwgeCk7XG5cbiAgICAgIGNhc2UgJ293byc6XG4gICAgICAgIG93b01hcHBpbmdBcnJheS5yZWR1Y2UoZnVuY3Rpb24gKHdvcmQsIGYpIHtcbiAgICAgICAgICByZXR1cm4gZih3b3JkKTtcbiAgICAgICAgfSwgeCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHg7XG4gIH0pO1xuICByZXR1cm4gaW50ZXJsZWF2ZUFycmF5cyh3aGl0ZXNwYWNlLCB3b3Jkcykuam9pbignJyk7XG59XG5mdW5jdGlvbiB1d3VpZnkodikge1xuICByZXR1cm4gb3dvaWZ5KHYsICd1d3UnKTtcbn1cbmZ1bmN0aW9uIHV2dWlmeSh2KSB7XG4gIHJldHVybiBvd29pZnkodiwgJ3V2dScpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBvd29pZnk7XG5leHBvcnQgeyB1dnVpZnksIHV3dWlmeSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3dvaWZ5LWpzLmVzbS5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZWdpc3RlcmNtZHMgPSB2b2lkIDA7XG52YXIgb3dvaWZ5ID0gcmVxdWlyZSgnb3dvaWZ5LWpzJykuZGVmYXVsdDtcbnZhciBjaGF0dXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9jaGF0dXRpbHNcIik7XG52YXIgcGxheWVydXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9wbGF5ZXJ1dGlsc1wiKTtcbnZhciB0cHNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy90cHNcIik7XG52YXIgY2xpcGJvYXJkdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9jbGlwYm9hcmR1dGlsc1wiKTtcbnZhciB2ZXJzaW9uID0gXCJ2MS4xXCI7XG52YXIgY21kcyA9IFwiLnZlcnNpb24gLCAuaGVscCAsIC5pcCAsIC51d3VpZnkgLCAubXlwb3MsIC52Y2xpcCwgLnRwcywgLmNvcHljb3Jkc1wiO1xudmFyIHNlcnZlcmlwID0gbnVsbDtcbi8vQHRzLWlnbm9yZVxuZnVuY3Rpb24gcmVnaXN0ZXJjbWRzKCkge1xuICAgIC8vQHRzLWlnbm9yZVxuICAgIFBsdWdpbkFQSS5hZGRFdmVudExpc3RlbmVyKFwicGFja2V0am9pbmdhbWVcIiwgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIHNlcnZlcmlwID0gZXYuaXA7XG4gICAgfSk7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgUGx1Z2luQVBJLmFkZEV2ZW50TGlzdGVuZXIoXCJzZW5kY2hhdG1lc3NhZ2VcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5tZXNzYWdlID09PSBcIi52ZXJzaW9uXCIpIHtcbiAgICAgICAgICAgICgwLCBjaGF0dXRpbHNfMS5NZXRlb3JYbG9nKShcInlvdSBhcmUgY3VycmVudGx5IHVzaW5nIHRoZSBcIiArIHZlcnNpb24gKyBcIiB2ZXJzaW9uIG9mIE1ldGVvclguXCIpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudC5tZXNzYWdlID09PSBcIi5oZWxwXCIpIHtcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgKDAsIGNoYXR1dGlsc18xLk1ldGVvclhsb2cpKFwiTWV0ZW9yWCBjb21tYW5kcyA6IFwiICsgY21kcyArIFwiIFwiKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQubWVzc2FnZSA9PT0gXCIuaXBcIikge1xuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAoMCwgY2hhdHV0aWxzXzEuTWV0ZW9yWGxvZykoXCJ0aGUgaXAgb2YgdGhlIGN1cnJlbnQgc2VydmVyIHlvdSBhcmUgcGxheWluZzogXCIgKyBzZXJ2ZXJpcCArIFwiIFwiKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQubWVzc2FnZSA9PT0gXCIudXd1aWZ5XCIpIHtcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgKDAsIGNoYXR1dGlsc18xLk1ldGVvclhsb2cpKFwidXNhZ2U6IC51d3VpZnkgW21lc3NhZ2VdXCIpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudC5tZXNzYWdlLnN0YXJ0c1dpdGgoXCIudXd1aWZ5IFwiKSkge1xuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICB2YXIgdGFyZ2V0TGVuZ3RoID0gXCIudXd1aWZ5XCIubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBldmVudC5tZXNzYWdlLnRvU3RyaW5nKCkudHJpbSgpO1xuICAgICAgICAgICAgaWYgKCAvL0lmXG4gICAgICAgICAgICBtZXNzYWdlLmxlbmd0aCA+IHRhcmdldExlbmd0aCAmJiAvL1RoZSBsZW5ndGggb2YgdGhlIG1lc3NhZ2UgaXMgbG9uZ2VyIHRoYW4gdGhlIHRhcmdldCBsZW5ndGhcbiAgICAgICAgICAgICAgICBtZXNzYWdlLnN1YnN0cmluZygwLCB0YXJnZXRMZW5ndGgpLnRyaW0oKS50b0xvd2VyQ2FzZSgpID09PSBcIi51d3VpZnlcIiAvL0FuZCwgdGhlIGNvbnRlbnQgZnJvbSBjaGFyYWN0ZXIgMCAoZmlyc3QpIHRvIHRoYXQgb2YgdGhlIGxlbmd0aCwgdHJpbW1lZCBhbmQgcHV0IHRvIGxvd2VyY2FzZSBpcyBcIi5tYWtlc2Nyb2xsXCJcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHZhciBhY3R1YWxjaGF0bWVzc2FnZSA9IG1lc3NhZ2Uuc3Vic3RyaW5nKHRhcmdldExlbmd0aCArIDEpO1xuICAgICAgICAgICAgICAgIHZhciB1d3VtZXNzYWdlID0gb3dvaWZ5KGFjdHVhbGNoYXRtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBQbHVnaW5BUEkubmV0d29yay5zZW5kUGFja2V0Q2hhdE1lc3NhZ2UoeyBtZXNzYWdlSW46IHV3dW1lc3NhZ2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLypcbiAgICAgICAgaWYgKGV2ZW50Lm1lc3NhZ2UgPT09IFwiLnRhY29cIikge1xuICAgICAgICAgICAgaWYgKHJldHVybnRhY29Ub2dnbGUoKSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHZhciByYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzKTtcbiAgICAgICAgICAgICAgICBpZiAocmFuZG9tID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIE1ldGVvclhsb2coXCJ0YWNvIVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJhbmRvbSA9PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICBNZXRlb3JYbG9nKFwiYSB3aWxkIHRhY28gaGFzIGFwcGVhcmVkIVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2V0dGFjb1RvZ2dsZSh0cnVlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBNZXRlb3JYbG9nKFwibm8gdGFjbyA6KFwiKTtcbiAgICAgICAgICAgICAgICBzZXR0YWNvVG9nZ2xlKGZhbHNlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQgPSB0cnVlO1xuICAgICAgICB9Ki9cbiAgICAgICAgaWYgKGV2ZW50Lm1lc3NhZ2UgPT09IFwiLm15cG9zXCIpIHtcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgUGx1Z2luQVBJLmFkZEV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICgwLCBwbGF5ZXJ1dGlsc18xLnVwZGF0ZVBsYXllclBvc2l0aW9uKSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBUT0RPOiB0cmltIHggYW5kIHkgdG8gbm90IGluY2x1ZGUgZGVjaW1hbHMgW2RvbmVdXG4gICAgICAgICAgICB2YXIgcGxheWVyeCA9IE1hdGgudHJ1bmMocGxheWVydXRpbHNfMS5nZXRwbGF5ZXJwb3MueCk7XG4gICAgICAgICAgICB2YXIgcGxheWVyeSA9IE1hdGgudHJ1bmMocGxheWVydXRpbHNfMS5nZXRwbGF5ZXJwb3MueSk7XG4gICAgICAgICAgICB2YXIgcGxheWVyeiA9IE1hdGgudHJ1bmMocGxheWVydXRpbHNfMS5nZXRwbGF5ZXJwb3Mueik7XG4gICAgICAgICAgICAoMCwgY2hhdHV0aWxzXzEuTWV0ZW9yWGxvZykoXCJ5b3VyIGxhc3QgcmVwb3J0ZWQgY29yZHMoSVJMKGprKSk6IFwiICsgXCIgeD0gXCIgKyBwbGF5ZXJ4ICsgXCIgeT0gXCIgKyBwbGF5ZXJ5ICsgXCIgej0gXCIgKyBwbGF5ZXJ6KTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQubWVzc2FnZSA9PT0gXCIudmNsaXBcIikge1xuICAgICAgICAgICAgKDAsIGNoYXR1dGlsc18xLk1ldGVvclhsb2cpKFwidXNhZ2U6IC52Y2xpcCBbdmFsdWUvYmxvY2tzXVwiKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQubWVzc2FnZS5zdGFydHNXaXRoKFwiLnZjbGlwIFwiKSkge1xuICAgICAgICAgICAgLy8gVE9ETyA6IG1ha2UgaXQgc28gdGhlIGNvbW1hbmQgb25seSBhY2NlcHRzIG51bWJlcnMgKCFpc05BTigpKSBbZG9uZV1cbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgdmFyIHRhcmdldExlbmd0aCA9IFwiLnZjbGlwXCIubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBldmVudC5tZXNzYWdlLnRvU3RyaW5nKCkudHJpbSgpO1xuICAgICAgICAgICAgaWYgKCAvL0lmXG4gICAgICAgICAgICBtZXNzYWdlLmxlbmd0aCA+IHRhcmdldExlbmd0aCAmJiAvL1RoZSBsZW5ndGggb2YgdGhlIG1lc3NhZ2UgaXMgbG9uZ2VyIHRoYW4gdGhlIHRhcmdldCBsZW5ndGhcbiAgICAgICAgICAgICAgICBtZXNzYWdlLnN1YnN0cmluZygwLCB0YXJnZXRMZW5ndGgpLnRyaW0oKS50b0xvd2VyQ2FzZSgpID09PSBcIi52Y2xpcFwiIC8vQW5kLCB0aGUgY29udGVudCBmcm9tIGNoYXJhY3RlciAwIChmaXJzdCkgdG8gdGhhdCBvZiB0aGUgbGVuZ3RoLCB0cmltbWVkIGFuZCBwdXQgdG8gbG93ZXJjYXNlIGlzIFwiLm1ha2VzY3JvbGxcIlxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZjbGlwdmFsdWUgPSBtZXNzYWdlLnN1YnN0cmluZyh0YXJnZXRMZW5ndGggKyAxKTtcbiAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICB2YXIgaXNwbGF5ZXJyaWRpbmcgPSBQbHVnaW5BUEkucGxheWVyLmlzUmlkaW5nKCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzcGxheWVycmlkaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4odmNsaXB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICgwLCBjaGF0dXRpbHNfMS5NZXRlb3JYZXJyb3IpKFwidGhlIGFtb3VudCBvZiBibG9ja3MgbmVlZHMgdG8gYmUgYSBOdW1iZXIhXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgICAgICBQbHVnaW5BUEkucGxheWVyLnNldFBvc2l0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBQbHVnaW5BUEkucGxheWVyLngsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogUGx1Z2luQVBJLnBsYXllci55ICs9IHZjbGlwdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgejogUGx1Z2luQVBJLnBsYXllci56XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICgwLCBjaGF0dXRpbHNfMS5NZXRlb3JYc3VjY2VzcykoXCJzdWNjZXNzZnVsbHkgdmNsaXBwZWQgXCIgKyB2Y2xpcHZhbHVlICsgXCIgYmxvY2tzIVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNwbGF5ZXJyaWRpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgKDAsIGNoYXR1dGlsc18xLk1ldGVvclhlcnJvcikoXCJ5b3UgbmVlZCB0byBnZXQgb2ZmIHRoaXMgbW9iL3ZlaGljbGUgdG8gdXNlIHRoaXMgY29tbWFuZCFcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudC5tZXNzYWdlLnRvTG93ZXJDYXNlKCkgPT09IFwiLnRwc1wiKSB7IC8vSWYgdGhleSB0eXBlZCAnLnRwcycsIG9yICcuVFBTJywgb3IuLi4gZXRjLlxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQgPSB0cnVlOyAvL1ByZXZlbnQgc2VuZGluZyB0aGUgY2hhdCBtZXNzYWdlLlxuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAoMCwgY2hhdHV0aWxzXzEuTWV0ZW9yWGxvZykoXCLCpzkgQ3VycmVudCBzZXJ2ZXIgdHBzIGlzIMKnNX5cIiArICgwLCB0cHNfMS5nZXR0cHMpKCkudG9GaXhlZCgxKSk7IC8vUHJpbnQgdGhlIFRQUyB0byBjaGF0LlxuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudC5tZXNzYWdlID09PSBcIi5jb3B5Y29yZHNcIikge1xuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICBQbHVnaW5BUEkuYWRkRXZlbnRMaXN0ZW5lcihcInVwZGF0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgKDAsIHBsYXllcnV0aWxzXzEudXBkYXRlUGxheWVyUG9zaXRpb24pKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBwbGF5ZXJ4ID0gTWF0aC50cnVuYyhwbGF5ZXJ1dGlsc18xLmdldHBsYXllcnBvcy54KTtcbiAgICAgICAgICAgIHZhciBwbGF5ZXJ5ID0gTWF0aC50cnVuYyhwbGF5ZXJ1dGlsc18xLmdldHBsYXllcnBvcy55KTtcbiAgICAgICAgICAgIHZhciBwbGF5ZXJ6ID0gTWF0aC50cnVuYyhwbGF5ZXJ1dGlsc18xLmdldHBsYXllcnBvcy56KTtcbiAgICAgICAgICAgICgwLCBjbGlwYm9hcmR1dGlsc18xLmNvcHkpKFwiIHg9IFwiICsgcGxheWVyeCArIFwiIHk9IFwiICsgcGxheWVyeSArIFwiIHo9IFwiICsgcGxheWVyeik7XG4gICAgICAgICAgICAoMCwgY2hhdHV0aWxzXzEuTWV0ZW9yWHN1Y2Nlc3MpKFwiY3VycmVudCBjb3JkcyBjb3BpZWQgdG8gY2xpcGJvYXJkIVwiKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5yZWdpc3RlcmNtZHMgPSByZWdpc3RlcmNtZHM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmV0dXJuZ3VpdmlzaWJsZSA9IGV4cG9ydHMucmVnaXN0ZXJndWkgPSB2b2lkIDA7XG52YXIgc3RlcF8xID0gcmVxdWlyZShcIi4uL21vZHVsZXMvcGxheWVyL3N0ZXBcIik7XG52YXIgc3BpZGVyXzEgPSByZXF1aXJlKFwiLi4vbW9kdWxlcy9wbGF5ZXIvc3BpZGVyXCIpO1xudmFyIG5vZmFsbF8xID0gcmVxdWlyZShcIi4uL21vZHVsZXMvcGxheWVyL25vZmFsbFwiKTtcbnZhciBmdWxsYnJpZ2h0XzEgPSByZXF1aXJlKFwiLi4vbW9kdWxlcy9yZW5kZXIvZnVsbGJyaWdodFwiKTtcbnZhciBqZXRwYWNrXzEgPSByZXF1aXJlKFwiLi4vbW9kdWxlcy9tb3ZlbWVudC9qZXRwYWNrXCIpO1xudmFyIG5vd2ViXzEgPSByZXF1aXJlKFwiLi4vbW9kdWxlcy9wbGF5ZXIvbm93ZWJcIik7XG52YXIgYXV0b2NsaWNrZXJfMSA9IHJlcXVpcmUoXCIuLi9tb2R1bGVzL3BsYXllci9hdXRvY2xpY2tlclwiKTtcbnZhciBzbGlwcGVyeV8xID0gcmVxdWlyZShcIi4uL21vZHVsZXMvbW92ZW1lbnQvc2xpcHBlcnlcIik7XG52YXIgYXV0b3NwcmludF8xID0gcmVxdWlyZShcIi4uL21vZHVsZXMvcGxheWVyL2F1dG9zcHJpbnRcIik7XG52YXIgYXV0b3d0YXBfMSA9IHJlcXVpcmUoXCIuLi9tb2R1bGVzL3BsYXllci9hdXRvd3RhcFwiKTtcbnZhciBzcGVlZF8xID0gcmVxdWlyZShcIi4uL21vZHVsZXMvbW92ZW1lbnQvc3BlZWRcIik7XG52YXIgZ3VpVmlzaWJsZSA9IGZhbHNlOyAvLyBWYXJpYWJsZSB0byBrZWVwIHRyYWNrIG9mIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBHVUlcbmZ1bmN0aW9uIHJlZ2lzdGVyZ3VpKCkge1xuICAgIGZ1bmN0aW9uIHRvZ2dsZUd1aSgpIHtcbiAgICAgICAgaWYgKGd1aVZpc2libGUpIHsgLy8gSWYgdGhlIEdVSSBpcyB2aXNpYmxlXG4gICAgICAgICAgICBoaWRlR3VpKCk7IC8vIEhpZGUgdGhlIEdVSVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2hvd0d1aSgpOyAvLyBPdGhlcndpc2UsIHNob3cgdGhlIEdVSVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNob3dHdWkoKSB7XG4gICAgICAgIGhpZGVHdWkoKTsgLy8gSWYgdGhlIEdVSSBpcyBhbHJlYWR5IG9wZW4sIHRoaXMgd2lsbCBoaWRlIGl0LlxuICAgICAgICB2YXIgZ3VpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImd1aVwiKTsgLy8gQ3JlYXRlIGEgbmV3IFwiZ3VpXCIgZWxlbWVudFxuICAgICAgICBpZiAoZG9jdW1lbnQucG9pbnRlckxvY2tFbGVtZW50ICE9IG51bGwpIHsgLy8gaWYgcG9pbnRlcmxvY2sgaXMgZW5hYmxlZFxuICAgICAgICAgICAgZG9jdW1lbnQuZXhpdFBvaW50ZXJMb2NrKCk7IC8vIGV4aXRzIHBvaW50ZXJsb2NrXG4gICAgICAgIH1cbiAgICAgICAgLy8gZ3VpJ3MgaHRtbCBjb2RlXG4gICAgICAgIGd1aS5pbm5lckhUTUwgPSBcIlxcbiAgICAgICAgPGd1aSBpZD1cXFwibXlHdWlcXFwiIHN0eWxlPVxcXCJ3aWR0aDogMTAwJTtoZWlnaHQ6IDEwMCU7cG9zaXRpb246IGZpeGVkO3RvcDogMHB4O2xlZnQ6IDBweDt6LWluZGV4OiAxMDtjb2xvcjogd2hpdGU7Zm9udC1mYW1pbHk6IE1pbmVjcmFmdGlhLCBzYW5zLXNlcmlmO292ZXJmbG93OiBoaWRkZW4gc2Nyb2xsO2JhY2tncm91bmQtY29sb3I6IHJnYmEoODAsIDgwLCA4MCwgMC40Mik7YmFja2dyb3VuZC1ibGVuZC1tb2RlOiBtdWx0aXBseTtiYWNrZ3JvdW5kLXNpemU6IDY0cHg7XFxcIj5cXG4gICAgICAgIDxoMSBzdHlsZT1cXFwidGV4dC1zaGFkb3c6IDBweCAwcHggNHB4O1xcXCI+TWV0ZW9yWCBHVUk8L2gxPlxcbiAgICAgICAgPHAgc3R5bGU9XFxcImZvbnQtc2l6ZTogMC44cmVtOyBjb2xvcjogeWVsbG93O1xcXCI+KHRvdGFsbHkgbm90IHN0b2xlbiBmcm9tIHBsdWdpbiBtYW5hZ2VyJ3MgZ3VpKTwvcD48cCBzdHlsZT1cXFwiZm9udC1zaXplOiAwLjhyZW07IGNvbG9yOiB5ZWxsb3c7XFxcIj5payB0aGUgZ3VpIGxvb2tzIGtpbmRhIGJhZCBmb3IgYSBoYWNrZWQgY2xpZW50IGJ1dCBpdHMgbWV0ZW9yWCBhbHBoYSBpZy4gaSBXSUxMIHVwZGF0ZSB0aGlzIGd1aSBpbiB0aGUgZnV0dXJlPC9wPjxwIHN0eWxlPVxcXCJmb250LXNpemU6IDAuOHJlbTsgY29sb3I6IG9yYW5nZXJlZDtcXFwiPmNsaWNrIG9uIFxcXCJBY3RpdmF0ZVxcXCIgdG8gYWN0aXZhdGUgYSBoYWNrIGFuZCBjbGljayBvbiBcXFwiRGVhY3RpdmF0ZVxcXCIgdG8gZGVhY3RpdmF0ZSBhIGhhY2s8L3A+XFxuICAgICAgICA8dGFibGUgc3R5bGU9XFxcInRhYmxlLWxheW91dDogZml4ZWQ7IHdpZHRoOiAxMDAlO1xcXCI+XFxuICAgICAgICAgICAgPHRib2R5Pjx0ciBzdHlsZT1cXFwiYmFja2dyb3VuZDogcmdiKDgwLCA4MCwgODApO1xcXCI+XFxuICAgICAgICAgICAgICAgIDx0aCBzdHlsZT1cXFwidGV4dC1hbGlnbjogY2VudGVyO1xcXCI+SGFja3M8L3RoPlxcbiAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICA8dGggc3R5bGU9XFxcInRleHQtYWxpZ246IGNlbnRlcjsgd2lkdGg6IDE1JTtcXFwiPlNldHRpbmdzPC90aD48dGggc3R5bGU9XFxcInRleHQtYWxpZ246IGNlbnRlcjsgd2lkdGg6IDE1JTtcXFwiIGlkPVxcXCJoYWNrc1xcXCI+QWN0aXZhdGUvRGVhY3RpdmF0ZTwvdGg+PC90cj5cXG4gICAgICAgICAgICA8dHIgc3R5bGU9XFxcImJveC1zaGFkb3c6IGdyZXkgMHB4IDJweCAwcHg7XFxcIj5cXG4gICAgICAgICAgICA8dGQgc3R5bGU9XFxcInVzZXItc2VsZWN0OiB0ZXh0O2JhY2tncm91bmQtY29sb3I6ICM5ZDAwZmYzMDtcXFwiPkpldHBhY2sgKGhvbGQgc3BhY2UgdG8gZmx5KSBcXHVEODNDXFx1REY5MlxcdUQ4M0RcXHVEQ0E4PC90ZD5cXG4gICAgICAgICAgICA8dGQgc3R5bGU9XFxcImJhY2tncm91bmQtY29sb3I6ICNlNTk0MDA7dGV4dC1hbGlnbjogY2VudGVyO1xcXCIgaWQ9XFxcImpldHBhY2tzZXR0aW5nc1xcXCI+U2V0dGluZ3M8L3RkPjx0ZCBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjogZ3JheTt0ZXh0LWFsaWduOiBjZW50ZXI7XFxcIiBpZD1cXFwiamV0cGFja1xcXCI+QWN0aXZhdGU8L3RkPlxcbiAgICAgICAgICAgIDwvdHI+XFxuICAgICAgICAgICAgPHRyIHN0eWxlPVxcXCJib3gtc2hhZG93OiBncmV5IDBweCAycHggMHB4O1xcXCI+XFxuICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT1cXFwidXNlci1zZWxlY3Q6IHRleHQ7YmFja2dyb3VuZC1jb2xvcjogIzlkMDBmZjMwO1xcXCI+U3RlcDwvdGQ+XFxuICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjogIzlkMDBmZjMwO3RleHQtYWxpZ246IGNlbnRlcjtcXFwiPjwvdGQ+PHRkIHN0eWxlPVxcXCJiYWNrZ3JvdW5kLWNvbG9yOiBncmF5OyB0ZXh0LWFsaWduOiBjZW50ZXI7XFxcIiBpZD1cXFwic3RlcFxcXCI+QWN0aXZhdGU8L3RkPlxcbiAgICAgICAgICAgIDwvdHI+XFxuICAgICAgICAgICAgPHRyIHN0eWxlPVxcXCJib3gtc2hhZG93OiBncmV5IDBweCAycHggMHB4O1xcXCI+XFxuICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT1cXFwidXNlci1zZWxlY3Q6IHRleHQ7YmFja2dyb3VuZC1jb2xvcjogIzlkMDBmZjMwO1xcXCI+U3BpZGVyPC90ZD5cXG4gICAgICAgICAgICAgICAgPHRkIHN0eWxlPVxcXCJiYWNrZ3JvdW5kLWNvbG9yOiAjOWQwMGZmMzA7dGV4dC1hbGlnbjogY2VudGVyO1xcXCI+PC90ZD48dGQgc3R5bGU9XFxcImJhY2tncm91bmQtY29sb3I6IGdyYXk7IHRleHQtYWxpZ246IGNlbnRlcjtcXFwiIGlkPVxcXCJzcGlkZXJcXFwiPkFjdGl2YXRlPC90ZD5cXG4gICAgICAgICAgICA8L3RyPlxcbiAgICAgICAgICAgIDx0ciBzdHlsZT1cXFwiYm94LXNoYWRvdzogZ3JleSAwcHggMnB4IDBweDtcXFwiPlxcbiAgICAgICAgICAgICAgICA8dGQgc3R5bGU9XFxcInVzZXItc2VsZWN0OiB0ZXh0O2JhY2tncm91bmQtY29sb3I6ICM5ZDAwZmYzMDtcXFwiPk5vZmFsbDwvdGQ+XFxuICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjogIzlkMDBmZjMwO3RleHQtYWxpZ246IGNlbnRlcjtcXFwiPjwvdGQ+PHRkIHN0eWxlPVxcXCJiYWNrZ3JvdW5kLWNvbG9yOiBncmF5OyB0ZXh0LWFsaWduOiBjZW50ZXI7XFxcIiBpZD1cXFwibm9mYWxsXFxcIj5BY3RpdmF0ZTwvdGQ+XFxuICAgICAgICAgICAgPC90cj5cXG4gICAgICAgICAgICA8dHIgc3R5bGU9XFxcImJveC1zaGFkb3c6IGdyZXkgMHB4IDJweCAwcHg7XFxcIj5cXG4gICAgICAgICAgICAgICAgPHRkIHN0eWxlPVxcXCJ1c2VyLXNlbGVjdDogdGV4dDtiYWNrZ3JvdW5kLWNvbG9yOiAjOWQwMGZmMzA7XFxcIj5GdWxsYnJpZ2h0PC90ZD5cXG4gICAgICAgICAgICAgICAgPHRkIHN0eWxlPVxcXCJiYWNrZ3JvdW5kLWNvbG9yOiAjOWQwMGZmMzA7dGV4dC1hbGlnbjogY2VudGVyO1xcXCI+PC90ZD48dGQgc3R5bGU9XFxcImJhY2tncm91bmQtY29sb3I6IGdyYXk7IHRleHQtYWxpZ246IGNlbnRlcjtcXFwiIGlkPVxcXCJmdWxsYnJpZ2h0XFxcIj5BY3RpdmF0ZTwvdGQ+XFxuICAgICAgICAgICAgPC90cj5cXG4gICAgICAgICAgICA8dHIgc3R5bGU9XFxcImJveC1zaGFkb3c6IGdyZXkgMHB4IDJweCAwcHg7XFxcIj4gXFxuICAgICAgICAgICAgPHRkIHN0eWxlPVxcXCJ1c2VyLXNlbGVjdDogdGV4dDtiYWNrZ3JvdW5kLWNvbG9yOiAjOWQwMGZmMzA7XFxcIj5Ob1dlYjwvdGQ+IFxcbiAgICAgICAgICAgIDx0ZCBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjogIzlkMDBmZjMwO3RleHQtYWxpZ246IGNlbnRlcjtcXFwiPjwvdGQ+PHRkIHN0eWxlPVxcXCJiYWNrZ3JvdW5kLWNvbG9yOiBncmF5O3RleHQtYWxpZ246IGNlbnRlcjtcXFwiIGlkPVxcXCJub3dlYlxcXCI+QWN0aXZhdGU8L3RkPiBcXG4gICAgICAgICAgICA8L3RyPiBcXG4gICAgICAgICAgICA8dHIgc3R5bGU9XFxcImJveC1zaGFkb3c6IGdyZXkgMHB4IDJweCAwcHg7XFxcIj4gXFxuICAgICAgICAgICAgPHRkIHN0eWxlPVxcXCJ1c2VyLXNlbGVjdDogdGV4dDtiYWNrZ3JvdW5kLWNvbG9yOiAjOWQwMGZmMzA7XFxcIj5BdXRvY2xpY2tlcjwvdGQ+IFxcbiAgICAgICAgICAgICBcXG4gICAgICAgICAgICA8dGQgc3R5bGU9XFxcImJhY2tncm91bmQtY29sb3I6ICNlNTk0MDA7dGV4dC1hbGlnbjogY2VudGVyO1xcXCIgaWQ9XFxcImF1dG9jbGlja2Vyc2V0dGluZ3NcXFwiPlNldHRpbmdzPC90ZD48dGQgc3R5bGU9XFxcImJhY2tncm91bmQtY29sb3I6IGdyYXk7dGV4dC1hbGlnbjogY2VudGVyO1xcXCIgaWQ9XFxcImF1dG9jbGlja2VyXFxcIj5BY3RpdmF0ZTwvdGQ+XFxuXFxuICAgICAgICAgICAgPC90cj4gXFxuICAgICAgICAgICAgPHRyIHN0eWxlPVxcXCJib3gtc2hhZG93OiBncmV5IDBweCAycHggMHB4O1xcXCI+IFxcbiAgICAgICAgICAgIDx0ZCBzdHlsZT1cXFwidXNlci1zZWxlY3Q6IHRleHQ7YmFja2dyb3VuZC1jb2xvcjogIzlkMDBmZjMwO1xcXCI+c2xpcHBlcnltb2Q8L3RkPiBcXG4gICAgICAgICAgICA8dGQgc3R5bGU9XFxcImJhY2tncm91bmQtY29sb3I6ICM5ZDAwZmYzMDt0ZXh0LWFsaWduOiBjZW50ZXI7XFxcIj48L3RkPjx0ZCBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjogZ3JheTt0ZXh0LWFsaWduOiBjZW50ZXI7XFxcIiBpZD1cXFwic2xpcHBlcnlcXFwiPkFjdGl2YXRlPC90ZD4gXFxuICAgICAgICAgICAgPC90cj4gXFxuICAgICAgICAgICAgPHRyIHN0eWxlPVxcXCJib3gtc2hhZG93OiBncmV5IDBweCAycHggMHB4O1xcXCI+IFxcbiAgICAgICAgICAgIDx0ZCBzdHlsZT1cXFwidXNlci1zZWxlY3Q6IHRleHQ7YmFja2dyb3VuZC1jb2xvcjogIzlkMDBmZjMwO1xcXCI+YXV0b3NwcmludDwvdGQ+IFxcbiAgICAgICAgICAgIDx0ZCBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjogIzlkMDBmZjMwO3RleHQtYWxpZ246IGNlbnRlcjtcXFwiPjwvdGQ+PHRkIHN0eWxlPVxcXCJiYWNrZ3JvdW5kLWNvbG9yOiBncmF5O3RleHQtYWxpZ246IGNlbnRlcjtcXFwiIGlkPVxcXCJhdXRvc3ByaW50XFxcIj5BY3RpdmF0ZTwvdGQ+IFxcbiAgICAgICAgICAgIDwvdHI+IFxcbiAgICAgICAgICAgIDx0ciBzdHlsZT1cXFwiYm94LXNoYWRvdzogZ3JleSAwcHggMnB4IDBweDtcXFwiPiBcXG4gICAgICAgICAgICA8dGQgc3R5bGU9XFxcInVzZXItc2VsZWN0OiB0ZXh0O2JhY2tncm91bmQtY29sb3I6ICM5ZDAwZmYzMDtcXFwiPmF1dG93dGFwPC90ZD4gXFxuICAgICAgICAgICAgPHRkIHN0eWxlPVxcXCJiYWNrZ3JvdW5kLWNvbG9yOiAjOWQwMGZmMzA7dGV4dC1hbGlnbjogY2VudGVyO1xcXCI+PC90ZD48dGQgc3R5bGU9XFxcImJhY2tncm91bmQtY29sb3I6IGdyYXk7dGV4dC1hbGlnbjogY2VudGVyO1xcXCIgaWQ9XFxcImF1dG93dGFwXFxcIj5BY3RpdmF0ZTwvdGQ+IFxcbiAgICAgICAgICAgIDwvdHI+IFxcbiAgICAgICAgICAgIDx0ciBzdHlsZT1cXFwiYm94LXNoYWRvdzogZ3JleSAwcHggMnB4IDBweDtcXFwiPiBcXG4gICAgICAgICAgICA8dGQgc3R5bGU9XFxcInVzZXItc2VsZWN0OiB0ZXh0O2JhY2tncm91bmQtY29sb3I6ICM5ZDAwZmYzMDtcXFwiPnNwZWVkPC90ZD4gXFxuICAgICAgICAgICAgIFxcbiAgICAgICAgICAgIDx0ZCBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjogI2U1OTQwMDt0ZXh0LWFsaWduOiBjZW50ZXI7XFxcIiBpZD1cXFwic3BlZWRzZXR0aW5nc1xcXCI+U2V0dGluZ3M8L3RkPjx0ZCBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjogZ3JheTt0ZXh0LWFsaWduOiBjZW50ZXI7XFxcIiBpZD1cXFwic3BlZWRcXFwiPkFjdGl2YXRlPC90ZD5cXG5cXG4gICAgICAgICAgICA8L3RyPiBcXG4gICAgICAgIDwvdGJvZHk+PC90YWJsZT5cXG4gICAgICAgIDxhIHN0eWxlPVxcXCJiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsgdGV4dC1hbGlnbjogY2VudGVyOyBjb2xvcjogeWVsbG93OyBjdXJzb3I6IHBvaW50ZXI7IGZvbnQtZmFtaWx5OiBNaW5lY3JhZnRpYSwgc2Fucy1zZXJpZjsgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IGJvcmRlcjogMHB4OyBtYXJnaW4tcmlnaHQ6IDFyZW07IGZvbnQtc2l6ZTogMXJlbTtcXFwiIGhyZWY9XFxcImh0dHBzOi8vZ2l0aHViLmNvbS9yYWRtYW5wbGF5cy9NZXRlb3JYLXRzL2lzc3Vlcy9uZXdcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5zdWdnZXN0IGEgbmV3IGZlYXR1cmUvaGFjazwvYT5cXG4gICAgICAgIDxhIHN0eWxlPVxcXCJiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDt0ZXh0LWFsaWduOiBjZW50ZXI7Y29sb3I6IG9yYW5nZTtjdXJzb3I6IHBvaW50ZXI7Zm9udC1mYW1pbHk6IE1pbmVjcmFmdGlhLCBzYW5zLXNlcmlmO3RleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO2JvcmRlcjogMHB4O2ZvbnQtc2l6ZTogMXJlbTtcXFwiIGhyZWY9XFxcImh0dHBzOi8vZ2l0aHViLmNvbS9vcmdzL0VhZ2xlclJlYm9ybi9kaXNjdXNzaW9ucy85XFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+dmVyc2lvbiBSb2FkbWFwPC9hPlxcbiAgICAgICAgXFxuICAgICAgICAgIDwvZ3VpPlxcbiAgICAgICAgXCI7IC8vIFNldCB0aGUgSFRNTCBjb250ZW50IG9mIHRoZSBcImd1aVwiIGVsZW1lbnRcbiAgICAgICAgZ3VpLmlkID0gXCJteUd1aVwiOyAvLyBTZXQgdGhlIElEIG9mIHRoZSBcImd1aVwiIGVsZW1lbnQgdG8gXCJteUd1aVwiXG4gICAgICAgIC8vIGNzcyBzdHlsZXMgb2YgdGhlIGd1aVxuICAgICAgICBndWkuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICAgIGd1aS5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG4gICAgICAgIGd1aS5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gICAgICAgIGd1aS5zdHlsZS50b3AgPSAnMHB4JztcbiAgICAgICAgZ3VpLnN0eWxlLmxlZnQgPSAnMHB4JztcbiAgICAgICAgZ3VpLnN0eWxlLnpJbmRleCA9ICcxMDAnO1xuICAgICAgICBndWkuc3R5bGUuY29sb3IgPSAnd2hpdGUnO1xuICAgICAgICBndWkuc3R5bGUuZm9udEZhbWlseSA9ICdNaW5lY3JhZnRpYSwgc2Fucy1zZXJpZic7XG4gICAgICAgIGd1aS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4gc2Nyb2xsJztcbiAgICAgICAgZ3VpLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdyZ2JhKDgwLCA4MCwgODAsIDAuNDIpJztcbiAgICAgICAgZ3VpLnN0eWxlLmJhY2tncm91bmRCbGVuZE1vZGUgPSAnbXVsdGlwbHknO1xuICAgICAgICBndWkuc3R5bGUuYmFja2dyb3VuZFNpemUgPSAnNjRweCc7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZ3VpKTsgLy8gQXBwZW5kIHRoZSBcImd1aVwiIGVsZW1lbnQgdG8gdGhlIGJvZHkgb2YgdGhlIGRvY3VtZW50XG4gICAgICAgIGd1aVZpc2libGUgPSB0cnVlOyAvLyBTZXQgdGhlIEdVSSB2aXNpYmlsaXR5IHRvIHRydWVcbiAgICAgICAgLy8gYXNzaWduIHRoZSBhY3RpdmF0ZS9kZWFjdGl2YXRlIGJ1dHRvbnMgdG8gdmFyaWFibGVzXG4gICAgICAgIHZhciBqZXRwYWNrRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiamV0cGFja1wiKTtcbiAgICAgICAgdmFyIGpldHBhY2tzZXR0aW5ncyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiamV0cGFja3NldHRpbmdzXCIpO1xuICAgICAgICB2YXIgc3RlcEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0ZXBcIik7XG4gICAgICAgIHZhciBzcGlkZXJFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlkZXJcIik7XG4gICAgICAgIHZhciBub2ZhbGxFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJub2ZhbGxcIik7XG4gICAgICAgIHZhciBmdWxsYnJpZ2h0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZnVsbGJyaWdodFwiKTtcbiAgICAgICAgdmFyIG5vd2ViRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibm93ZWJcIik7XG4gICAgICAgIHZhciBhdXRvY2xpY2tlcnNldHRpbmdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhdXRvY2xpY2tlcnNldHRpbmdzXCIpO1xuICAgICAgICB2YXIgYXV0b2NsaWNrZXJFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhdXRvY2xpY2tlclwiKTtcbiAgICAgICAgdmFyIHNsaXBwZXJ5RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2xpcHBlcnlcIik7XG4gICAgICAgIHZhciBhdXRvc3ByaW50RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXV0b3NwcmludFwiKTtcbiAgICAgICAgdmFyIGF1dG93dGFwRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXV0b3d0YXBcIik7XG4gICAgICAgIHZhciBzcGVlZEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNwZWVkXCIpO1xuICAgICAgICB2YXIgc3BlZWRzZXR0aW5ncyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3BlZWRzZXR0aW5nc1wiKTtcbiAgICAgICAgLy8gaWYgbW91c2UgY3Vyc29yIGlzIGhvdmVyaW5nIG92ZXIgdGhlIGJ1dHRvbnMgc2V0IHRoZSBjdXJzb3IgdG8gcG9pbnRlclxuICAgICAgICBqZXRwYWNrRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGpldHBhY2tFbGVtZW50LnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xuICAgICAgICB9KTtcbiAgICAgICAgamV0cGFja3NldHRpbmdzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYXV0b2NsaWNrZXJzZXR0aW5ncy5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgfSk7XG4gICAgICAgIHN0ZXBFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3RlcEVsZW1lbnQuc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XG4gICAgICAgIH0pO1xuICAgICAgICBzcGlkZXJFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3BpZGVyRWxlbWVudC5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgfSk7XG4gICAgICAgIG5vZmFsbEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBub2ZhbGxFbGVtZW50LnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xuICAgICAgICB9KTtcbiAgICAgICAgZnVsbGJyaWdodEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmdWxsYnJpZ2h0RWxlbWVudC5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgfSk7XG4gICAgICAgIG5vd2ViRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG5vd2ViRWxlbWVudC5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgfSk7XG4gICAgICAgIGF1dG9jbGlja2Vyc2V0dGluZ3MuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBhdXRvY2xpY2tlcnNldHRpbmdzLnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xuICAgICAgICB9KTtcbiAgICAgICAgYXV0b2NsaWNrZXJFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYXV0b2NsaWNrZXJFbGVtZW50LnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xuICAgICAgICB9KTtcbiAgICAgICAgc2xpcHBlcnlFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2xpcHBlcnlFbGVtZW50LnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xuICAgICAgICB9KTtcbiAgICAgICAgYXV0b3NwcmludEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBhdXRvc3ByaW50RWxlbWVudC5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgfSk7XG4gICAgICAgIGF1dG93dGFwRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGF1dG93dGFwRWxlbWVudC5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgfSk7XG4gICAgICAgIHNwZWVkRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNwZWVkRWxlbWVudC5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgfSk7XG4gICAgICAgIHNwZWVkc2V0dGluZ3MuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzcGVlZHNldHRpbmdzLnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gaWYgdGhlIGd1aSBvcGVucyBhbmQgdGhlIHZhcmlhYmxlIGZvciBtb2R1bGVzIGFyZSBmYWxzZSBtYWtlIHRoZSBidXR0b25zIHNheTogXCJBY3RpdmF0ZVwiXG4gICAgICAgIGlmICgoMCwgamV0cGFja18xLnJldHVybmpldHBhY2t0b2dnbGUpKCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBqZXRwYWNrRWxlbWVudC5pbm5lclRleHQgPSBcIkFjdGl2YXRlXCI7XG4gICAgICAgICAgICBqZXRwYWNrRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImdyZWVuXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgwLCBzdGVwXzEucmV0dXJuU3RlcFRvZ2dsZSkoKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHN0ZXBFbGVtZW50LmlubmVyVGV4dCA9IFwiQWN0aXZhdGVcIjtcbiAgICAgICAgICAgIHN0ZXBFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiZ3JlZW5cIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIHNwaWRlcl8xLnJldHVyblNwaWRlclRvZ2dsZSkoKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHNwaWRlckVsZW1lbnQuaW5uZXJUZXh0ID0gXCJBY3RpdmF0ZVwiO1xuICAgICAgICAgICAgc3BpZGVyRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImdyZWVuXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgwLCBub2ZhbGxfMS5yZXR1cm5Ob2ZhbGxUb2dnbGUpKCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBub2ZhbGxFbGVtZW50LmlubmVyVGV4dCA9IFwiQWN0aXZhdGVcIjtcbiAgICAgICAgICAgIG5vZmFsbEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmVlblwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgZnVsbGJyaWdodF8xLnJldHVybkZ1bGxicmlnaHRUb2dnbGUpKCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBmdWxsYnJpZ2h0RWxlbWVudC5pbm5lclRleHQgPSBcIkFjdGl2YXRlXCI7XG4gICAgICAgICAgICBmdWxsYnJpZ2h0RWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImdyZWVuXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgwLCBub3dlYl8xLnJldHVybm5vd2ViVG9nZ2xlKSgpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgbm93ZWJFbGVtZW50LmlubmVyVGV4dCA9IFwiQWN0aXZhdGVcIjtcbiAgICAgICAgICAgIG5vd2ViRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImdyZWVuXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgwLCBhdXRvY2xpY2tlcl8xLnJldHVybmF1dG9jbGlja2VydG9nZ2xlKSgpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYXV0b2NsaWNrZXJFbGVtZW50LmlubmVyVGV4dCA9IFwiQWN0aXZhdGVcIjtcbiAgICAgICAgICAgIGF1dG9jbGlja2VyRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImdyZWVuXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgwLCBzbGlwcGVyeV8xLnJldHVybnNsaXBwZXJ5dG9nZ2xlKSgpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgc2xpcHBlcnlFbGVtZW50LmlubmVyVGV4dCA9IFwiQWN0aXZhdGVcIjtcbiAgICAgICAgICAgIHNsaXBwZXJ5RWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImdyZWVuXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgwLCBhdXRvc3ByaW50XzEucmV0dXJuYXV0b3NwcmludHRvZ2dsZSkoKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGF1dG9zcHJpbnRFbGVtZW50LmlubmVyVGV4dCA9IFwiQWN0aXZhdGVcIjtcbiAgICAgICAgICAgIGF1dG9zcHJpbnRFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiZ3JlZW5cIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIGF1dG93dGFwXzEucmV0dXJuYXV0b3d0YXB0b2dnbGUpKCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBhdXRvd3RhcEVsZW1lbnQuaW5uZXJUZXh0ID0gXCJBY3RpdmF0ZVwiO1xuICAgICAgICAgICAgYXV0b3d0YXBFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiZ3JlZW5cIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIHNwZWVkXzEucmV0dXJuc3BlZWR0b2dnbGUpKCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBzcGVlZEVsZW1lbnQuaW5uZXJUZXh0ID0gXCJBY3RpdmF0ZVwiO1xuICAgICAgICAgICAgc3BlZWRFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiZ3JlZW5cIjtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiB0aGUgZ3VpIG9wZW5zIGFuZCB0aGUgdmFyaWFibGUgZm9yIG1vZHVsZXMgYXJlIHRydWUgbWFrZSB0aGUgYnV0dG9ucyBzYXk6IFwiRGVhY3RpdmF0ZVwiXG4gICAgICAgIGlmICgoMCwgamV0cGFja18xLnJldHVybmpldHBhY2t0b2dnbGUpKCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGpldHBhY2tFbGVtZW50LmlubmVyVGV4dCA9IFwiRGVhY3RpdmF0ZVwiO1xuICAgICAgICAgICAgamV0cGFja0VsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIHN0ZXBfMS5yZXR1cm5TdGVwVG9nZ2xlKSgpID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzdGVwRWxlbWVudC5pbm5lclRleHQgPSBcIkRlYWN0aXZhdGVcIjtcbiAgICAgICAgICAgIHN0ZXBFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgwLCBzcGlkZXJfMS5yZXR1cm5TcGlkZXJUb2dnbGUpKCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHNwaWRlckVsZW1lbnQuaW5uZXJUZXh0ID0gXCJEZWFjdGl2YXRlXCI7XG4gICAgICAgICAgICBzcGlkZXJFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgwLCBub2ZhbGxfMS5yZXR1cm5Ob2ZhbGxUb2dnbGUpKCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIG5vZmFsbEVsZW1lbnQuaW5uZXJUZXh0ID0gXCJEZWFjdGl2YXRlXCI7XG4gICAgICAgICAgICBub2ZhbGxFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgwLCBmdWxsYnJpZ2h0XzEucmV0dXJuRnVsbGJyaWdodFRvZ2dsZSkoKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgZnVsbGJyaWdodEVsZW1lbnQuaW5uZXJUZXh0ID0gXCJEZWFjdGl2YXRlXCI7XG4gICAgICAgICAgICBmdWxsYnJpZ2h0RWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgbm93ZWJfMS5yZXR1cm5ub3dlYlRvZ2dsZSkoKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgbm93ZWJFbGVtZW50LmlubmVyVGV4dCA9IFwiRGVhY3RpdmF0ZVwiO1xuICAgICAgICAgICAgbm93ZWJFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgwLCBhdXRvY2xpY2tlcl8xLnJldHVybmF1dG9jbGlja2VydG9nZ2xlKSgpID09PSB0cnVlKSB7XG4gICAgICAgICAgICBhdXRvY2xpY2tlckVsZW1lbnQuaW5uZXJUZXh0ID0gXCJEZWFjdGl2YXRlXCI7XG4gICAgICAgICAgICBhdXRvY2xpY2tlckVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIHNsaXBwZXJ5XzEucmV0dXJuc2xpcHBlcnl0b2dnbGUpKCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHNsaXBwZXJ5RWxlbWVudC5pbm5lclRleHQgPSBcIkRlYWN0aXZhdGVcIjtcbiAgICAgICAgICAgIHNsaXBwZXJ5RWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgYXV0b3NwcmludF8xLnJldHVybmF1dG9zcHJpbnR0b2dnbGUpKCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGF1dG9zcHJpbnRFbGVtZW50LmlubmVyVGV4dCA9IFwiRGVhY3RpdmF0ZVwiO1xuICAgICAgICAgICAgYXV0b3NwcmludEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIGF1dG93dGFwXzEucmV0dXJuYXV0b3d0YXB0b2dnbGUpKCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGF1dG93dGFwRWxlbWVudC5pbm5lclRleHQgPSBcIkRlYWN0aXZhdGVcIjtcbiAgICAgICAgICAgIGF1dG93dGFwRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgc3BlZWRfMS5yZXR1cm5zcGVlZHRvZ2dsZSkoKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgc3BlZWRFbGVtZW50LmlubmVyVGV4dCA9IFwiRGVhY3RpdmF0ZVwiO1xuICAgICAgICAgICAgc3BlZWRFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgdGhlIHVzZXIgY2xpY2tzIG9uIHRoZSBidXR0b25zIGFuZCB0aGUgdmFyaWFibGUgZm9yIG1vZHVsZXMgYXJlIGZhbHNlIG1ha2UgdGhlIGJ1dHRvbnMgc2F5IFwiRGVhY3RpdmF0ZVwiIGFuZCBpZiBpdHMgdHJ1ZSBtYWtlIHRoZSBidXR0b25zIHNheSBcImFjdGl2YXRlXCIgd2hlbmV2ZXIgdGhlIHVzZXIgY2xpY2tzIG9uIHRoZSBidXR0b24gXG4gICAgICAgIHN0ZXBFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoKDAsIHN0ZXBfMS5yZXR1cm5TdGVwVG9nZ2xlKSgpICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgc3RlcEVsZW1lbnQuaW5uZXJUZXh0ID0gXCJEZWFjdGl2YXRlXCI7XG4gICAgICAgICAgICAgICAgc3RlcEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjtcbiAgICAgICAgICAgICAgICAoMCwgc3RlcF8xLnNldFN0ZXBUb2dnbGUpKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RlcEVsZW1lbnQuaW5uZXJUZXh0ID0gXCJBY3RpdmF0ZVwiO1xuICAgICAgICAgICAgICAgIHN0ZXBFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiZ3JlZW5cIjtcbiAgICAgICAgICAgICAgICAoMCwgc3RlcF8xLnNldFN0ZXBUb2dnbGUpKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHNwaWRlckVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICgoMCwgc3BpZGVyXzEucmV0dXJuU3BpZGVyVG9nZ2xlKSgpICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgc3BpZGVyRWxlbWVudC5pbm5lclRleHQgPSBcIkRlYWN0aXZhdGVcIjtcbiAgICAgICAgICAgICAgICBzcGlkZXJFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XG4gICAgICAgICAgICAgICAgKDAsIHNwaWRlcl8xLnNldFNwaWRlclRvZ2dsZSkodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzcGlkZXJFbGVtZW50LmlubmVyVGV4dCA9IFwiQWN0aXZhdGVcIjtcbiAgICAgICAgICAgICAgICBzcGlkZXJFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiZ3JlZW5cIjtcbiAgICAgICAgICAgICAgICAoMCwgc3BpZGVyXzEuc2V0U3BpZGVyVG9nZ2xlKShmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBub2ZhbGxFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoKDAsIG5vZmFsbF8xLnJldHVybk5vZmFsbFRvZ2dsZSkoKSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIG5vZmFsbEVsZW1lbnQuaW5uZXJUZXh0ID0gXCJEZWFjdGl2YXRlXCI7XG4gICAgICAgICAgICAgICAgbm9mYWxsRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICAgICAgICAgICAgICAgICgwLCBub2ZhbGxfMS5zZXROb2ZhbGxUb2dnbGUpKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbm9mYWxsRWxlbWVudC5pbm5lclRleHQgPSBcIkFjdGl2YXRlXCI7XG4gICAgICAgICAgICAgICAgbm9mYWxsRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImdyZWVuXCI7XG4gICAgICAgICAgICAgICAgKDAsIG5vZmFsbF8xLnNldE5vZmFsbFRvZ2dsZSkoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZnVsbGJyaWdodEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICgoMCwgZnVsbGJyaWdodF8xLnJldHVybkZ1bGxicmlnaHRUb2dnbGUpKCkgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBmdWxsYnJpZ2h0RWxlbWVudC5pbm5lclRleHQgPSBcIkRlYWN0aXZhdGVcIjtcbiAgICAgICAgICAgICAgICBmdWxsYnJpZ2h0RWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICAgICAgICAgICAgICAgICgwLCBmdWxsYnJpZ2h0XzEuc2V0RnVsbGJyaWdodFRvZ2dsZSkodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmdWxsYnJpZ2h0RWxlbWVudC5pbm5lclRleHQgPSBcIkFjdGl2YXRlXCI7XG4gICAgICAgICAgICAgICAgZnVsbGJyaWdodEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmVlblwiO1xuICAgICAgICAgICAgICAgICgwLCBmdWxsYnJpZ2h0XzEuc2V0RnVsbGJyaWdodFRvZ2dsZSkoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgamV0cGFja0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICgoMCwgamV0cGFja18xLnJldHVybmpldHBhY2t0b2dnbGUpKCkgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBqZXRwYWNrRWxlbWVudC5pbm5lclRleHQgPSBcIkRlYWN0aXZhdGVcIjtcbiAgICAgICAgICAgICAgICBqZXRwYWNrRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICAgICAgICAgICAgICAgICgwLCBqZXRwYWNrXzEuc2V0amV0cGFja3RvZ2dsZSkodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBqZXRwYWNrRWxlbWVudC5pbm5lclRleHQgPSBcIkFjdGl2YXRlXCI7XG4gICAgICAgICAgICAgICAgamV0cGFja0VsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmVlblwiO1xuICAgICAgICAgICAgICAgICgwLCBqZXRwYWNrXzEuc2V0amV0cGFja3RvZ2dsZSkoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgamV0cGFja3NldHRpbmdzLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvL3Byb21wdCB1c2VyIHdpdGggYSBib3ggdG8gZW50ZXIgamV0cGFjayBmb3JjZSBcbiAgICAgICAgICAgIHZhciBqZXRwYWNrZm9yY2UgPSBwcm9tcHQoXCJjaG9vc2UgdGhlIGZvcmNlIGZvciBqZXRwYWNrLihtb3JlIHRoYW4gMC4yIG1pZ2h0IHRyaWdnZXIgYW50aWNoZWF0cylcXG5kZWZhdWx0IDogMC4yIFxcbmN1cnJlbnQgOiBcIiArICgwLCBqZXRwYWNrXzEucmV0dXJuamV0cGFja2ZvcmNlKSgpKTtcbiAgICAgICAgICAgIC8vdHVybnMgdGhlIHByb21wdCBhbnN3ZXIgaW50byBhIG51bWJlclxuICAgICAgICAgICAgdmFyIG51bWpldHBhY2tmb3JjZSA9IE51bWJlcihqZXRwYWNrZm9yY2UpO1xuICAgICAgICAgICAgLy8gaWYgaXQgd2FzbnQgYSBudW1iZXIgdGVsbCB0aGUgdXNlciB0byBlbnRlciB0aGUgamV0cGFjayBmb3JjZSBhZ2FpblxuICAgICAgICAgICAgaWYgKGlzTmFOKG51bWpldHBhY2tmb3JjZSkpIHtcbiAgICAgICAgICAgICAgICBhbGVydChcImpldHBhY2tmb3JjZSBpcyBOQU4gKG5vdCBhIG51bWJlcikgc2V0dGluZyBqZXRwYWNrZm9yY2UgdG8gZGVmYXVsdFwiKTtcbiAgICAgICAgICAgICAgICAoMCwgamV0cGFja18xLnNldGpldHBhY2tmb3JjZSkoMC4yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIHRoZSB1c2VyIGNhbmNlbGVkIHRoZSBwcm9tcHQgbWFrZSB0aGUgdXNlciBQQVkgRk9SIFRIRUlSIEFDVElPTlMoaSBtZWFuIHNldCB0aGUgamV0cGFjayBmb3JjZSB0byBkZWZhdWx0IDo+IClcbiAgICAgICAgICAgIGlmIChqZXRwYWNrZm9yY2UgPT0gbnVsbCB8fCBqZXRwYWNrZm9yY2UgPT0gXCJcIikge1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiVXNlciBjYW5jZWxsZWQgdGhlIHByb21wdC5cXG4gc2V0dGluZyBqZXRwYWNrZm9yY2UgdG8gZGVmYXVsdCAoMC4yKVwiKTtcbiAgICAgICAgICAgICAgICAoMCwgamV0cGFja18xLnNldGpldHBhY2tmb3JjZSkoMC4yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgeyAvLyBpZiB0aGUgdXNlciBkaWRudCBjYW5jZWwgdGhlIHByb21wdCBsaWtlIGEgZ29vZCBib3kgdGVsbCB0aGVtIHRoYXQgdGhlIGpldHBhY2sgZm9yY2UgaGFzIGJlZW4gc2V0IHRvIHdoYXQgdGhleSBjaG9zZVxuICAgICAgICAgICAgICAgIGFsZXJ0KFwiamV0cGFja2ZvcmNlIHNldCB0byBcIiArIGpldHBhY2tmb3JjZSk7XG4gICAgICAgICAgICAgICAgKDAsIGpldHBhY2tfMS5zZXRqZXRwYWNrZm9yY2UpKG51bWpldHBhY2tmb3JjZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBub3dlYkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIFRvZ2dsZSB0aGUgamV0cGFja0d1aUFjdGl2ZSBzdGF0ZVxuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSB0ZXh0IGFuZCBiYWNrZ3JvdW5kIGNvbG9yIGJhc2VkIG9uIHRoZSBzdGF0ZVxuICAgICAgICAgICAgaWYgKCgwLCBub3dlYl8xLnJldHVybm5vd2ViVG9nZ2xlKSgpICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgbm93ZWJFbGVtZW50LmlubmVyVGV4dCA9IFwiRGVhY3RpdmF0ZVwiO1xuICAgICAgICAgICAgICAgIG5vd2ViRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICAgICAgICAgICAgICAgICgwLCBub3dlYl8xLnNldG5vd2ViVG9nZ2xlKSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5vd2ViRWxlbWVudC5pbm5lclRleHQgPSBcIkFjdGl2YXRlXCI7XG4gICAgICAgICAgICAgICAgbm93ZWJFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiZ3JlZW5cIjtcbiAgICAgICAgICAgICAgICAoMCwgbm93ZWJfMS5zZXRub3dlYlRvZ2dsZSkoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYXV0b2NsaWNrZXJFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoKDAsIGF1dG9jbGlja2VyXzEucmV0dXJuYXV0b2NsaWNrZXJ0b2dnbGUpKCkgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBhdXRvY2xpY2tlckVsZW1lbnQuaW5uZXJUZXh0ID0gXCJEZWFjdGl2YXRlXCI7XG4gICAgICAgICAgICAgICAgYXV0b2NsaWNrZXJFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XG4gICAgICAgICAgICAgICAgKDAsIGF1dG9jbGlja2VyXzEuc2V0YXV0b2NsaWNrZXJ0b2dnbGUpKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYXV0b2NsaWNrZXJFbGVtZW50LmlubmVyVGV4dCA9IFwiQWN0aXZhdGVcIjtcbiAgICAgICAgICAgICAgICBhdXRvY2xpY2tlckVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmVlblwiO1xuICAgICAgICAgICAgICAgICgwLCBhdXRvY2xpY2tlcl8xLnNldGF1dG9jbGlja2VydG9nZ2xlKShmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBhdXRvY2xpY2tlcnNldHRpbmdzLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY2xpY2tlcmNhbmNlbGVkID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgY2xpY2tlcm1vZGUgPSBwcm9tcHQoXCJjaG9vc2UgbW9kZSAoYnkgZW50ZXJpbmcgYSBudW1iZXJpbiB0aGUgYm94IGJlbG93KTogXFxuIFsxXSByaWdodGNsaWNrIFxcbiBbMl0gbGVmdGNsaWNrXCIsIFwiMlwiKTtcbiAgICAgICAgICAgIHZhciBudW1tb2RlID0gTnVtYmVyKGNsaWNrZXJtb2RlKTtcbiAgICAgICAgICAgIGlmIChjbGlja2VybW9kZSA9PSBudWxsIHx8IGNsaWNrZXJtb2RlID09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlVzZXIgY2FuY2VsbGVkIHRoZSBwcm9tcHQuXFxuIG1vZGUgc2V0IHRvIGRlZmF1bHQobGVmdGNsaWNrKVwiKTtcbiAgICAgICAgICAgICAgICAoMCwgYXV0b2NsaWNrZXJfMS5zZXRhdXRvY2xpY2tlcm1vZGUpKFwibGVmdGNsaWNrXCIpO1xuICAgICAgICAgICAgICAgIGNsaWNrZXJjYW5jZWxlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjbGlja2VybW9kZSA9PT0gXCIxXCIpIHtcbiAgICAgICAgICAgICAgICAoMCwgYXV0b2NsaWNrZXJfMS5zZXRhdXRvY2xpY2tlcm1vZGUpKFwicmlnaHRjbGlja1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNsaWNrZXJtb2RlID09PSBcIjJcIikge1xuICAgICAgICAgICAgICAgICgwLCBhdXRvY2xpY2tlcl8xLnNldGF1dG9jbGlja2VybW9kZSkoXCJsZWZ0Y2xpY2tcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc05hTihudW1tb2RlKSB8fCBudW1tb2RlICE9IDEgfHwgMikge1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiaW52YWxpZCBpbnB1dChcIiArIGNsaWNrZXJtb2RlICsgXCIpIHBsZWFzZSBwcmVzcyB0aGUgc2V0dGluZ3MgYnV0dG9uIGFnYWluIFxcbiBhbmQgY2hvb3NlIHRoZSBjbGlja2luZyBtb2RlIHRoYXQgeW91IHdhbnRcIik7XG4gICAgICAgICAgICAgICAgY2xpY2tlcmNhbmNlbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY2xpY2tlcmNhbmNlbGVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlbGF5ID0gcHJvbXB0KFwiZW50ZXIgZGVsYXkgYmV0d2VlbiBjbGlja3MgKHBlciB0aWNrICgyMCB0aWNrcyA9IDEgc2Vjb25kKSlcXG4gKGV4YW1wbGUgOiAxMCkgXFxuIChleGFtcGxlcyBub3QgdG8gZW50ZXI6IDY5LjQyMCkgOlwiLCBcIjIwXCIpO1xuICAgICAgICAgICAgICAgIHZhciBudW1kZWxheSA9IE51bWJlcihkZWxheSk7XG4gICAgICAgICAgICAgICAgaWYgKGRlbGF5ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJVc2VyIGNhbmNlbGxlZCB0aGUgZGVsYXkgcHJvbXB0LlxcbiBkZWxheSBzZXQgdG8gZGVmYXVsdCAoMjAgdGlja3MoMSBjcHMpKVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2xpY2tlcm1vZGUgPT09IFwiMVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICgwLCBhdXRvY2xpY2tlcl8xLnNldHJpZ2h0Y2xpY2tkZWxheSkobnVtZGVsYXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjbGlja2VybW9kZSA9PT0gXCIyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgKDAsIGF1dG9jbGlja2VyXzEuc2V0bGVmdGNsaWNrZGVsYXkpKG51bWRlbGF5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNOYU4obnVtZGVsYXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwidGhlIGRlbGF5IHRoYXQgeW91IGNob3NlKFwiICsgZGVsYXkgKyBcIikgaXMgTk9UIEEgTlVNQkVSLFxcbnBsZWFzZSBwcmVzcyB0aGUgc2V0dGluZ3MgYnV0dG9uIGFnYWluIGFuZCBcXG4gY2hvb3NlIHRoZSBkZWxheSB0aGF0IHlvdSB3YW50XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHNsaXBwZXJ5RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCgwLCBzbGlwcGVyeV8xLnJldHVybnNsaXBwZXJ5dG9nZ2xlKSgpICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgc2xpcHBlcnlFbGVtZW50LmlubmVyVGV4dCA9IFwiRGVhY3RpdmF0ZVwiO1xuICAgICAgICAgICAgICAgIHNsaXBwZXJ5RWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICAgICAgICAgICAgICAgICgwLCBzbGlwcGVyeV8xLnNldHNsaXBwZXJ5VG9nZ2xlKSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNsaXBwZXJ5RWxlbWVudC5pbm5lclRleHQgPSBcIkFjdGl2YXRlXCI7XG4gICAgICAgICAgICAgICAgc2xpcHBlcnlFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiZ3JlZW5cIjtcbiAgICAgICAgICAgICAgICAoMCwgc2xpcHBlcnlfMS5zZXRzbGlwcGVyeVRvZ2dsZSkoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYXV0b3NwcmludEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICgoMCwgYXV0b3NwcmludF8xLnJldHVybmF1dG9zcHJpbnR0b2dnbGUpKCkgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoKDAsIGF1dG93dGFwXzEucmV0dXJuYXV0b3d0YXB0b2dnbGUpKCkgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBhdXRvd3RhcEVsZW1lbnQuaW5uZXJUZXh0ID0gXCJBY3RpdmF0ZVwiO1xuICAgICAgICAgICAgICAgICAgICBhdXRvd3RhcEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmVlblwiO1xuICAgICAgICAgICAgICAgICAgICAoMCwgYXV0b3d0YXBfMS5zZXRhdXRvd3RhcHRvZ2dsZSkoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhdXRvc3ByaW50RWxlbWVudC5pbm5lclRleHQgPSBcIkRlYWN0aXZhdGVcIjtcbiAgICAgICAgICAgICAgICBhdXRvc3ByaW50RWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICAgICAgICAgICAgICAgICgwLCBhdXRvc3ByaW50XzEuc2V0YXV0b3NwcmludHRvZ2dsZSkodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhdXRvc3ByaW50RWxlbWVudC5pbm5lclRleHQgPSBcIkFjdGl2YXRlXCI7XG4gICAgICAgICAgICAgICAgYXV0b3NwcmludEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmVlblwiO1xuICAgICAgICAgICAgICAgICgwLCBhdXRvc3ByaW50XzEuc2V0YXV0b3NwcmludHRvZ2dsZSkoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYXV0b3d0YXBFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoKDAsIGF1dG93dGFwXzEucmV0dXJuYXV0b3d0YXB0b2dnbGUpKCkgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoKDAsIGF1dG9zcHJpbnRfMS5yZXR1cm5hdXRvc3ByaW50dG9nZ2xlKSgpID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgYXV0b3NwcmludEVsZW1lbnQuaW5uZXJUZXh0ID0gXCJBY3RpdmF0ZVwiO1xuICAgICAgICAgICAgICAgICAgICBhdXRvc3ByaW50RWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImdyZWVuXCI7XG4gICAgICAgICAgICAgICAgICAgICgwLCBhdXRvc3ByaW50XzEuc2V0YXV0b3NwcmludHRvZ2dsZSkoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhdXRvd3RhcEVsZW1lbnQuaW5uZXJUZXh0ID0gXCJEZWFjdGl2YXRlXCI7XG4gICAgICAgICAgICAgICAgYXV0b3d0YXBFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XG4gICAgICAgICAgICAgICAgKDAsIGF1dG93dGFwXzEuc2V0YXV0b3d0YXB0b2dnbGUpKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYXV0b3d0YXBFbGVtZW50LmlubmVyVGV4dCA9IFwiQWN0aXZhdGVcIjtcbiAgICAgICAgICAgICAgICBhdXRvd3RhcEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmVlblwiO1xuICAgICAgICAgICAgICAgICgwLCBhdXRvd3RhcF8xLnNldGF1dG93dGFwdG9nZ2xlKShmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBzcGVlZEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICgoMCwgc3BlZWRfMS5yZXR1cm5zcGVlZHRvZ2dsZSkoKSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHNwZWVkRWxlbWVudC5pbm5lclRleHQgPSBcIkRlYWN0aXZhdGVcIjtcbiAgICAgICAgICAgICAgICBzcGVlZEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjtcbiAgICAgICAgICAgICAgICAoMCwgc3BlZWRfMS5zZXRzcGVlZHRvZ2dsZSkodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzcGVlZEVsZW1lbnQuaW5uZXJUZXh0ID0gXCJBY3RpdmF0ZVwiO1xuICAgICAgICAgICAgICAgIHNwZWVkRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImdyZWVuXCI7XG4gICAgICAgICAgICAgICAgKDAsIHNwZWVkXzEuc2V0c3BlZWR0b2dnbGUpKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHNwZWVkc2V0dGluZ3MuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzcGVlZHZhbHVlID0gcHJvbXB0KFwiaG93IGZhc3QgZG8geW91IHdhbnQgdG8gYmU/IFxcbmRlZmF1bHQ6IDIoZG91YmxlIHRoZSBzcGVlZCkgXFxuY3VycmVudDogXCIgKyAoMCwgc3BlZWRfMS5yZXR1cm5zcGVlZHZhbHVlKSgpKTtcbiAgICAgICAgICAgIHZhciBudW1zcGVlZHZhbHVlID0gTnVtYmVyKHNwZWVkdmFsdWUpO1xuICAgICAgICAgICAgaWYgKGlzTmFOKG51bXNwZWVkdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgYWxlcnQoXCJzcGVlZCBpcyBOQU4gKG5vdCBhIG51bWJlcikgc2V0dGluZyBzcGVlZCB0byBkZWZhdWx0XCIpO1xuICAgICAgICAgICAgICAgICgwLCBzcGVlZF8xLnNldHNwZWVkdmFsdWUpKDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNwZWVkdmFsdWUgPT0gbnVsbCB8fCBzcGVlZHZhbHVlID09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBhbGVydChcIlVzZXIgY2FuY2VsbGVkIHRoZSBwcm9tcHQuXFxuIHNldHRpbmcgc3BlZWQgdG8gZGVmYXVsdCAoMilcIik7XG4gICAgICAgICAgICAgICAgKDAsIHNwZWVkXzEuc2V0c3BlZWR2YWx1ZSkoMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbGVydChcInNwZWVkIHNldCB0byBcIiArIHNwZWVkdmFsdWUpO1xuICAgICAgICAgICAgICAgICgwLCBzcGVlZF8xLnNldHNwZWVkdmFsdWUpKG51bXNwZWVkdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGlkZUd1aSgpIHtcbiAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXlHdWlcIikpIHsgLy8gSWYgdGhlIFwibXlHdWlcIiBlbGVtZW50IGV4aXN0c1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJteUd1aVwiKS5yZW1vdmUoKTsgLy8gUmVtb3ZlIHRoZSBcIm15R3VpXCIgZWxlbWVudCBmcm9tIHRoZSBkb2N1bWVudFxuICAgICAgICB9XG4gICAgICAgIGd1aVZpc2libGUgPSBmYWxzZTsgLy8gU2V0IHRoZSBHVUkgdmlzaWJpbGl0eSB0byBmYWxzZVxuICAgIH1cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5rZXkgPT09IFwiU2hpZnRcIiAmJiBldmVudC5sb2NhdGlvbiA9PT0gS2V5Ym9hcmRFdmVudC5ET01fS0VZX0xPQ0FUSU9OX1JJR0hUKSB7IC8vIElmIHRoZSByaWdodCBTaGlmdCBrZXkgaXMgcHJlc3NlZFxuICAgICAgICAgICAgdG9nZ2xlR3VpKCk7IC8vIFRvZ2dsZSB0aGUgR1VJIHZpc2liaWxpdHlcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQua2V5ID09PSBcIkVzY2FwZVwiIHx8IGV2ZW50LmtleSA9PT0gXCJgXCIpIHsgLy8gSWYgdGhlIEVzY2FwZSBrZXkgb3IgYmFja3RpY2sgaXMgcHJlc3NlZFxuICAgICAgICAgICAgaGlkZUd1aSgpOyAvLyBIaWRlIHRoZSBHVUlcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5yZWdpc3Rlcmd1aSA9IHJlZ2lzdGVyZ3VpO1xuZnVuY3Rpb24gcmV0dXJuZ3VpdmlzaWJsZSgpIHtcbiAgICByZXR1cm4gZ3VpVmlzaWJsZTtcbn1cbmV4cG9ydHMucmV0dXJuZ3VpdmlzaWJsZSA9IHJldHVybmd1aXZpc2libGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmV0dXJuaXNqZXRwYWNrZmx5aW5nID0gZXhwb3J0cy5yZXR1cm5qZXRwYWNrZm9yY2UgPSBleHBvcnRzLnNldGpldHBhY2tmb3JjZSA9IGV4cG9ydHMucmV0dXJuamV0cGFja3RvZ2dsZSA9IGV4cG9ydHMuc2V0amV0cGFja3RvZ2dsZSA9IGV4cG9ydHMucmVnaXN0ZXJqZXRwYWNrID0gdm9pZCAwO1xudmFyIGpldHBhY2tndWlhY3RpdmUgPSBmYWxzZTtcbnZhciBqZXRwYWNrZm9yY2UgPSAwLjI7XG52YXIgamV0cGFja0FjdGl2ZSA9IGZhbHNlO1xuZnVuY3Rpb24gcmVnaXN0ZXJqZXRwYWNrKCkge1xuICAgIC8vQHRzLWlnbm9yZVxuICAgIFBsdWdpbkFQSS5yZXF1aXJlKFwicGxheWVyXCIpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmtleS50b0xvd2VyQ2FzZSgpID09PSBcIiBcIikge1xuICAgICAgICAgICAgamV0cGFja0FjdGl2ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQua2V5LnRvTG93ZXJDYXNlKCkgPT09IFwiIFwiKSB7XG4gICAgICAgICAgICBqZXRwYWNrQWN0aXZlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvL0B0cy1pZ25vcmVcbiAgICBQbHVnaW5BUEkuYWRkRXZlbnRMaXN0ZW5lcihcInVwZGF0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChqZXRwYWNrZ3VpYWN0aXZlID09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5wb2ludGVyTG9ja0VsZW1lbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICghamV0cGFja0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIFBsdWdpbkFQSS5wbGF5ZXIubW90aW9uWSArPSBqZXRwYWNrZm9yY2U7XG4gICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgUGx1Z2luQVBJLnBsYXllci5yZWxvYWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5yZWdpc3RlcmpldHBhY2sgPSByZWdpc3RlcmpldHBhY2s7XG5mdW5jdGlvbiBzZXRqZXRwYWNrdG9nZ2xlKHRoZUJvb2xlYW4pIHtcbiAgICBqZXRwYWNrZ3VpYWN0aXZlID0gdGhlQm9vbGVhbjtcbn1cbmV4cG9ydHMuc2V0amV0cGFja3RvZ2dsZSA9IHNldGpldHBhY2t0b2dnbGU7XG5mdW5jdGlvbiByZXR1cm5qZXRwYWNrdG9nZ2xlKCkge1xuICAgIHJldHVybiBqZXRwYWNrZ3VpYWN0aXZlO1xufVxuZXhwb3J0cy5yZXR1cm5qZXRwYWNrdG9nZ2xlID0gcmV0dXJuamV0cGFja3RvZ2dsZTtcbmZ1bmN0aW9uIHNldGpldHBhY2tmb3JjZSh0aGVOdW1iZXIpIHtcbiAgICBqZXRwYWNrZm9yY2UgPSB0aGVOdW1iZXI7XG59XG5leHBvcnRzLnNldGpldHBhY2tmb3JjZSA9IHNldGpldHBhY2tmb3JjZTtcbmZ1bmN0aW9uIHJldHVybmpldHBhY2tmb3JjZSgpIHtcbiAgICByZXR1cm4gamV0cGFja2ZvcmNlO1xufVxuZXhwb3J0cy5yZXR1cm5qZXRwYWNrZm9yY2UgPSByZXR1cm5qZXRwYWNrZm9yY2U7XG5mdW5jdGlvbiByZXR1cm5pc2pldHBhY2tmbHlpbmcoKSB7XG4gICAgcmV0dXJuIGpldHBhY2tBY3RpdmU7XG59XG5leHBvcnRzLnJldHVybmlzamV0cGFja2ZseWluZyA9IHJldHVybmlzamV0cGFja2ZseWluZztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXR1cm5zbGlwcGVyeXRvZ2dsZSA9IGV4cG9ydHMuc2V0c2xpcHBlcnlUb2dnbGUgPSB2b2lkIDA7XG52YXIgc2xpcHBlcnl0b2dnbGUgPSBmYWxzZTtcbmZ1bmN0aW9uIHJlZ2lzdGVyc2xpcHBlcnkoKSB7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgdmFyIGJsb2NrS2V5cyA9IE9iamVjdC5rZXlzKFBsdWdpbkFQSS5ibG9ja3MpO1xuICAgIGJsb2NrS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgIGlmICgoX2IgPSAoX2EgPSBQbHVnaW5BUEkgPT09IG51bGwgfHwgUGx1Z2luQVBJID09PSB2b2lkIDAgPyB2b2lkIDAgOiBQbHVnaW5BUEkuYmxvY2tzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Fba2V5XSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnNsaXBwZXJpbmVzcykgeyAvLyBUZWFWTSBsaWtlcyB0byBhZGQgbWV0YWRhdGEgcHJvcGVydGllcyB3aGljaCBhcmUgYG51bGxgIG9yIGB1bmRlZmluZWRgXG4gICAgICAgICAgICBpZiAoc2xpcHBlcnl0b2dnbGUgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIFBsdWdpbkFQSS5ibG9ja3Nba2V5XS5zbGlwcGVyaW5lc3MgPSAwLjk4OyAvL0ljZSBzbGlwcGVyaW5lc3MgdmFsdWUuXG4gICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgUGx1Z2luQVBJLmJsb2Nrc1trZXldLnJlbG9hZCgpOyAvL1RoZSBuZXcgbWV0aG9kLCBgUGx1Z2luQVBJLnVwZGF0ZUNvbXBvbmVudGAgaXMgb2Jzb2xldGUgbm93LlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgUGx1Z2luQVBJLmJsb2Nrc1trZXldLnNsaXBwZXJpbmVzcyA9IDAuNjsgLy9JY2Ugc2xpcHBlcmluZXNzIHZhbHVlLlxuICAgICAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIFBsdWdpbkFQSS5ibG9ja3Nba2V5XS5yZWxvYWQoKTsgLy9UaGUgbmV3IG1ldGhvZCwgYFBsdWdpbkFQSS51cGRhdGVDb21wb25lbnRgIGlzIG9ic29sZXRlIG5vdy5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufVxuZnVuY3Rpb24gc2V0c2xpcHBlcnlUb2dnbGUodGhlQm9vbGVhbikge1xuICAgIHNsaXBwZXJ5dG9nZ2xlID0gdGhlQm9vbGVhbjsgLy8geXcgcmFkbWFuIDozXG59XG5leHBvcnRzLnNldHNsaXBwZXJ5VG9nZ2xlID0gc2V0c2xpcHBlcnlUb2dnbGU7XG5mdW5jdGlvbiByZXR1cm5zbGlwcGVyeXRvZ2dsZSgpIHtcbiAgICByZXR1cm4gc2xpcHBlcnl0b2dnbGU7XG59XG5leHBvcnRzLnJldHVybnNsaXBwZXJ5dG9nZ2xlID0gcmV0dXJuc2xpcHBlcnl0b2dnbGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmV0dXJuc3BlZWR2YWx1ZSA9IGV4cG9ydHMuc2V0c3BlZWR2YWx1ZSA9IGV4cG9ydHMucmV0dXJuc3BlZWR0b2dnbGUgPSBleHBvcnRzLnNldHNwZWVkdG9nZ2xlID0gZXhwb3J0cy5yZWdpc3RlcnNwZWVkID0gdm9pZCAwO1xudmFyIHNwZWVkYWN0aXZlID0gZmFsc2U7XG52YXIgc3BlZWR2YWx1ZSA9IDI7XG52YXIgamV0cGFja18xID0gcmVxdWlyZShcIi4vamV0cGFja1wiKTtcbmZ1bmN0aW9uIHJlZ2lzdGVyc3BlZWQoKSB7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgUGx1Z2luQVBJLnJlcXVpcmUoXCJwbGF5ZXJcIik7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgdmFyIHByZXggPSBQbHVnaW5BUEkucGxheWVyLm1vdGlvblg7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgdmFyIHByZXogPSBQbHVnaW5BUEkucGxheWVyLm1vdGlvblo7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgUGx1Z2luQVBJLmFkZEV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgaWYgKFBsdWdpbkFQSS5wbGF5ZXIub25Hcm91bmQpIHtcbiAgICAgICAgICAgIGlmIChzcGVlZGFjdGl2ZSA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgUGx1Z2luQVBJLnBsYXllci5tb3Rpb25YICo9IHNwZWVkdmFsdWU7XG4gICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgUGx1Z2luQVBJLnBsYXllci5tb3Rpb25aICo9IHNwZWVkdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKDAsIGpldHBhY2tfMS5yZXR1cm5pc2pldHBhY2tmbHlpbmcpKCkgJiYgamV0cGFja18xLnJldHVybmpldHBhY2t0b2dnbGUpIHsgLy8gdGhpcyBtYWtlcyBmbHlpbmcgd2l0aCBqZXRwYWNrIG1vcmUgZnVuIDpEIChhbmQgZmFzdGVyKVxuICAgICAgICAgICAgaWYgKHNwZWVkYWN0aXZlID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBQbHVnaW5BUEkucGxheWVyLm1vdGlvblggKj0gc3BlZWR2YWx1ZTtcbiAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBQbHVnaW5BUEkucGxheWVyLm1vdGlvblogKj0gc3BlZWR2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc3BlZWRhY3RpdmUgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgUGx1Z2luQVBJLnBsYXllci5tb3Rpb25YID0gcHJleDtcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgUGx1Z2luQVBJLnBsYXllci5tb3Rpb25aID0gcHJlejtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5yZWdpc3RlcnNwZWVkID0gcmVnaXN0ZXJzcGVlZDtcbmZ1bmN0aW9uIHNldHNwZWVkdG9nZ2xlKHRoZUJvb2xlYW4pIHtcbiAgICBzcGVlZGFjdGl2ZSA9IHRoZUJvb2xlYW47XG59XG5leHBvcnRzLnNldHNwZWVkdG9nZ2xlID0gc2V0c3BlZWR0b2dnbGU7XG5mdW5jdGlvbiByZXR1cm5zcGVlZHRvZ2dsZSgpIHtcbiAgICByZXR1cm4gc3BlZWRhY3RpdmU7XG59XG5leHBvcnRzLnJldHVybnNwZWVkdG9nZ2xlID0gcmV0dXJuc3BlZWR0b2dnbGU7XG5mdW5jdGlvbiBzZXRzcGVlZHZhbHVlKHRoZU51bWJlcikge1xuICAgIHNwZWVkdmFsdWUgPSB0aGVOdW1iZXI7XG59XG5leHBvcnRzLnNldHNwZWVkdmFsdWUgPSBzZXRzcGVlZHZhbHVlO1xuZnVuY3Rpb24gcmV0dXJuc3BlZWR2YWx1ZSgpIHtcbiAgICByZXR1cm4gc3BlZWR2YWx1ZTtcbn1cbmV4cG9ydHMucmV0dXJuc3BlZWR2YWx1ZSA9IHJldHVybnNwZWVkdmFsdWU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmV0dXJucmlnaHRjbGlja2RlbGF5ID0gZXhwb3J0cy5zZXRyaWdodGNsaWNrZGVsYXkgPSBleHBvcnRzLnJldHVybmxlZnRjbGlja2RlbGF5ID0gZXhwb3J0cy5zZXRsZWZ0Y2xpY2tkZWxheSA9IGV4cG9ydHMucmV0dXJuYXV0b2NsaWNrZXJtb2RlID0gZXhwb3J0cy5zZXRhdXRvY2xpY2tlcm1vZGUgPSBleHBvcnRzLnJldHVybmF1dG9jbGlja2VydG9nZ2xlID0gZXhwb3J0cy5zZXRhdXRvY2xpY2tlcnRvZ2dsZSA9IGV4cG9ydHMucmVnaXN0ZXJhdXRvY2xpY2tlciA9IHZvaWQgMDtcbi8vZnJvbSBodHRwczovL2dpdGh1Yi5jb20vTWV0ZW9yRGV2ZWxvcG1lbnQvbWV0ZW9yLWNsaWVudC9ibG9iL21hc3Rlci9zcmMvbWFpbi9qYXZhL21ldGVvcmRldmVsb3BtZW50L21ldGVvcmNsaWVudC9zeXN0ZW1zL21vZHVsZXMvcGxheWVyL0F1dG9DbGlja2VyLmphdmFcbnZhciBhdXRvY2xpY2tlclRvZ2dsZSA9IGZhbHNlO1xudmFyIG1vZGUgPSBcImxlZnRjbGlja1wiO1xudmFyIGxlZnRjbGlja2RlbGF5ID0gMjA7XG52YXIgbGVmdGNsaWNrdGltZXIgPSAwO1xudmFyIHJpZ2h0Y2xpY2tkZWxheSA9IDIwO1xudmFyIHJpZ2h0Y2xpY2t0aW1lciA9IDA7XG4vL2Z1biBmYWN0OiB5b3UgZ290dGEgc3RheSBoeWRyYXRlZCB3aGVuIGRldmVsb3BpbmcgYSBoYWNrZWQgY2xpZW50XG5mdW5jdGlvbiByZWdpc3RlcmF1dG9jbGlja2VyKCkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBQbHVnaW5BUEkuYWRkRXZlbnRMaXN0ZW5lcihcInVwZGF0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChhdXRvY2xpY2tlclRvZ2dsZSA9PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gXCJyaWdodGNsaWNrXCIpIHtcbiAgICAgICAgICAgICAgICByaWdodGNsaWNrdGltZXIrKztcbiAgICAgICAgICAgICAgICBpZiAocmlnaHRjbGlja3RpbWVyID4gcmlnaHRjbGlja2RlbGF5KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICBQbHVnaW5BUEkucmlnaHRDbGlja01vdXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0Y2xpY2t0aW1lciA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1vZGUgPT09IFwibGVmdGNsaWNrXCIpIHtcbiAgICAgICAgICAgICAgICBsZWZ0Y2xpY2t0aW1lcisrO1xuICAgICAgICAgICAgICAgIGlmIChsZWZ0Y2xpY2t0aW1lciA+IGxlZnRjbGlja2RlbGF5KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICBQbHVnaW5BUEkuY2xpY2tNb3VzZSgpO1xuICAgICAgICAgICAgICAgICAgICBsZWZ0Y2xpY2t0aW1lciA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgUGx1Z2luQVBJLnBsYXllci5yZWxvYWQoKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5yZWdpc3RlcmF1dG9jbGlja2VyID0gcmVnaXN0ZXJhdXRvY2xpY2tlcjtcbmZ1bmN0aW9uIHNldGF1dG9jbGlja2VydG9nZ2xlKHRoZUJvb2xlYW4pIHtcbiAgICBhdXRvY2xpY2tlclRvZ2dsZSA9IHRoZUJvb2xlYW47IC8vIHRoYW5rcyBAT3R0ZXJDb2RlczEwMlxufVxuZXhwb3J0cy5zZXRhdXRvY2xpY2tlcnRvZ2dsZSA9IHNldGF1dG9jbGlja2VydG9nZ2xlO1xuZnVuY3Rpb24gcmV0dXJuYXV0b2NsaWNrZXJ0b2dnbGUoKSB7XG4gICAgcmV0dXJuIGF1dG9jbGlja2VyVG9nZ2xlO1xufVxuZXhwb3J0cy5yZXR1cm5hdXRvY2xpY2tlcnRvZ2dsZSA9IHJldHVybmF1dG9jbGlja2VydG9nZ2xlO1xuZnVuY3Rpb24gc2V0YXV0b2NsaWNrZXJtb2RlKHRoZXN0cmluZykge1xuICAgIG1vZGUgPSB0aGVzdHJpbmc7XG59XG5leHBvcnRzLnNldGF1dG9jbGlja2VybW9kZSA9IHNldGF1dG9jbGlja2VybW9kZTtcbmZ1bmN0aW9uIHJldHVybmF1dG9jbGlja2VybW9kZSgpIHtcbiAgICByZXR1cm4gbW9kZTtcbn1cbmV4cG9ydHMucmV0dXJuYXV0b2NsaWNrZXJtb2RlID0gcmV0dXJuYXV0b2NsaWNrZXJtb2RlO1xuZnVuY3Rpb24gc2V0bGVmdGNsaWNrZGVsYXkodGhlbnVtYmVyMSkge1xuICAgIGxlZnRjbGlja2RlbGF5ID0gdGhlbnVtYmVyMTtcbn1cbmV4cG9ydHMuc2V0bGVmdGNsaWNrZGVsYXkgPSBzZXRsZWZ0Y2xpY2tkZWxheTtcbmZ1bmN0aW9uIHJldHVybmxlZnRjbGlja2RlbGF5KCkge1xuICAgIHJldHVybiBsZWZ0Y2xpY2tkZWxheTtcbn1cbmV4cG9ydHMucmV0dXJubGVmdGNsaWNrZGVsYXkgPSByZXR1cm5sZWZ0Y2xpY2tkZWxheTtcbmZ1bmN0aW9uIHNldHJpZ2h0Y2xpY2tkZWxheSh0aGVudW1iZXIyKSB7XG4gICAgcmlnaHRjbGlja2RlbGF5ID0gdGhlbnVtYmVyMjtcbn1cbmV4cG9ydHMuc2V0cmlnaHRjbGlja2RlbGF5ID0gc2V0cmlnaHRjbGlja2RlbGF5O1xuZnVuY3Rpb24gcmV0dXJucmlnaHRjbGlja2RlbGF5KCkge1xuICAgIHJldHVybiByaWdodGNsaWNrZGVsYXk7XG59XG5leHBvcnRzLnJldHVybnJpZ2h0Y2xpY2tkZWxheSA9IHJldHVybnJpZ2h0Y2xpY2tkZWxheTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXR1cm5hdXRvc3ByaW50dG9nZ2xlID0gZXhwb3J0cy5zZXRhdXRvc3ByaW50dG9nZ2xlID0gZXhwb3J0cy5yZWdpc3RlcmF1dG9zcHJpbnQgPSB2b2lkIDA7XG52YXIgYXV0b3NwcmludGFjdGl2ZSA9IGZhbHNlO1xuZnVuY3Rpb24gcmVnaXN0ZXJhdXRvc3ByaW50KCkge1xuICAgIC8vQHRzLWlnbm9yZVxuICAgIFBsdWdpbkFQSS5yZXF1aXJlKFwicGxheWVyXCIpO1xuICAgIC8vQHRzLWlnbm9yZVxuICAgIFBsdWdpbkFQSS5hZGRFdmVudExpc3RlbmVyKFwidXBkYXRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGF1dG9zcHJpbnRhY3RpdmUpIHtcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgUGx1Z2luQVBJLnBsYXllci5zZXRTcHJpbnRpbmcoeyBmbGFnOiB0cnVlIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnRzLnJlZ2lzdGVyYXV0b3NwcmludCA9IHJlZ2lzdGVyYXV0b3NwcmludDtcbmZ1bmN0aW9uIHNldGF1dG9zcHJpbnR0b2dnbGUodGhlQm9vbGVhbikge1xuICAgIGF1dG9zcHJpbnRhY3RpdmUgPSB0aGVCb29sZWFuO1xufVxuZXhwb3J0cy5zZXRhdXRvc3ByaW50dG9nZ2xlID0gc2V0YXV0b3NwcmludHRvZ2dsZTtcbmZ1bmN0aW9uIHJldHVybmF1dG9zcHJpbnR0b2dnbGUoKSB7XG4gICAgcmV0dXJuIGF1dG9zcHJpbnRhY3RpdmU7XG59XG5leHBvcnRzLnJldHVybmF1dG9zcHJpbnR0b2dnbGUgPSByZXR1cm5hdXRvc3ByaW50dG9nZ2xlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJldHVybmF1dG93dGFwdG9nZ2xlID0gZXhwb3J0cy5zZXRhdXRvd3RhcHRvZ2dsZSA9IGV4cG9ydHMucmVnaXN0ZXJ3dGFwID0gdm9pZCAwO1xudmFyIGF1dG93dGFwYWN0aXZlID0gZmFsc2U7XG5mdW5jdGlvbiByZWdpc3Rlcnd0YXAoKSB7XG4gICAgdmFyIGNvb2xkb3duID0gMDtcbiAgICAvL0B0cy1pZ25vcmUgXG4gICAgUGx1Z2luQVBJLmFkZEV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoYXV0b3d0YXBhY3RpdmUpIHtcbiAgICAgICAgICAgIGNvb2xkb3duID0gLTE7XG4gICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgIFBsdWdpbkFQSS5wbGF5ZXIuc2V0U3ByaW50aW5nKHsgZmxhZzogdHJ1ZSB9KTtcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgaWYgKFBsdWdpbkFQSS5wbGF5ZXIuaXNTd2luZ0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29vbGRvd24gPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICBQbHVnaW5BUEkucGxheWVyLnNldFNwcmludGluZyh7IGZsYWc6IGZhbHNlIH0pO1xuICAgICAgICAgICAgICAgICAgICBjb29sZG93biA9IDM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnRzLnJlZ2lzdGVyd3RhcCA9IHJlZ2lzdGVyd3RhcDtcbmZ1bmN0aW9uIHNldGF1dG93dGFwdG9nZ2xlKHRoZUJvb2xlYW4pIHtcbiAgICBhdXRvd3RhcGFjdGl2ZSA9IHRoZUJvb2xlYW47XG59XG5leHBvcnRzLnNldGF1dG93dGFwdG9nZ2xlID0gc2V0YXV0b3d0YXB0b2dnbGU7XG5mdW5jdGlvbiByZXR1cm5hdXRvd3RhcHRvZ2dsZSgpIHtcbiAgICByZXR1cm4gYXV0b3d0YXBhY3RpdmU7XG59XG5leHBvcnRzLnJldHVybmF1dG93dGFwdG9nZ2xlID0gcmV0dXJuYXV0b3d0YXB0b2dnbGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmV0dXJuTm9mYWxsVG9nZ2xlID0gZXhwb3J0cy5zZXROb2ZhbGxUb2dnbGUgPSBleHBvcnRzLnJlZ2lzdGVyTm9mYWxsID0gdm9pZCAwO1xuLy9hZGRlZCBieSBAT3R0ZXJDb2RlczEwMlxudmFyIG5vZmFsbFRvZ2dsZSA9IGZhbHNlO1xuZnVuY3Rpb24gcmVnaXN0ZXJOb2ZhbGwoKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIFBsdWdpbkFQSS5yZXF1aXJlKFwibmV0d29ya1wiKTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgUGx1Z2luQVBJLmFkZEV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmIChQbHVnaW5BUEkucGxheWVyLmZhbGxEaXN0YW5jZSA+IDIuMCAmJiBub2ZhbGxUb2dnbGUpIHsgLy8gdHkgenhtdXNocm9vbVxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgUGx1Z2luQVBJLm5ldHdvcmsuc2VuZFBhY2tldFBsYXllcih7IGlzT25Hcm91bmQ6IHRydWUgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMucmVnaXN0ZXJOb2ZhbGwgPSByZWdpc3Rlck5vZmFsbDtcbmZ1bmN0aW9uIHNldE5vZmFsbFRvZ2dsZSh0aGVCb29sZWFuKSB7XG4gICAgbm9mYWxsVG9nZ2xlID0gdGhlQm9vbGVhbjtcbn1cbmV4cG9ydHMuc2V0Tm9mYWxsVG9nZ2xlID0gc2V0Tm9mYWxsVG9nZ2xlO1xuZnVuY3Rpb24gcmV0dXJuTm9mYWxsVG9nZ2xlKCkge1xuICAgIHJldHVybiBub2ZhbGxUb2dnbGU7XG59XG5leHBvcnRzLnJldHVybk5vZmFsbFRvZ2dsZSA9IHJldHVybk5vZmFsbFRvZ2dsZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXR1cm5ub3dlYlRvZ2dsZSA9IGV4cG9ydHMuc2V0bm93ZWJUb2dnbGUgPSBleHBvcnRzLnJlZ2lzdGVybm93ZWIgPSB2b2lkIDA7XG52YXIgbm93ZWJUb2dnbGUgPSBmYWxzZTtcbmZ1bmN0aW9uIHJlZ2lzdGVybm93ZWIoKSB7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgUGx1Z2luQVBJLnJlcXVpcmUoXCJwbGF5ZXJcIik7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgUGx1Z2luQVBJLmFkZEV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAobm93ZWJUb2dnbGUgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICBQbHVnaW5BUEkucGxheWVyLmlzSW5XZWIgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgUGx1Z2luQVBJLnBsYXllci5yZWxvYWQoKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5yZWdpc3Rlcm5vd2ViID0gcmVnaXN0ZXJub3dlYjtcbmZ1bmN0aW9uIHNldG5vd2ViVG9nZ2xlKHRoZUJvb2xlYW4pIHtcbiAgICBub3dlYlRvZ2dsZSA9IHRoZUJvb2xlYW47XG59XG5leHBvcnRzLnNldG5vd2ViVG9nZ2xlID0gc2V0bm93ZWJUb2dnbGU7XG5mdW5jdGlvbiByZXR1cm5ub3dlYlRvZ2dsZSgpIHtcbiAgICByZXR1cm4gbm93ZWJUb2dnbGU7XG59XG5leHBvcnRzLnJldHVybm5vd2ViVG9nZ2xlID0gcmV0dXJubm93ZWJUb2dnbGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmV0dXJuU3BpZGVyVG9nZ2xlID0gZXhwb3J0cy5zZXRTcGlkZXJUb2dnbGUgPSBleHBvcnRzLnJlZ2lzdGVyU3BpZGVyID0gdm9pZCAwO1xudmFyIHNwaWRlclRvZ2dsZSA9IGZhbHNlO1xuZnVuY3Rpb24gcmVnaXN0ZXJTcGlkZXIoKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIFBsdWdpbkFQSS5yZXF1aXJlKFwicGxheWVyXCIpO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBQbHVnaW5BUEkuYWRkRXZlbnRMaXN0ZW5lcihcInVwZGF0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKFBsdWdpbkFQSS5wbGF5ZXIuaXNDb2xsaWRlZEhvcml6b250YWxseSAmJiBzcGlkZXJUb2dnbGUgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgUGx1Z2luQVBJLnBsYXllci5tb3Rpb25ZID0gMC4yO1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgUGx1Z2luQVBJLnBsYXllci5yZWxvYWQoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICAvL1BsdWdpbkFQSS5hZGRFdmVudExpc3RlbmVyKFwia2V5XCIsIChldmVudCkgPT4ge1xuICAgIC8vQCB0cy1pZ25vcmVcbiAgICAvL2lmIChldmVudC5rZXkgPT0gMjIpIHtcbiAgICAvL3NwaWRlclRvZ2dsZSA9ICFzcGlkZXJUb2dnbGVcbiAgICAvL2lmIChzcGlkZXJUb2dnbGUgPT0gdHJ1ZSkge1xuICAgIC8vZGlzcGxheVRvQ2hhdChcIsKnZMKnbFtNZXRlb3JYXSDCp3LCp2VFbmFibGVkIHNwaWRlci5cIilcbiAgICAvL30gZWxzZSB7XG4gICAgLy9kaXNwbGF5VG9DaGF0KFwiwqdkwqdsW01ldGVvclhdIMKncsKnZURpc2FibGVkIHNwaWRlci5cIilcbiAgICAvL31cbn1cbmV4cG9ydHMucmVnaXN0ZXJTcGlkZXIgPSByZWdpc3RlclNwaWRlcjtcbi8vfSlcbi8vfVxuZnVuY3Rpb24gc2V0U3BpZGVyVG9nZ2xlKHRoZUJvb2xlYW4pIHtcbiAgICBzcGlkZXJUb2dnbGUgPSB0aGVCb29sZWFuOyAvLyB5dyByYWRtYW4gOjNcbn1cbmV4cG9ydHMuc2V0U3BpZGVyVG9nZ2xlID0gc2V0U3BpZGVyVG9nZ2xlO1xuZnVuY3Rpb24gcmV0dXJuU3BpZGVyVG9nZ2xlKCkge1xuICAgIHJldHVybiBzcGlkZXJUb2dnbGU7XG59XG5leHBvcnRzLnJldHVyblNwaWRlclRvZ2dsZSA9IHJldHVyblNwaWRlclRvZ2dsZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXR1cm5TdGVwVG9nZ2xlID0gZXhwb3J0cy5zZXRTdGVwVG9nZ2xlID0gZXhwb3J0cy5yZWdpc3RlclN0ZXAgPSB2b2lkIDA7XG52YXIgc3RlcFRvZ2dsZSA9IGZhbHNlO1xuZnVuY3Rpb24gcmVnaXN0ZXJTdGVwKCkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBQbHVnaW5BUEkuYWRkRXZlbnRMaXN0ZW5lcihcInVwZGF0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChzdGVwVG9nZ2xlID09IHRydWUpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIFBsdWdpbkFQSS5wbGF5ZXIuc3RlcEhlaWdodCA9IDE7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBQbHVnaW5BUEkucGxheWVyLnJlbG9hZCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgUGx1Z2luQVBJLnBsYXllci5zdGVwSGVpZ2h0ID0gMC41O1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgUGx1Z2luQVBJLnBsYXllci5yZWxvYWQoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIEB0cy1pZ25vcmUgXG4gICAgLy9QbHVnaW5BUEkuYWRkRXZlbnRMaXN0ZW5lcihcImtleVwiLCAoZXZlbnQpPT57IGNvbW1lbnQgb3V0IGNvZGUgcmFkbWFuIGxpa2VseSB3b24ndCB1c2VcbiAgICAvL2lmIChldmVudC5rZXkgPT0gNDcpIHsgXG4gICAgLy8gIHN0ZXBUb2dnbGUgPSAhc3RlcFRvZ2dsZTtcbiAgICAvLyBpZiAoc3RlcFRvZ2dsZSA9PSB0cnVlKSB7XG4gICAgLy8gICBkaXNwbGF5VG9DaGF0KFwiwqdkwqdsW01ldGVvclhdIMKncsKnZUVuYWJsZWQgc3RlcC5cIilcbiAgICAvLyB9IGVsc2Uge1xuICAgIC8vICAgIGRpc3BsYXlUb0NoYXQoXCLCp2TCp2xbTWV0ZW9yWF0gwqdywqdlRGlzYWJsZWQgc3RlcC5cIilcbiAgICAvLyB9XG4gICAgLy8gfVxuICAgIC8vICB9KVxufVxuZXhwb3J0cy5yZWdpc3RlclN0ZXAgPSByZWdpc3RlclN0ZXA7XG5mdW5jdGlvbiBzZXRTdGVwVG9nZ2xlKHRoZUJvb2xlYW4pIHtcbiAgICBzdGVwVG9nZ2xlID0gdGhlQm9vbGVhbjsgLy8geXcgcmFkbWFuIDozXG59XG5leHBvcnRzLnNldFN0ZXBUb2dnbGUgPSBzZXRTdGVwVG9nZ2xlO1xuZnVuY3Rpb24gcmV0dXJuU3RlcFRvZ2dsZSgpIHtcbiAgICByZXR1cm4gc3RlcFRvZ2dsZTtcbn1cbmV4cG9ydHMucmV0dXJuU3RlcFRvZ2dsZSA9IHJldHVyblN0ZXBUb2dnbGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmV0dXJuRnVsbGJyaWdodFRvZ2dsZSA9IGV4cG9ydHMuc2V0RnVsbGJyaWdodFRvZ2dsZSA9IGV4cG9ydHMucmVnaXN0ZXJGdWxsYnJpZ2h0ID0gdm9pZCAwO1xuLy9hZGRlZCBieSBAT3R0ZXJDb2RlczEwMlxudmFyIGZ1bGxicmlnaHRUb2dnbGUgPSBmYWxzZTtcbmZ1bmN0aW9uIHJlZ2lzdGVyRnVsbGJyaWdodCgpIHtcbiAgICAvL0B0cy1pZ25vcmVcbiAgICBQbHVnaW5BUEkuYWRkRXZlbnRMaXN0ZW5lcihcInVwZGF0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChmdWxsYnJpZ2h0VG9nZ2xlID09IGZhbHNlKSB7XG4gICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgIFBsdWdpbkFQSS5ibG9ja3MuYWlyLmxpZ2h0VmFsdWUgPSAwOyAvL1NldCB0aGUgYWlyJ3MgbGlnaHQgbGV2ZWwgdG8gMC5cbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgUGx1Z2luQVBJLmJsb2Nrcy5haXIucmVsb2FkKCk7IC8vU2F2ZSBjaGFuZ2VzICAgXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgIFBsdWdpbkFQSS5ibG9ja3MuYWlyLmxpZ2h0VmFsdWUgPSAxMDsgLy9TZXQgdGhlIGFpcidzIGxpZ2h0IGxldmVsIHRvIDEwLlxuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICBQbHVnaW5BUEkuYmxvY2tzLmFpci5yZWxvYWQoKTsgLy9TYXZlIGNoYW5nZXNcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5yZWdpc3RlckZ1bGxicmlnaHQgPSByZWdpc3RlckZ1bGxicmlnaHQ7XG5mdW5jdGlvbiBzZXRGdWxsYnJpZ2h0VG9nZ2xlKHRoZUJvb2xlYW4pIHtcbiAgICBmdWxsYnJpZ2h0VG9nZ2xlID0gdGhlQm9vbGVhbjtcbn1cbmV4cG9ydHMuc2V0RnVsbGJyaWdodFRvZ2dsZSA9IHNldEZ1bGxicmlnaHRUb2dnbGU7XG5mdW5jdGlvbiByZXR1cm5GdWxsYnJpZ2h0VG9nZ2xlKCkge1xuICAgIHJldHVybiBmdWxsYnJpZ2h0VG9nZ2xlO1xufVxuZXhwb3J0cy5yZXR1cm5GdWxsYnJpZ2h0VG9nZ2xlID0gcmV0dXJuRnVsbGJyaWdodFRvZ2dsZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kaXNwbGF5VG9DaGF0ID0gdm9pZCAwO1xuZnVuY3Rpb24gZGlzcGxheVRvQ2hhdChtZXNzYWdlKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIFBsdWdpbkFQSS5kaXNwbGF5VG9DaGF0KHsgbXNnOiBtZXNzYWdlIH0pOyAvL2Rpc3BsYXkgdGhhdCB2YWx1ZSB0byBjaGF0XG59XG5leHBvcnRzLmRpc3BsYXlUb0NoYXQgPSBkaXNwbGF5VG9DaGF0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1ldGVvclhmYWlsdXJlID0gZXhwb3J0cy5NZXRlb3JYc3VjY2VzcyA9IGV4cG9ydHMuTWV0ZW9yWGVycm9yID0gZXhwb3J0cy5NZXRlb3JYd2FybmluZyA9IGV4cG9ydHMuTWV0ZW9yWGxvZyA9IHZvaWQgMDtcbnZhciBjaGF0XzEgPSByZXF1aXJlKFwiLi9jaGF0XCIpO1xuZnVuY3Rpb24gTWV0ZW9yWGxvZyhtZXNzYWdlKSB7XG4gICAgKDAsIGNoYXRfMS5kaXNwbGF5VG9DaGF0KShcIsKnY1vCpzZNZXRlb3JYwqdjXcKnZiBcIiArIG1lc3NhZ2UpO1xufVxuZXhwb3J0cy5NZXRlb3JYbG9nID0gTWV0ZW9yWGxvZztcbmZ1bmN0aW9uIE1ldGVvclh3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgICAoMCwgY2hhdF8xLmRpc3BsYXlUb0NoYXQpKFwiwqdjW8KnNsKnbFdBUk5JTkfCp2NdwqdmIFwiICsgbWVzc2FnZSk7XG59XG5leHBvcnRzLk1ldGVvclh3YXJuaW5nID0gTWV0ZW9yWHdhcm5pbmc7XG5mdW5jdGlvbiBNZXRlb3JYZXJyb3IobWVzc2FnZSkge1xuICAgICgwLCBjaGF0XzEuZGlzcGxheVRvQ2hhdCkoXCLCp2Nbwqc0wqdsRVJST1LCp2NdwqdmIFwiICsgbWVzc2FnZSk7XG59XG5leHBvcnRzLk1ldGVvclhlcnJvciA9IE1ldGVvclhlcnJvcjtcbmZ1bmN0aW9uIE1ldGVvclhzdWNjZXNzKG1lc3NhZ2UpIHtcbiAgICAoMCwgY2hhdF8xLmRpc3BsYXlUb0NoYXQpKFwiwqdhW8KnMsKnbFNVQ0NFU1PCp2FdwqdmIFwiICsgbWVzc2FnZSk7XG59XG5leHBvcnRzLk1ldGVvclhzdWNjZXNzID0gTWV0ZW9yWHN1Y2Nlc3M7XG5mdW5jdGlvbiBNZXRlb3JYZmFpbHVyZShtZXNzYWdlKSB7XG4gICAgKDAsIGNoYXRfMS5kaXNwbGF5VG9DaGF0KShcIsKnY1vCpzTCp2xGQUlMVVJFwqdjXcKnZiBcIiArIG1lc3NhZ2UpO1xufVxuZXhwb3J0cy5NZXRlb3JYZmFpbHVyZSA9IE1ldGVvclhmYWlsdXJlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvcHkgPSB2b2lkIDA7XG5mdW5jdGlvbiBjb3B5KHRleHQpIHtcbiAgICB2YXIgdGVtcElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIHRlbXBJbnB1dC52YWx1ZSA9IHRleHQ7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0ZW1wSW5wdXQpO1xuICAgIHRlbXBJbnB1dC5zZWxlY3QoKTtcbiAgICBkb2N1bWVudC5leGVjQ29tbWFuZChcImNvcHlcIik7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0ZW1wSW5wdXQpO1xufVxuZXhwb3J0cy5jb3B5ID0gY29weTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51cGRhdGVQbGF5ZXJQb3NpdGlvbiA9IGV4cG9ydHMuZ2V0cGxheWVycG9zID0gZXhwb3J0cy5hZGR0b3BsYXllcnpwb3MgPSBleHBvcnRzLmFkZHRvcGxheWVyeXBvcyA9IGV4cG9ydHMuYWRkdG9wbGF5ZXJ4cG9zID0gdm9pZCAwO1xuLy8gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vUGhlb1plbi9XdXJzdC1NQy0xLjgvYmxvYi9tYXN0ZXIvc3JjL3RrL3d1cnN0X2NsaWVudC91dGlscy9QbGF5ZXJVdGlscy5qYXZhXG4vL0B0cy1pZ25vcmVcblBsdWdpbkFQSS5yZXF1aXJlKFwicGxheWVyXCIpO1xudmFyIGdldHBsYXllcnBvcyA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDAsXG4gICAgejogMFxufTtcbmV4cG9ydHMuZ2V0cGxheWVycG9zID0gZ2V0cGxheWVycG9zO1xuZnVuY3Rpb24gdXBkYXRlUGxheWVyUG9zaXRpb24oKSB7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgZ2V0cGxheWVycG9zLnggPSBQbHVnaW5BUEkucGxheWVyLng7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgZ2V0cGxheWVycG9zLnkgPSBQbHVnaW5BUEkucGxheWVyLnk7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgZ2V0cGxheWVycG9zLnogPSBQbHVnaW5BUEkucGxheWVyLno7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgUGx1Z2luQVBJLnBsYXllci5yZWxvYWQoKTtcbn1cbmV4cG9ydHMudXBkYXRlUGxheWVyUG9zaXRpb24gPSB1cGRhdGVQbGF5ZXJQb3NpdGlvbjtcbmZ1bmN0aW9uIGFkZHRvcGxheWVyeHBvcyh4KSB7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgUGx1Z2luQVBJLnBsYXllci54ICs9IHg7XG59XG5leHBvcnRzLmFkZHRvcGxheWVyeHBvcyA9IGFkZHRvcGxheWVyeHBvcztcbmZ1bmN0aW9uIGFkZHRvcGxheWVyeXBvcyh5KSB7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgUGx1Z2luQVBJLnBsYXllci55ICs9IHk7XG59XG5leHBvcnRzLmFkZHRvcGxheWVyeXBvcyA9IGFkZHRvcGxheWVyeXBvcztcbmZ1bmN0aW9uIGFkZHRvcGxheWVyenBvcyh6KSB7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgUGx1Z2luQVBJLnBsYXllci56ICs9IHo7XG59XG5leHBvcnRzLmFkZHRvcGxheWVyenBvcyA9IGFkZHRvcGxheWVyenBvcztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXR0cHMgPSBleHBvcnRzLnJlZ2lzdGVydHBzID0gdm9pZCAwO1xuLy8gZnJvbSBlYWdsZXJyZWJvcm4ncyBleGFtcGxlIHBsdWdpbnNcbnZhciBjdXJyZW50VHBzID0gMDtcbmZ1bmN0aW9uIHJlZ2lzdGVydHBzKCkge1xuICAgIC8vIENsaWVudC1zaWRlIHNlcnZlciBUUFMgZXN0aW1hdG9yIHdpdGggdGhlIFBsdWdpbiBBUElcbiAgICAvLyBPbmx5IHJlbGlhYmxlIGlmIHlvdSBhcmUgbm90IGxhZ2dpbmcgKGllIGhpZ2ggZnBzKVxuICAgIHZhciBsYXN0VGltZTtcbiAgICB2YXIgbGFzdEFnZSA9IC0xO1xuICAgIC8vQHRzLWlnbm9yZVxuICAgIFBsdWdpbkFQSS5hZGRFdmVudExpc3RlbmVyKFwicGFja2V0dGltZXVwZGF0ZVwiLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgdmFyIGFnZSA9IGV2LnRvdGFsV29ybGRUaW1lO1xuICAgICAgICB2YXIgdGltZSA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG4gICAgICAgIGlmIChsYXN0QWdlID09IC0xKSB7XG4gICAgICAgICAgICBsYXN0VGltZSA9IHRpbWU7XG4gICAgICAgICAgICBsYXN0QWdlID0gYWdlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkaWZmQWdlID0gYWdlIC0gbGFzdEFnZTtcbiAgICAgICAgdmFyIGRpZmZUaW1lID0gdGltZSAtIGxhc3RUaW1lO1xuICAgICAgICBsYXN0QWdlID0gYWdlO1xuICAgICAgICBsYXN0VGltZSA9IHRpbWU7XG4gICAgICAgIGN1cnJlbnRUcHMgPSBkaWZmQWdlIC8gKGRpZmZUaW1lIC8gMTAwMCk7XG4gICAgfSk7XG59XG5leHBvcnRzLnJlZ2lzdGVydHBzID0gcmVnaXN0ZXJ0cHM7XG5mdW5jdGlvbiBnZXR0cHMoKSB7XG4gICAgcmV0dXJuIGN1cnJlbnRUcHM7XG59XG5leHBvcnRzLmdldHRwcyA9IGdldHRwcztcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZ3VpXzEgPSByZXF1aXJlKFwiLi9ldGMvZ3VpXCIpO1xudmFyIHNwaWRlcl8xID0gcmVxdWlyZShcIi4vbW9kdWxlcy9wbGF5ZXIvc3BpZGVyXCIpO1xudmFyIHN0ZXBfMSA9IHJlcXVpcmUoXCIuL21vZHVsZXMvcGxheWVyL3N0ZXBcIik7XG52YXIgbm9mYWxsXzEgPSByZXF1aXJlKFwiLi9tb2R1bGVzL3BsYXllci9ub2ZhbGxcIik7XG52YXIgamV0cGFja18xID0gcmVxdWlyZShcIi4vbW9kdWxlcy9tb3ZlbWVudC9qZXRwYWNrXCIpO1xudmFyIGZ1bGxicmlnaHRfMSA9IHJlcXVpcmUoXCIuL21vZHVsZXMvcmVuZGVyL2Z1bGxicmlnaHRcIik7XG52YXIgY21kc18xID0gcmVxdWlyZShcIi4vZXRjL2NtZHNcIik7XG52YXIgbm93ZWJfMSA9IHJlcXVpcmUoXCIuL21vZHVsZXMvcGxheWVyL25vd2ViXCIpO1xudmFyIHRwc18xID0gcmVxdWlyZShcIi4vdXRpbHMvdHBzXCIpO1xudmFyIGF1dG9zcHJpbnRfMSA9IHJlcXVpcmUoXCIuL21vZHVsZXMvcGxheWVyL2F1dG9zcHJpbnRcIik7XG52YXIgYXV0b3d0YXBfMSA9IHJlcXVpcmUoXCIuL21vZHVsZXMvcGxheWVyL2F1dG93dGFwXCIpO1xudmFyIHNwZWVkXzEgPSByZXF1aXJlKFwiLi9tb2R1bGVzL21vdmVtZW50L3NwZWVkXCIpO1xudHJ5IHsgLy8gbWFrZSBpdCBzbyBlYWdsZXJyZWJvcm4gZG9zbnQgY3Jhc2ggd2hlbiBhIGVycm9yIGhhcHBlbnNcbiAgICAvLyBkaXNwbGF5IGEgbWVzc2FnZSBvbiBjb25zb2xlIGluZGljYXRpbmcgdGhhdCB0aGUgY2xpZW50IGlzIGxvYWRpbmdcbiAgICBjb25zb2xlLmxvZyhcIltNZXRlb3JYXSBMb2FkaW5nIGNsaWVudC4uLlwiKTtcbiAgICAvLyByZWdpc3RlciBhbGwgbW9kdWxlcyBhbmQgY29tbWFuZHNcbiAgICAoMCwgY21kc18xLnJlZ2lzdGVyY21kcykoKTtcbiAgICAoMCwgbm93ZWJfMS5yZWdpc3Rlcm5vd2ViKSgpO1xuICAgICgwLCBndWlfMS5yZWdpc3Rlcmd1aSkoKTtcbiAgICAoMCwgamV0cGFja18xLnJlZ2lzdGVyamV0cGFjaykoKTtcbiAgICAoMCwgc3BpZGVyXzEucmVnaXN0ZXJTcGlkZXIpKCk7XG4gICAgKDAsIHN0ZXBfMS5yZWdpc3RlclN0ZXApKCk7XG4gICAgKDAsIG5vZmFsbF8xLnJlZ2lzdGVyTm9mYWxsKSgpO1xuICAgICgwLCBmdWxsYnJpZ2h0XzEucmVnaXN0ZXJGdWxsYnJpZ2h0KSgpO1xuICAgIC8vIHJlZ2lzdGVydGFjbygpXG4gICAgLy8gZGlzcGxheXRhY28oKVxuICAgICgwLCB0cHNfMS5yZWdpc3RlcnRwcykoKTtcbiAgICAoMCwgYXV0b3NwcmludF8xLnJlZ2lzdGVyYXV0b3NwcmludCkoKTtcbiAgICAoMCwgYXV0b3d0YXBfMS5yZWdpc3Rlcnd0YXApKCk7XG4gICAgKDAsIHNwZWVkXzEucmVnaXN0ZXJzcGVlZCkoKTtcbiAgICAvLyBkaXNwbGF5IGEgbWVzc2FnZSBvbiBjb25zb2xlIGluZGljYXRpbmcgdGhhdCB0aGUgY2xpZW50IGhhcyBmaW5pc2hlZCBsb2FkaW5nXG4gICAgY29uc29sZS5sb2coXCJbTWV0ZW9yWF0gRmluaXNoZWQgbG9hZGluZyBjbGllbnQhXCIpO1xufVxuY2F0Y2ggKGVycm9yKSB7XG4gICAgLy8gaGFuZGxlIGFueSBlcnJvcnMgdGhhdCBvY2N1ciBkdXJpbmcgZXhlY3V0aW9uXG4gICAgY29uc29sZS5lcnJvcihcIltNZXRlb3JYXSBFcnJvciBkdXJpbmcgY2xpZW50IGV4ZWN1dGlvbjpcIiwgZXJyb3IpO1xufVxuIl0sIm5hbWVzIjpbIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwibGVuZ3RoIiwiaSIsImFycjIiLCJBcnJheSIsIldvcmQiLCJ3b3JkIiwidGhpcyIsInRyaW0iLCJyZXBsYWNlZFdvcmRzIiwiU2V0IiwiX3Byb3RvIiwicHJvdG90eXBlIiwicmVwbGFjZSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwicmVwbGFjZVJlcGxhY2VkV29yZHMiLCJmcm9tIiwic29tZSIsInNlYXJjaFZhbHVlQ29udGFpbnNSZXBsYWNlZFdvcmRzIiwicmVwbGFjaW5nV29yZCIsIm1hdGNoQXJyYXkiLCJtYXRjaCIsIm1hcCIsIngiLCJfc3RlcCIsIl9pdGVyYXRvciIsIm8iLCJhbGxvd0FycmF5TGlrZSIsIml0IiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjYWxsIiwibmV4dCIsImJpbmQiLCJpc0FycmF5IiwibWluTGVuIiwibiIsIk9iamVjdCIsInRvU3RyaW5nIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJ0ZXN0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiZG9uZSIsInZhbHVlIiwiVHlwZUVycm9yIiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZSIsImFkZCIsImZhY2VzIiwic3BlY2lmaWNXb3JkTWFwcGluZ0FycmF5IiwiaW5wdXQiLCJ1dnVNYXBwaW5nQXJyYXkiLCJNYXRoIiwicm91bmQiLCJyYW5kb20iLCJ1d3VNYXBwaW5nQXJyYXkiLCJmbG9vciIsIm93b01hcHBpbmdBcnJheSIsIl8iLCJtMSIsIm0yIiwidG9VcHBlckNhc2UiLCJ2IiwibGV2ZWwiLCJ3aGl0ZXNwYWNlIiwic3BsaXQiLCJ3b3JkcyIsImEiLCJiIiwib2JzZXJ2ZWQiLCJvdGhlciIsInRlbXAiLCJwdXNoIiwic2hpZnQiLCJhcHBseSIsImludGVybGVhdmVBcnJheXMiLCJyZWR1Y2UiLCJmIiwiam9pbiIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInJlZ2lzdGVyY21kcyIsIm93b2lmeSIsImNoYXR1dGlsc18xIiwicGxheWVydXRpbHNfMSIsInRwc18xIiwiY2xpcGJvYXJkdXRpbHNfMSIsInNlcnZlcmlwIiwiUGx1Z2luQVBJIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2IiwiaXAiLCJldmVudCIsIm1lc3NhZ2UiLCJNZXRlb3JYbG9nIiwicHJldmVudERlZmF1bHQiLCJzdGFydHNXaXRoIiwidGFyZ2V0TGVuZ3RoIiwic3Vic3RyaW5nIiwidG9Mb3dlckNhc2UiLCJhY3R1YWxjaGF0bWVzc2FnZSIsInV3dW1lc3NhZ2UiLCJuZXR3b3JrIiwic2VuZFBhY2tldENoYXRNZXNzYWdlIiwibWVzc2FnZUluIiwidXBkYXRlUGxheWVyUG9zaXRpb24iLCJwbGF5ZXJ4IiwidHJ1bmMiLCJnZXRwbGF5ZXJwb3MiLCJwbGF5ZXJ5IiwieSIsInBsYXllcnoiLCJ6IiwidmNsaXB2YWx1ZSIsImlzcGxheWVycmlkaW5nIiwicGxheWVyIiwiaXNSaWRpbmciLCJpc05hTiIsIk1ldGVvclhlcnJvciIsInNldFBvc2l0aW9uIiwiTWV0ZW9yWHN1Y2Nlc3MiLCJnZXR0cHMiLCJ0b0ZpeGVkIiwiY29weSIsInJldHVybmd1aXZpc2libGUiLCJyZWdpc3Rlcmd1aSIsInN0ZXBfMSIsInNwaWRlcl8xIiwibm9mYWxsXzEiLCJmdWxsYnJpZ2h0XzEiLCJqZXRwYWNrXzEiLCJub3dlYl8xIiwiYXV0b2NsaWNrZXJfMSIsInNsaXBwZXJ5XzEiLCJhdXRvc3ByaW50XzEiLCJhdXRvd3RhcF8xIiwic3BlZWRfMSIsImd1aVZpc2libGUiLCJoaWRlR3VpIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInJlbW92ZSIsIndpbmRvdyIsImtleSIsImxvY2F0aW9uIiwiS2V5Ym9hcmRFdmVudCIsIkRPTV9LRVlfTE9DQVRJT05fUklHSFQiLCJndWkiLCJjcmVhdGVFbGVtZW50IiwicG9pbnRlckxvY2tFbGVtZW50IiwiZXhpdFBvaW50ZXJMb2NrIiwiaW5uZXJIVE1MIiwiaWQiLCJzdHlsZSIsIndpZHRoIiwiaGVpZ2h0IiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0IiwiekluZGV4IiwiY29sb3IiLCJmb250RmFtaWx5Iiwib3ZlcmZsb3ciLCJiYWNrZ3JvdW5kQ29sb3IiLCJiYWNrZ3JvdW5kQmxlbmRNb2RlIiwiYmFja2dyb3VuZFNpemUiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJqZXRwYWNrRWxlbWVudCIsImpldHBhY2tzZXR0aW5ncyIsInN0ZXBFbGVtZW50Iiwic3BpZGVyRWxlbWVudCIsIm5vZmFsbEVsZW1lbnQiLCJmdWxsYnJpZ2h0RWxlbWVudCIsIm5vd2ViRWxlbWVudCIsImF1dG9jbGlja2Vyc2V0dGluZ3MiLCJhdXRvY2xpY2tlckVsZW1lbnQiLCJzbGlwcGVyeUVsZW1lbnQiLCJhdXRvc3ByaW50RWxlbWVudCIsImF1dG93dGFwRWxlbWVudCIsInNwZWVkRWxlbWVudCIsInNwZWVkc2V0dGluZ3MiLCJjdXJzb3IiLCJyZXR1cm5qZXRwYWNrdG9nZ2xlIiwiaW5uZXJUZXh0IiwicmV0dXJuU3RlcFRvZ2dsZSIsInJldHVyblNwaWRlclRvZ2dsZSIsInJldHVybk5vZmFsbFRvZ2dsZSIsInJldHVybkZ1bGxicmlnaHRUb2dnbGUiLCJyZXR1cm5ub3dlYlRvZ2dsZSIsInJldHVybmF1dG9jbGlja2VydG9nZ2xlIiwicmV0dXJuc2xpcHBlcnl0b2dnbGUiLCJyZXR1cm5hdXRvc3ByaW50dG9nZ2xlIiwicmV0dXJuYXV0b3d0YXB0b2dnbGUiLCJyZXR1cm5zcGVlZHRvZ2dsZSIsInNldFN0ZXBUb2dnbGUiLCJzZXRTcGlkZXJUb2dnbGUiLCJzZXROb2ZhbGxUb2dnbGUiLCJzZXRGdWxsYnJpZ2h0VG9nZ2xlIiwic2V0amV0cGFja3RvZ2dsZSIsImpldHBhY2tmb3JjZSIsInByb21wdCIsInJldHVybmpldHBhY2tmb3JjZSIsIm51bWpldHBhY2tmb3JjZSIsIk51bWJlciIsImFsZXJ0Iiwic2V0amV0cGFja2ZvcmNlIiwic2V0bm93ZWJUb2dnbGUiLCJzZXRhdXRvY2xpY2tlcnRvZ2dsZSIsImNsaWNrZXJjYW5jZWxlZCIsImNsaWNrZXJtb2RlIiwibnVtbW9kZSIsImNvbnNvbGUiLCJsb2ciLCJzZXRhdXRvY2xpY2tlcm1vZGUiLCJkZWxheSIsIm51bWRlbGF5Iiwic2V0cmlnaHRjbGlja2RlbGF5Iiwic2V0bGVmdGNsaWNrZGVsYXkiLCJzZXRzbGlwcGVyeVRvZ2dsZSIsInNldGF1dG93dGFwdG9nZ2xlIiwic2V0YXV0b3NwcmludHRvZ2dsZSIsInNldHNwZWVkdG9nZ2xlIiwic3BlZWR2YWx1ZSIsInJldHVybnNwZWVkdmFsdWUiLCJudW1zcGVlZHZhbHVlIiwic2V0c3BlZWR2YWx1ZSIsInNob3dHdWkiLCJyZXR1cm5pc2pldHBhY2tmbHlpbmciLCJyZWdpc3RlcmpldHBhY2siLCJqZXRwYWNrZ3VpYWN0aXZlIiwiamV0cGFja0FjdGl2ZSIsInJlcXVpcmUiLCJtb3Rpb25ZIiwicmVsb2FkIiwidGhlQm9vbGVhbiIsInRoZU51bWJlciIsInNsaXBwZXJ5dG9nZ2xlIiwicmVnaXN0ZXJzcGVlZCIsInNwZWVkYWN0aXZlIiwicHJleCIsIm1vdGlvblgiLCJwcmV6IiwibW90aW9uWiIsIm9uR3JvdW5kIiwicmV0dXJucmlnaHRjbGlja2RlbGF5IiwicmV0dXJubGVmdGNsaWNrZGVsYXkiLCJyZXR1cm5hdXRvY2xpY2tlcm1vZGUiLCJyZWdpc3RlcmF1dG9jbGlja2VyIiwiYXV0b2NsaWNrZXJUb2dnbGUiLCJtb2RlIiwibGVmdGNsaWNrZGVsYXkiLCJsZWZ0Y2xpY2t0aW1lciIsInJpZ2h0Y2xpY2tkZWxheSIsInJpZ2h0Y2xpY2t0aW1lciIsInJpZ2h0Q2xpY2tNb3VzZSIsImNsaWNrTW91c2UiLCJ0aGVzdHJpbmciLCJ0aGVudW1iZXIxIiwidGhlbnVtYmVyMiIsInJlZ2lzdGVyYXV0b3NwcmludCIsImF1dG9zcHJpbnRhY3RpdmUiLCJzZXRTcHJpbnRpbmciLCJmbGFnIiwicmVnaXN0ZXJ3dGFwIiwiYXV0b3d0YXBhY3RpdmUiLCJjb29sZG93biIsImlzU3dpbmdJblByb2dyZXNzIiwicmVnaXN0ZXJOb2ZhbGwiLCJub2ZhbGxUb2dnbGUiLCJmYWxsRGlzdGFuY2UiLCJzZW5kUGFja2V0UGxheWVyIiwiaXNPbkdyb3VuZCIsInJlZ2lzdGVybm93ZWIiLCJub3dlYlRvZ2dsZSIsImlzSW5XZWIiLCJyZWdpc3RlclNwaWRlciIsInNwaWRlclRvZ2dsZSIsImlzQ29sbGlkZWRIb3Jpem9udGFsbHkiLCJyZWdpc3RlclN0ZXAiLCJzdGVwVG9nZ2xlIiwic3RlcEhlaWdodCIsInJlZ2lzdGVyRnVsbGJyaWdodCIsImZ1bGxicmlnaHRUb2dnbGUiLCJibG9ja3MiLCJhaXIiLCJsaWdodFZhbHVlIiwiZGlzcGxheVRvQ2hhdCIsIm1zZyIsIk1ldGVvclhmYWlsdXJlIiwiTWV0ZW9yWHdhcm5pbmciLCJjaGF0XzEiLCJ0ZXh0IiwidGVtcElucHV0Iiwic2VsZWN0IiwiZXhlY0NvbW1hbmQiLCJyZW1vdmVDaGlsZCIsImFkZHRvcGxheWVyenBvcyIsImFkZHRvcGxheWVyeXBvcyIsImFkZHRvcGxheWVyeHBvcyIsInJlZ2lzdGVydHBzIiwiY3VycmVudFRwcyIsImxhc3RUaW1lIiwibGFzdEFnZSIsImFnZSIsInRvdGFsV29ybGRUaW1lIiwidGltZSIsIkRhdGUiLCJnZXRUaW1lIiwiZGlmZkFnZSIsImRpZmZUaW1lIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImQiLCJkZWZpbml0aW9uIiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsImd1aV8xIiwiY21kc18xIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9