(()=>{"use strict";var e,t,r,n,o,l,i,a,c,u,g,s={948:(e,t,r)=>{function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}r.d(t,{ZP:()=>g});var o=function(){function e(e){this.word=e.trim(),this.replacedWords=new Set}var t=e.prototype;return t.replace=function(e,t,r){if(void 0===r&&(r=!1),!r&&function(e,t,r){return Array.from(r).some((function(r){return r.replace(e,t)!==r}))}(e,t,this.replacedWords))return this;var o=this.word.replace(e,t).trim(),l=this.word.match(e),i=null!==l?Array.from(l).map((function(e){return e.replace(e,t)})):[];if(o!==this.word){for(var a,c=function(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(r)return(r=r.call(e)).next.bind(r);if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var o=0;return function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(i);!(a=c()).done;){var u=a.value;this.replacedWords.add(u)}this.word=o}return this},t.toString=function(){return this.word},e}(),l=["(・`ω´・)",";;w;;","owo","UwU",">w<","^w^","(* ^ ω ^)","(⌒ω⌒)","ヽ(*・ω・)ﾉ","(o´∀`o)","(o･ω･o)","＼(＾▽＾)／"],i=[function(e){return e.replace(/([Ff])uc/g,"$1wuc")},function(e){return e.replace(/([Mm])om/g,"$1wom")},function(e){return e.replace(/\b([Tt])ime\b/g,"$1im")},function(e){return e.replace(/^Me$/g,"Mwe").replace(/^me$/g,"mwe")},function(e){return e.replace(/([Oo])ver/g,"$1wor")},function(e){return e.replace(/ove/g,"uv").replace(/OVE/g,"UV")},function(e){return e.replace(/\b(ha|hah|heh|hehe)+\b/g,"hehe xD")},function(e){return e.replace(/\b([Tt])he\b/g,"$1eh")},function(e){return e.replace(/\bYou\b/g,"U").replace(/\byou\b/g,"u")},function(e){return e.replace(/Read/g,"Wead").replace(/read/g,"wead")},function(e){return e.replace(/([Ww])orse/g,"$1ose")},function(e){return e.replace(/([Gg])reat/g,"$1wate")},function(e){return e.replace(/([Aa])viat/g,"$1wiat")},function(e){return e.replace(/([Dd])edicat/g,"$1editat")},function(e){return e.replace(/([Rr])emember/g,"$1ember")},function(e){return e.replace(/([Ww])hen/g,"$1en")},function(e){return e.replace(/([Ff])righten(ed)*/g,"$1rigten")},function(e){return e.replace(/Meme/g,"mem").replace(/Mem/g,"Mem")},function(e){return e.replace(/^([Ff])eel$/g,"$1ell")}],a=[function(e){return e.replace(/o/g,(function(){return Math.round(Math.random())?"owo":"o"}))},function(e){return e.replace(/ew/g,"uwu")},function(e){return e.replace(/([Hh])ey/g,"$1ay")},function(e){return e.replace(/Dead/g,"Ded").replace(/dead/g,"ded")},function(e){return e.replace(/n[aeiou]*t/g,"nd")}],c=[function(e){return e.replace(/[({<]/g,"｡･:*:･ﾟ★,｡･:*:･ﾟ☆").replace(/[)}>]/g,"☆ﾟ･:*:･｡,★ﾟ･:*:･｡")},function(e){return e.replace(/[.,](?![0-9])/g,(function(){return" "+l[Math.floor(Math.random()*l.length)]})).replace(/[!;]+/g,(function(){return" "+l[Math.floor(Math.random()*l.length)]}))},function(e){return e.replace(/that/g,"dat").replace(/That/g,"Dat")},function(e){return e.replace(/[Tt]h(?![Ee])/g,"f").replace(/TH(?!E)/g,"F")},function(e){return e.replace(/le$/g,"wal")},function(e){return e.replace(/ve/g,"we").replace(/Ve/g,"We")},function(e){return e.replace(/ry/g,"wwy")},function(e){return e.replace(/(?:r|l)/g,"w").replace(/(?:R|L)/g,"W")}],u=[function(e){return e.replace(/n([aeiou])/g,"ny$1").replace(/N([aeiou])/g,"Ny$1").replace(/N([AEIOU])/g,"NY$1")},function(e){return e.replace(/ll/g,"ww")},function(e){return e.replace(/[aeiur]l$/g,"wl").replace(/[AEIUR]([lL])$/g,"W$1")},function(e){return e.replace(/([Oo])ld/g,"$1wld").replace(/OLD/g,"OWLD")},function(e){return e.replace(/([Oo])l/g,"$1wl").replace(/OL/g,"OWL")},function(e){return e.replace(/[lr]o/g,"wo").replace(/[LR]([oO])/g,"W$1")},function(e){return e.replace(/([bcdfghjkmnpqstxyz])o/g,"$1wo").replace(/([BCDFGHJKMNPQSTXYZ])([oO])/g,(function(e,t,r){return t+(r.toUpperCase()===r?"W":"w")+r}))},function(e){return e.replace(/[vw]le/g,"wal")},function(e){return e.replace(/([Ff])i/g,"$1wi").replace(/FI/g,"FWI")},function(e){return e.replace(/([Vv])er/g,"wer")},function(e){return e.replace(/([Pp])oi/g,"$1woi")},function(e){return e.replace(/([DdFfGgHhJjPpQqRrSsTtXxYyZz])le$/g,"$1wal")},function(e){return e.replace(/([BbCcDdFfGgKkPpQqSsTtWwXxZz])r/g,"$1w")},function(e){return e.replace(/ly/g,"wy").replace(/Ly/g,"Wy")},function(e){return e.replace(/([Pp])le/g,"$1we")},function(e){return e.replace(/([Nn])r/g,"$1w").replace(/NR/g,"NW")},function(e){return e.replace(/Mem/g,"mwem").replace(/mem/g,"Mwem")},function(e){return e.replace(/([Nn])ywo/g,"$1yo",!0)}];const g=function(e,t){void 0===t&&(t="owo");var r=e.split(/[^\s]+/g),n=e.split(/\s+/g).map((function(e){return new o(e)}));return function(e,t){for(var r=[],n=e,o=t,l=null;n.length>0;)r.push(n.shift()),l=n,n=o,o=l;return o.length>0&&r.push.apply(r,o),r}(r,n=n.map((function(e){switch(i.reduce((function(e,t){return t(e)}),e),t){case"uvu":a.reduce((function(e,t){return t(e)}),e);case"uwu":c.reduce((function(e,t){return t(e)}),e);case"owo":u.reduce((function(e,t){return t(e)}),e)}return e}))).join("")}},54:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.registercmds=void 0;var n=r(948).ZP,o=r(998),l=r(666),i=r(315),a=r(222),c=null;PluginAPI.addEventListener("update",(function(){(0,i.gettps)()})),t.registercmds=function(){PluginAPI.addEventListener("packetjoingame",(function(e){c=e.ip})),PluginAPI.addEventListener("sendchatmessage",(function(e){if(".version"===e.message&&((0,o.MeteorXlog)("you are currently using the v1.1 version of MeteorX."),e.preventDefault=!0),".help"===e.message&&((0,o.MeteorXlog)("MeteorX commands : .version , .help , .ip , .uwuify , .mypos, .vclip, .tps, .copycords "),e.preventDefault=!0),".ip"===e.message&&((0,o.MeteorXlog)("the ip of the current server you are playing: "+c+" "),e.preventDefault=!0),".uwuify"===e.message&&((0,o.MeteorXlog)("usage: .uwuify [message]"),e.preventDefault=!0),e.message.startsWith(".uwuify ")){var t=7;if((d=e.message.toString().trim()).length>t&&".uwuify"===d.substring(0,t).trim().toLowerCase()){var r=d.substring(t+1),i=n(r);PluginAPI.network.sendPacketChatMessage({messageIn:i})}e.preventDefault=!0}if(".mypos"===e.message){PluginAPI.addEventListener("update",(function(){(0,l.updatePlayerPosition)()}));var u=Math.trunc(l.getplayerpos.x),g=Math.trunc(l.getplayerpos.y),s=Math.trunc(l.getplayerpos.z);(0,o.MeteorXlog)("your last reported cords(IRL(jk)):  x= "+u+" y= "+g+" z= "+s),e.preventDefault=!0}if(".vclip"===e.message&&((0,o.MeteorXlog)("usage: .vclip [value/blocks]"),e.preventDefault=!0),e.message.startsWith(".vclip ")){var d;if(t=6,(d=e.message.toString().trim()).length>t&&".vclip"===d.substring(0,t).trim().toLowerCase()){var p=d.substring(t+1),f=PluginAPI.player.isRiding();!1===f&&(PluginAPI.player.setPosition({x:PluginAPI.player.x,y:PluginAPI.player.y+p,z:PluginAPI.player.z}),(0,o.MeteorXsuccess)("successfully vclipped "+p+" blocks!")),!0===f&&(0,o.MeteorXerror)("you need to get off this mob/vehicle to use this command!"),isNaN(p)&&(0,o.MeteorXerror)("the amount of blocks needs to be a Number!")}e.preventDefault=!0}".tps"===e.message.toLowerCase()&&(e.preventDefault=!0,(0,o.MeteorXlog)("§9 Current server tps is §5~"+tps.toFixed(1))),".copycords"===e.message&&(PluginAPI.addEventListener("update",(function(){(0,l.updatePlayerPosition)()})),u=Math.trunc(l.getplayerpos.x),g=Math.trunc(l.getplayerpos.y),s=Math.trunc(l.getplayerpos.z),(0,a.copy)(" x= "+u+" y= "+g+" z= "+s),(0,o.MeteorXsuccess)("current cords copied to clipboard!"),e.preventDefault=!0)}))}},260:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.registergui=void 0;var n=r(619),o=r(537),l=r(965),i=r(713),a=r(128),c=r(193),u=r(85),g=r(499),s=r(137),d=r(122);t.registergui=function(){var e=!1;function t(){document.getElementById("myGui")&&document.getElementById("myGui").remove(),e=!1}window.addEventListener("keydown",(function(r){"Shift"===r.key&&r.location===KeyboardEvent.DOM_KEY_LOCATION_RIGHT&&(e?t():function(){t();var r=document.createElement("gui");null!=document.pointerLockElement&&document.exitPointerLock(),r.innerHTML='\n        <gui id="myGui" style="width: 100%;height: 100%;position: fixed;top: 0px;left: 0px;z-index: 10;color: white;font-family: Minecraftia, sans-serif;overflow: hidden scroll;background-color: rgba(80, 80, 80, 0.42);background-blend-mode: multiply;background-size: 64px;">\n        <h1 style="text-shadow: 0px 0px 4px;">MeteorX GUI</h1>\n        <p style="font-size: 0.8rem; color: yellow;">(totally not stolen from plugin manager\'s gui)</p><p style="font-size: 0.8rem; color: yellow;">ik the gui looks kinda bad for a hacked client but its meteorX alpha ig. i WILL update this gui in the future</p><p style="font-size: 0.8rem; color: orangered;">click on "Activate" to activate a hack and click on "Deactivate" to deactivate a hack</p>\n        <table style="table-layout: fixed; width: 100%;">\n            <tbody><tr style="background: rgb(80, 80, 80);">\n                <th style="text-align: center;">Hacks</th>\n                \n            <th style="text-align: center; width: 15%;">Settings</th><th style="text-align: center; width: 15%;">Activate/Deactivate</th></tr>\n            <tr style="box-shadow: grey 0px 2px 0px;">\n                <td style="user-select: text;background-color: #9d00ff30;">Jetpack (hold space to fly) 🎒💨</td>\n                                \n\n            <td style="background-color: #e59400;text-align: center;" id="jetpacksettings">Settings</td><td style="background-color: gray;text-align: center;" id="jetpack">Activate</td></tr>\n            <tr style="box-shadow: grey 0px 2px 0px;">\n                <td style="user-select: text;background-color: #9d00ff30;">Step</td>\n                <td style="background-color: #9d00ff30;text-align: center;"></td><td style="background-color: gray; text-align: center;" id="step">Activate</td>\n            </tr>\n            <tr style="box-shadow: grey 0px 2px 0px;">\n                <td style="user-select: text;background-color: #9d00ff30;">Spider</td>\n                <td style="background-color: #9d00ff30;text-align: center;"></td><td style="background-color: gray; text-align: center;" id="spider">Activate</td>\n            </tr>\n            <tr style="box-shadow: grey 0px 2px 0px;">\n                <td style="user-select: text;background-color: #9d00ff30;">Nofall</td>\n                <td style="background-color: #9d00ff30;text-align: center;"></td><td style="background-color: gray; text-align: center;" id="nofall">Activate</td>\n            </tr>\n            <tr style="box-shadow: grey 0px 2px 0px;">\n                <td style="user-select: text;background-color: #9d00ff30;">Fullbright</td>\n                <td style="background-color: #9d00ff30;text-align: center;"></td><td style="background-color: gray; text-align: center;" id="fullbright">Activate</td>\n            </tr>\n            <tr style="box-shadow: grey 0px 2px 0px;"> \n            <td style="user-select: text;background-color: #9d00ff30;">NoWeb</td> \n            <td style="background-color: #9d00ff30;text-align: center;"></td><td style="background-color: gray;text-align: center;" id="noweb">Activate</td> \n            </tr> \n            <tr style="box-shadow: grey 0px 2px 0px;"> \n            <td style="user-select: text;background-color: #9d00ff30;">Autoclicker</td> \n             \n            <td style="background-color: #e59400;text-align: center;" id="autoclickersettings">Settings</td><td style="background-color: gray;text-align: center;" id="autoclicker">Activate</td>\n\n            </tr> \n            <tr style="box-shadow: grey 0px 2px 0px;"> \n            <td style="user-select: text;background-color: #9d00ff30;">slipperymod</td> \n            <td style="background-color: #9d00ff30;text-align: center;"></td><td style="background-color: gray;text-align: center;" id="slippery">Activate</td> \n            </tr> \n            <tr style="box-shadow: grey 0px 2px 0px;"> \n            <td style="user-select: text;background-color: #9d00ff30;">autosprint</td> \n            <td style="background-color: #9d00ff30;text-align: center;"></td><td style="background-color: gray;text-align: center;" id="autosprint">Activate</td> \n            </tr> \n            <tr style="box-shadow: grey 0px 2px 0px;"> \n            <td style="user-select: text;background-color: #9d00ff30;">autowtap</td> \n            <td style="background-color: #9d00ff30;text-align: center;"></td><td style="background-color: gray;text-align: center;" id="autowtap">Activate</td> \n            </tr> \n        </tbody></table>\n        <a style="background: transparent; text-align: center; color: yellow; cursor: pointer; font-family: Minecraftia, sans-serif; text-decoration: underline; border: 0px; margin-right: 1rem; font-size: 1rem;" href="https://github.com/radmanplays/MeteorX-ts/issues/new" target="_blank">suggest a new feature/hack</a>\n        <a style="background: transparent;text-align: center;color: orange;cursor: pointer;font-family: Minecraftia, sans-serif;text-decoration: underline;border: 0px;font-size: 1rem;" href="https://github.com/orgs/EaglerReborn/discussions/9" target="_blank">version Roadmap</a>\n        \n          </gui>\n        ',r.id="myGui",r.style.width="100%",r.style.height="100%",r.style.position="fixed",r.style.top="0px",r.style.left="0px",r.style.zIndex="100",r.style.color="white",r.style.fontFamily="Minecraftia, sans-serif",r.style.overflow="hidden scroll",r.style.backgroundColor="rgba(80, 80, 80, 0.42)",r.style.backgroundBlendMode="multiply",r.style.backgroundSize="64px",document.body.appendChild(r),e=!0;var p=document.getElementById("jetpack"),f=document.getElementById("jetpacksettings"),y=document.getElementById("step"),v=document.getElementById("spider"),b=document.getElementById("nofall"),k=document.getElementById("fullbright"),m=document.getElementById("noweb"),h=document.getElementById("autoclickersettings"),x=document.getElementById("autoclicker"),P=document.getElementById("slippery"),w=document.getElementById("autosprint"),T=document.getElementById("autosprint");p.addEventListener("mouseover",(function(){p.style.cursor="pointer"})),f.addEventListener("mouseover",(function(){h.style.cursor="pointer"})),y.addEventListener("mouseover",(function(){y.style.cursor="pointer"})),v.addEventListener("mouseover",(function(){v.style.cursor="pointer"})),b.addEventListener("mouseover",(function(){b.style.cursor="pointer"})),k.addEventListener("mouseover",(function(){k.style.cursor="pointer"})),m.addEventListener("mouseover",(function(){m.style.cursor="pointer"})),h.addEventListener("mouseover",(function(){h.style.cursor="pointer"})),x.addEventListener("mouseover",(function(){x.style.cursor="pointer"})),P.addEventListener("mouseover",(function(){P.style.cursor="pointer"})),w.addEventListener("mouseover",(function(){w.style.cursor="pointer"})),T.addEventListener("mouseover",(function(){T.style.cursor="pointer"})),!1===(0,a.returnjetpacktoggle)()&&(p.innerText="Activate",p.style.backgroundColor="green"),!1===(0,n.returnStepToggle)()&&(y.innerText="Activate",y.style.backgroundColor="green"),!1===(0,o.returnSpiderToggle)()&&(v.innerText="Activate",v.style.backgroundColor="green"),!1===(0,l.returnNofallToggle)()&&(b.innerText="Activate",b.style.backgroundColor="green"),!1===(0,i.returnFullbrightToggle)()&&(k.innerText="Activate",k.style.backgroundColor="green"),!1===(0,c.returnnowebToggle)()&&(m.innerText="Activate",m.style.backgroundColor="green"),!1===(0,u.returnautoclickertoggle)()&&(x.innerText="Activate",x.style.backgroundColor="green"),!1===(0,g.returnslipperytoggle)()&&(P.innerText="Activate",P.style.backgroundColor="green"),!1===(0,s.returnautosprinttoggle)()&&(w.innerText="Activate",w.style.backgroundColor="green"),!1===(0,s.returnautosprinttoggle)()&&(T.innerText="Activate",T.style.backgroundColor="green"),!0===(0,a.returnjetpacktoggle)()&&(p.innerText="Deactivate",p.style.backgroundColor="red"),!0===(0,n.returnStepToggle)()&&(y.innerText="Deactivate",y.style.backgroundColor="red"),!0===(0,o.returnSpiderToggle)()&&(v.innerText="Deactivate",v.style.backgroundColor="red"),!0===(0,l.returnNofallToggle)()&&(b.innerText="Deactivate",b.style.backgroundColor="red"),!0===(0,i.returnFullbrightToggle)()&&(k.innerText="Deactivate",k.style.backgroundColor="red"),!0===(0,c.returnnowebToggle)()&&(m.innerText="Deactivate",m.style.backgroundColor="red"),!0===(0,u.returnautoclickertoggle)()&&(x.innerText="Deactivate",x.style.backgroundColor="red"),!0===(0,g.returnslipperytoggle)()&&(P.innerText="Deactivate",P.style.backgroundColor="red"),!0===(0,s.returnautosprinttoggle)()&&(w.innerText="Deactivate",w.style.backgroundColor="red"),!0===(0,d.returnautowtaptoggle)()&&(T.innerText="Deactivate",T.style.backgroundColor="red"),y.addEventListener("click",(function(){!0!==(0,n.returnStepToggle)()?(y.innerText="Deactivate",y.style.backgroundColor="red",(0,n.setStepToggle)(!0)):(y.innerText="Activate",y.style.backgroundColor="green",(0,n.setStepToggle)(!1))})),v.addEventListener("click",(function(){!0!==(0,o.returnSpiderToggle)()?(v.innerText="Deactivate",v.style.backgroundColor="red",(0,o.setSpiderToggle)(!0)):(v.innerText="Activate",v.style.backgroundColor="green",(0,o.setSpiderToggle)(!1))})),b.addEventListener("click",(function(){!0!==(0,l.returnNofallToggle)()?(b.innerText="Deactivate",b.style.backgroundColor="red",(0,l.setNofallToggle)(!0)):(b.innerText="Activate",b.style.backgroundColor="green",(0,l.setNofallToggle)(!1))})),k.addEventListener("click",(function(){!0!==(0,i.returnFullbrightToggle)()?(k.innerText="Deactivate",k.style.backgroundColor="red",(0,i.setFullbrightToggle)(!0)):(k.innerText="Activate",k.style.backgroundColor="green",(0,i.setFullbrightToggle)(!1))})),p.addEventListener("click",(function(){!0!==(0,a.returnjetpacktoggle)()?(p.innerText="Deactivate",p.style.backgroundColor="red",(0,a.setjetpacktoggle)(!0)):(p.innerText="Activate",p.style.backgroundColor="green",(0,a.setjetpacktoggle)(!1))})),f.addEventListener("click",(function(){var e=prompt("choose the force for jetpack.(more than 0.2 might trigger anticheats)\ndefault : 0.2 \ncurrent : "+(0,a.returnjetpackforce)()),t=Number(e);isNaN(t)&&(alert("jetpackforce is NAN (not a number) setting jetpackforce to default"),(0,a.setjetpackforce)(.2)),null==e||""==e?(alert("User cancelled the prompt.\n setting jetpackforce to default (0.2)"),(0,a.setjetpackforce)(.2)):(alert("jetpackforce set to "+e),(0,a.setjetpackforce)(t))})),m.addEventListener("click",(function(){!0!==(0,c.returnnowebToggle)()?(m.innerText="Deactivate",m.style.backgroundColor="red",(0,c.setnowebToggle)(!0)):(m.innerText="Activate",m.style.backgroundColor="green",(0,c.setnowebToggle)(!1))})),x.addEventListener("click",(function(){!0!==(0,u.returnautoclickertoggle)()?(x.innerText="Deactivate",x.style.backgroundColor="red",(0,u.setautoclickertoggle)(!0)):(x.innerText="Activate",x.style.backgroundColor="green",(0,u.setautoclickertoggle)(!1))})),h.addEventListener("click",(function(){var e=!1,t=prompt("choose mode (by entering a numberin the box below): \n [1] rightclick \n [2] leftclick","2"),r=Number(t);if(null==t||""==t?(console.log("User cancelled the prompt.\n mode set to default(leftclick)"),(0,u.setautoclickermode)("leftclick"),e=!0):"1"===t?(0,u.setautoclickermode)("rightclick"):"2"===t?(0,u.setautoclickermode)("leftclick"):(isNaN(r),alert("invalid input("+t+") please press the settings button again \n and choose the clicking mode that you want"),e=!0),!e){var n=prompt("enter delay between clicks (per tick (20 ticks = 1 second))\n (example : 10) \n (examples not to enter: 69.420) :","20"),o=Number(n);null==n?alert("User cancelled the delay prompt.\n delay set to default (20 ticks(1 cps))"):"1"===t?(0,u.setrightclickdelay)(o):"2"===t?(0,u.setleftclickdelay)(o):isNaN(o)&&alert("the delay that you chose("+n+") is NOT A NUMBER,\nplease press the settings button again and \n choose the delay that you want")}})),P.addEventListener("click",(function(){!0!==(0,g.returnslipperytoggle)()?(P.innerText="Deactivate",P.style.backgroundColor="red",(0,g.setslipperyToggle)(!0)):(P.innerText="Activate",P.style.backgroundColor="green",(0,g.setslipperyToggle)(!1))})),w.addEventListener("click",(function(){!0!==(0,s.returnautosprinttoggle)()?(w.innerText="Deactivate",w.style.backgroundColor="red",(0,s.setautosprinttoggle)(!0)):(w.innerText="Activate",w.style.backgroundColor="green",(0,s.setautosprinttoggle)(!1)),1==(0,d.returnautowtaptoggle)()&&1==(0,s.returnautosprinttoggle)()&&(T.innerText="Activate",T.style.backgroundColor="green",(0,d.setautowtaptoggle)(!1))})),T.addEventListener("click",(function(){!0!==(0,d.returnautowtaptoggle)()?(T.innerText="Deactivate",T.style.backgroundColor="red",(0,d.setautowtaptoggle)(!0)):(T.innerText="Activate",T.style.backgroundColor="green",(0,d.setautowtaptoggle)(!1)),1==(0,s.returnautosprinttoggle)()&&1==(0,d.returnautowtaptoggle)()&&(w.innerText="Activate",w.style.backgroundColor="green",(0,s.setautosprinttoggle)(!1))}))}()),"Escape"!==r.key&&"`"!==r.key||t()}))}},85:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnrightclickdelay=t.setrightclickdelay=t.returnleftclickdelay=t.setleftclickdelay=t.returnautoclickermode=t.setautoclickermode=t.returnautoclickertoggle=t.setautoclickertoggle=t.registerautoclicker=void 0;var r=!1,n="leftclick",o=20,l=0,i=20,a=0;t.registerautoclicker=function(){PluginAPI.addEventListener("update",(function(){1==r&&("rightclick"===n&&++a>i&&(PluginAPI.rightClickMouse(),a=0),"leftclick"===n&&++l>o&&(PluginAPI.clickMouse(),l=0),PluginAPI.player.reload())}))},t.setautoclickertoggle=function(e){r=e},t.returnautoclickertoggle=function(){return r},t.setautoclickermode=function(e){n=e},t.returnautoclickermode=function(){return n},t.setleftclickdelay=function(e){o=e},t.returnleftclickdelay=function(){return o},t.setrightclickdelay=function(e){i=e},t.returnrightclickdelay=function(){return i}},137:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnautosprinttoggle=t.setautosprinttoggle=t.registerautosprint=void 0;var r=!1;t.registerautosprint=function(){PluginAPI.require("player"),PluginAPI.addEventListener("update",(function(){r&&PluginAPI.player.setSprinting({flag:!0})}))},t.setautosprinttoggle=function(e){r=e},t.returnautosprinttoggle=function(){return r}},122:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnautowtaptoggle=t.setautowtaptoggle=t.registerwtap=void 0;var r=!1;t.registerwtap=function(){var e=0;PluginAPI.addEventListener("update",(function(){r&&(e=-1,PluginAPI.player.setSprinting({flag:!0}),pluginAPI.player.isSwingInProgress()&&e<0&&(PluginAPI.player.setSprinting({flag:!1}),e=3))}))},t.setautowtaptoggle=function(e){r=e},t.returnautowtaptoggle=function(){return r}},713:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnFullbrightToggle=t.setFullbrightToggle=t.registerFullbright=void 0;var r=!1;t.registerFullbright=function(){PluginAPI.addEventListener("update",(function(){0==r?(PluginAPI.blocks.air.lightValue=0,PluginAPI.blocks.air.reload()):(PluginAPI.blocks.air.lightValue=10,PluginAPI.blocks.air.reload())}))},t.setFullbrightToggle=function(e){r=e},t.returnFullbrightToggle=function(){return r}},128:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnjetpackforce=t.setjetpackforce=t.returnjetpacktoggle=t.setjetpacktoggle=t.registerjetpack=void 0;var r=!1,n=.2;t.registerjetpack=function(){PluginAPI.require("player");var e=!1;window.addEventListener("keydown",(function(t){" "===t.key.toLowerCase()&&(e=!0)})),window.addEventListener("keyup",(function(t){" "===t.key.toLowerCase()&&(e=!1)})),PluginAPI.addEventListener("update",(function(){if(1==r&&null!=document.pointerLockElement){if(!e)return;PluginAPI.player.motionY+=n,PluginAPI.player.reload()}}))},t.setjetpacktoggle=function(e){r=e},t.returnjetpacktoggle=function(){return r},t.setjetpackforce=function(e){n=e},t.returnjetpackforce=function(){return n}},965:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnNofallToggle=t.setNofallToggle=t.registerNofall=void 0;var r=!1;t.registerNofall=function(){PluginAPI.require("network"),PluginAPI.addEventListener("update",(function(){PluginAPI.player.fallDistance>2&&r&&PluginAPI.network.sendPacketPlayer({isOnGround:!0})}))},t.setNofallToggle=function(e){r=e},t.returnNofallToggle=function(){return r}},193:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnnowebToggle=t.setnowebToggle=t.registernoweb=void 0;var r=!1;t.registernoweb=function(){PluginAPI.require("player"),PluginAPI.addEventListener("update",(function(){1==r&&(PluginAPI.player.isInWeb=!1,PluginAPI.player.reload())}))},t.setnowebToggle=function(e){r=e},t.returnnowebToggle=function(){return r}},499:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnslipperytoggle=t.setslipperyToggle=void 0;var r=!1;t.setslipperyToggle=function(e){r=e},t.returnslipperytoggle=function(){return r}},537:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnSpiderToggle=t.setSpiderToggle=t.registerSpider=void 0;var r=!1;t.registerSpider=function(){PluginAPI.require("player"),PluginAPI.addEventListener("update",(function(){PluginAPI.player.isCollidedHorizontally&&1==r&&(PluginAPI.player.motionY=.2,PluginAPI.player.reload())}))},t.setSpiderToggle=function(e){r=e},t.returnSpiderToggle=function(){return r}},619:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnStepToggle=t.setStepToggle=t.registerStep=void 0;var r=!1;t.registerStep=function(){PluginAPI.addEventListener("update",(function(){1==r?(PluginAPI.player.stepHeight=1,PluginAPI.player.reload()):(PluginAPI.player.stepHeight=.5,PluginAPI.player.reload())}))},t.setStepToggle=function(e){r=e},t.returnStepToggle=function(){return r}},665:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.displayToChat=void 0,t.displayToChat=function(e){PluginAPI.displayToChat({msg:e})}},998:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MeteorXfailure=t.MeteorXsuccess=t.MeteorXerror=t.MeteorXwarning=t.MeteorXlog=void 0;var n=r(665);t.MeteorXlog=function(e){(0,n.displayToChat)("§c[§6MeteorX§c]§f "+e)},t.MeteorXwarning=function(e){(0,n.displayToChat)("§c[§6§lWARNING§c]§f "+e)},t.MeteorXerror=function(e){(0,n.displayToChat)("§c[§4§lERROR§c]§f "+e)},t.MeteorXsuccess=function(e){(0,n.displayToChat)("§a[§2§lSUCCESS§a]§f "+e)},t.MeteorXfailure=function(e){(0,n.displayToChat)("§c[§4§lFAILURE§c]§f "+e)}},222:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.copy=void 0,t.copy=function(e){var t=document.createElement("input");t.value=e,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t)}},666:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.updatePlayerPosition=t.getplayerpos=t.addtoplayerzpos=t.addtoplayerypos=t.addtoplayerxpos=void 0,PluginAPI.require("player");var r={x:0,y:0,z:0};t.getplayerpos=r,t.updatePlayerPosition=function(){r.x=PluginAPI.player.x,r.y=PluginAPI.player.y,r.z=PluginAPI.player.z,PluginAPI.player.reload()},t.addtoplayerxpos=function(e){PluginAPI.player.x+=e},t.addtoplayerypos=function(e){PluginAPI.player.y+=e},t.addtoplayerzpos=function(e){PluginAPI.player.z+=e}},315:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.gettps=t.registertps=void 0;var r=0;t.registertps=function(){var e,t=-1;PluginAPI.addEventListener("packettimeupdate",(function(n){var o=n.totalWorldTime,l=(new Date).getTime();-1==t&&(e=l,t=o);var i=o-t,a=l-e;t=o,e=l,r=i/(a/1e3)}))},t.gettps=function(){return r}}},d={};function p(e){var t=d[e];if(void 0!==t)return t.exports;var r=d[e]={exports:{}};return s[e](r,r.exports,p),r.exports}p.d=(e,t)=>{for(var r in t)p.o(t,r)&&!p.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},p.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e=p(260),t=p(537),r=p(619),n=p(965),o=p(128),l=p(713),i=p(54),a=p(193),c=p(315),u=p(137),g=p(122),console.log("[MeteorX] Loading client..."),(0,i.registercmds)(),(0,a.registernoweb)(),(0,e.registergui)(),(0,o.registerjetpack)(),(0,t.registerSpider)(),(0,r.registerStep)(),(0,n.registerNofall)(),(0,l.registerFullbright)(),(0,c.registertps)(),(0,u.registerautosprint)(),(0,g.registerwtap)(),console.log("[MeteorX] Finished loading client!")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,