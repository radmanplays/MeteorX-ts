(()=>{"use strict";var e,t,r,n,o,l,i,a,c,u={948:(e,t,r)=>{function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}r.d(t,{ZP:()=>g});var o=function(){function e(e){this.word=e.trim(),this.replacedWords=new Set}var t=e.prototype;return t.replace=function(e,t,r){if(void 0===r&&(r=!1),!r&&function(e,t,r){return Array.from(r).some((function(r){return r.replace(e,t)!==r}))}(e,t,this.replacedWords))return this;var o=this.word.replace(e,t).trim(),l=this.word.match(e),i=null!==l?Array.from(l).map((function(e){return e.replace(e,t)})):[];if(o!==this.word){for(var a,c=function(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(r)return(r=r.call(e)).next.bind(r);if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var o=0;return function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(i);!(a=c()).done;){var u=a.value;this.replacedWords.add(u)}this.word=o}return this},t.toString=function(){return this.word},e}(),l=["(・`ω´・)",";;w;;","owo","UwU",">w<","^w^","(* ^ ω ^)","(⌒ω⌒)","ヽ(*・ω・)ﾉ","(o´∀`o)","(o･ω･o)","＼(＾▽＾)／"],i=[function(e){return e.replace(/([Ff])uc/g,"$1wuc")},function(e){return e.replace(/([Mm])om/g,"$1wom")},function(e){return e.replace(/\b([Tt])ime\b/g,"$1im")},function(e){return e.replace(/^Me$/g,"Mwe").replace(/^me$/g,"mwe")},function(e){return e.replace(/([Oo])ver/g,"$1wor")},function(e){return e.replace(/ove/g,"uv").replace(/OVE/g,"UV")},function(e){return e.replace(/\b(ha|hah|heh|hehe)+\b/g,"hehe xD")},function(e){return e.replace(/\b([Tt])he\b/g,"$1eh")},function(e){return e.replace(/\bYou\b/g,"U").replace(/\byou\b/g,"u")},function(e){return e.replace(/Read/g,"Wead").replace(/read/g,"wead")},function(e){return e.replace(/([Ww])orse/g,"$1ose")},function(e){return e.replace(/([Gg])reat/g,"$1wate")},function(e){return e.replace(/([Aa])viat/g,"$1wiat")},function(e){return e.replace(/([Dd])edicat/g,"$1editat")},function(e){return e.replace(/([Rr])emember/g,"$1ember")},function(e){return e.replace(/([Ww])hen/g,"$1en")},function(e){return e.replace(/([Ff])righten(ed)*/g,"$1rigten")},function(e){return e.replace(/Meme/g,"mem").replace(/Mem/g,"Mem")},function(e){return e.replace(/^([Ff])eel$/g,"$1ell")}],a=[function(e){return e.replace(/o/g,(function(){return Math.round(Math.random())?"owo":"o"}))},function(e){return e.replace(/ew/g,"uwu")},function(e){return e.replace(/([Hh])ey/g,"$1ay")},function(e){return e.replace(/Dead/g,"Ded").replace(/dead/g,"ded")},function(e){return e.replace(/n[aeiou]*t/g,"nd")}],c=[function(e){return e.replace(/[({<]/g,"｡･:*:･ﾟ★,｡･:*:･ﾟ☆").replace(/[)}>]/g,"☆ﾟ･:*:･｡,★ﾟ･:*:･｡")},function(e){return e.replace(/[.,](?![0-9])/g,(function(){return" "+l[Math.floor(Math.random()*l.length)]})).replace(/[!;]+/g,(function(){return" "+l[Math.floor(Math.random()*l.length)]}))},function(e){return e.replace(/that/g,"dat").replace(/That/g,"Dat")},function(e){return e.replace(/[Tt]h(?![Ee])/g,"f").replace(/TH(?!E)/g,"F")},function(e){return e.replace(/le$/g,"wal")},function(e){return e.replace(/ve/g,"we").replace(/Ve/g,"We")},function(e){return e.replace(/ry/g,"wwy")},function(e){return e.replace(/(?:r|l)/g,"w").replace(/(?:R|L)/g,"W")}],u=[function(e){return e.replace(/n([aeiou])/g,"ny$1").replace(/N([aeiou])/g,"Ny$1").replace(/N([AEIOU])/g,"NY$1")},function(e){return e.replace(/ll/g,"ww")},function(e){return e.replace(/[aeiur]l$/g,"wl").replace(/[AEIUR]([lL])$/g,"W$1")},function(e){return e.replace(/([Oo])ld/g,"$1wld").replace(/OLD/g,"OWLD")},function(e){return e.replace(/([Oo])l/g,"$1wl").replace(/OL/g,"OWL")},function(e){return e.replace(/[lr]o/g,"wo").replace(/[LR]([oO])/g,"W$1")},function(e){return e.replace(/([bcdfghjkmnpqstxyz])o/g,"$1wo").replace(/([BCDFGHJKMNPQSTXYZ])([oO])/g,(function(e,t,r){return t+(r.toUpperCase()===r?"W":"w")+r}))},function(e){return e.replace(/[vw]le/g,"wal")},function(e){return e.replace(/([Ff])i/g,"$1wi").replace(/FI/g,"FWI")},function(e){return e.replace(/([Vv])er/g,"wer")},function(e){return e.replace(/([Pp])oi/g,"$1woi")},function(e){return e.replace(/([DdFfGgHhJjPpQqRrSsTtXxYyZz])le$/g,"$1wal")},function(e){return e.replace(/([BbCcDdFfGgKkPpQqSsTtWwXxZz])r/g,"$1w")},function(e){return e.replace(/ly/g,"wy").replace(/Ly/g,"Wy")},function(e){return e.replace(/([Pp])le/g,"$1we")},function(e){return e.replace(/([Nn])r/g,"$1w").replace(/NR/g,"NW")},function(e){return e.replace(/Mem/g,"mwem").replace(/mem/g,"Mwem")},function(e){return e.replace(/([Nn])ywo/g,"$1yo",!0)}];const g=function(e,t){void 0===t&&(t="owo");var r=e.split(/[^\s]+/g),n=e.split(/\s+/g).map((function(e){return new o(e)}));return function(e,t){for(var r=[],n=e,o=t,l=null;n.length>0;)r.push(n.shift()),l=n,n=o,o=l;return o.length>0&&r.push.apply(r,o),r}(r,n=n.map((function(e){switch(i.reduce((function(e,t){return t(e)}),e),t){case"uvu":a.reduce((function(e,t){return t(e)}),e);case"uwu":c.reduce((function(e,t){return t(e)}),e);case"owo":u.reduce((function(e,t){return t(e)}),e)}return e}))).join("")}},54:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.registercmds=void 0;var n=r(948).ZP,o=r(998),l=r(666),i=r(315),a=r(222),c=null;PluginAPI.addEventListener("update",(function(){(0,i.gettps)()})),t.registercmds=function(){PluginAPI.addEventListener("packetjoingame",(function(e){c=e.ip})),PluginAPI.addEventListener("sendchatmessage",(function(e){if(".version"===e.message&&((0,o.MeteorXlog)("you are currently using the v1.1 version of MeteorX."),e.preventDefault=!0),".help"===e.message&&((0,o.MeteorXlog)("MeteorX commands : .version , .help , .ip , .uwuify , .mypos, .vclip, .tps, .copycords "),e.preventDefault=!0),".ip"===e.message&&((0,o.MeteorXlog)("the ip of the current server you are playing: "+c+" "),e.preventDefault=!0),".uwuify"===e.message&&((0,o.MeteorXlog)("usage: .uwuify [message]"),e.preventDefault=!0),e.message.startsWith(".uwuify ")){var t=7;if((d=e.message.toString().trim()).length>t&&".uwuify"===d.substring(0,t).trim().toLowerCase()){var r=d.substring(t+1),i=n(r);PluginAPI.network.sendPacketChatMessage({messageIn:i})}e.preventDefault=!0}if(".mypos"===e.message){PluginAPI.addEventListener("update",(function(){(0,l.updatePlayerPosition)()}));var u=Math.trunc(l.getplayerpos.x),g=Math.trunc(l.getplayerpos.y),s=Math.trunc(l.getplayerpos.z);(0,o.MeteorXlog)("your last reported cords(IRL(jk)):  x= "+u+" y= "+g+" z= "+s),e.preventDefault=!0}if(".vclip"===e.message&&((0,o.MeteorXlog)("usage: .vclip [value/blocks]"),e.preventDefault=!0),e.message.startsWith(".vclip ")){var d;if(t=6,(d=e.message.toString().trim()).length>t&&".vclip"===d.substring(0,t).trim().toLowerCase()){var p=d.substring(t+1),f=PluginAPI.player.isRiding();!1===f&&(PluginAPI.player.setPosition({x:PluginAPI.player.x,y:PluginAPI.player.y+p,z:PluginAPI.player.z}),(0,o.MeteorXsuccess)("successfully vclipped "+p+" blocks!")),!0===f&&(0,o.MeteorXerror)("you need to get off this mob/vehicle to use this command!"),isNaN(p)&&(0,o.MeteorXerror)("the amount of blocks needs to be a Number!")}e.preventDefault=!0}".tps"===e.message.toLowerCase()&&(e.preventDefault=!0,(0,o.MeteorXlog)("§9 Current server tps is §5~"+tps.toFixed(1))),".copycords"===e.message&&(PluginAPI.addEventListener("update",(function(){(0,l.updatePlayerPosition)()})),u=Math.trunc(l.getplayerpos.x),g=Math.trunc(l.getplayerpos.y),s=Math.trunc(l.getplayerpos.z),(0,a.copy)(" x= "+u+" y= "+g+" z= "+s),(0,o.MeteorXsuccess)("current cords copied to clipboard!"),e.preventDefault=!0)}))}},260:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.registergui=void 0;var n=r(619),o=r(537),l=r(965),i=r(713),a=r(128),c=r(193),u=r(85),g=r(499);t.registergui=function(){var e=!1;function t(){document.getElementById("myGui")&&document.getElementById("myGui").remove(),e=!1}window.addEventListener("keydown",(function(r){"Shift"===r.key&&r.location===KeyboardEvent.DOM_KEY_LOCATION_RIGHT&&(e?t():function(){t();var r=document.createElement("gui");null!=document.pointerLockElement&&document.exitPointerLock(),r.innerHTML='\n        <gui id="myGui" style="width: 100%;height: 100%;position: fixed;top: 0px;left: 0px;z-index: 10;color: white;font-family: Minecraftia, sans-serif;overflow: hidden scroll;background-color: rgba(80, 80, 80, 0.42);background-blend-mode: multiply;background-size: 64px;">\n        <h1 style="text-shadow: 0px 0px 4px;">MeteorX GUI</h1>\n        <p style="font-size: 0.8rem; color: yellow;">(totally not stolen from plugin manager\'s gui)</p><p style="font-size: 0.8rem; color: yellow;">ik the gui looks kinda bad for a hacked client but its meteorX alpha ig. i WILL update this gui in the future</p><p style="font-size: 0.8rem; color: orangered;">click on "Activate" to activate a hack and click on "Deactivate" to deactivate a hack</p>\n        <table style="table-layout: fixed; width: 100%;">\n            <tbody><tr style="background: rgb(80, 80, 80);">\n                <th style="text-align: center;">Hacks</th>\n                \n            <th style="text-align: center; width: 15%;">Settings</th><th style="text-align: center; width: 15%;">Activate/Deactivate</th></tr>\n            <tr style="box-shadow: grey 0px 2px 0px;">\n                <td style="user-select: text;background-color: #9d00ff30;">Jetpack (hold space to fly) 🎒💨</td>\n                                \n\n            <td style="background-color: #e59400;text-align: center;" id="jetpacksettings">Settings</td><td style="background-color: gray;text-align: center;" id="jetpack">Activate</td></tr>\n            <tr style="box-shadow: grey 0px 2px 0px;">\n                <td style="user-select: text;background-color: #9d00ff30;">Step</td>\n                <td style="background-color: #9d00ff30;text-align: center;"></td><td style="background-color: gray; text-align: center;" id="step">Activate</td>\n            </tr>\n            <tr style="box-shadow: grey 0px 2px 0px;">\n                <td style="user-select: text;background-color: #9d00ff30;">Spider</td>\n                <td style="background-color: #9d00ff30;text-align: center;"></td><td style="background-color: gray; text-align: center;" id="spider">Activate</td>\n            </tr>\n            <tr style="box-shadow: grey 0px 2px 0px;">\n                <td style="user-select: text;background-color: #9d00ff30;">Nofall</td>\n                <td style="background-color: #9d00ff30;text-align: center;"></td><td style="background-color: gray; text-align: center;" id="nofall">Activate</td>\n            </tr>\n            <tr style="box-shadow: grey 0px 2px 0px;">\n                <td style="user-select: text;background-color: #9d00ff30;">Fullbright</td>\n                <td style="background-color: #9d00ff30;text-align: center;"></td><td style="background-color: gray; text-align: center;" id="fullbright">Activate</td>\n            </tr>\n            <tr style="box-shadow: grey 0px 2px 0px;"> \n            <td style="user-select: text;background-color: #9d00ff30;">NoWeb</td> \n            <td style="background-color: #9d00ff30;text-align: center;"></td><td style="background-color: gray;text-align: center;" id="noweb">Activate</td> \n            </tr> \n            <tr style="box-shadow: grey 0px 2px 0px;"> \n            <td style="user-select: text;background-color: #9d00ff30;">Autoclicker</td> \n             \n            <td style="background-color: #e59400;text-align: center;" id="autoclickersettings">Settings</td><td style="background-color: gray;text-align: center;" id="autoclicker">Activate</td>\n\n            </tr> \n            <tr style="box-shadow: grey 0px 2px 0px;"> \n            <td style="user-select: text;background-color: #9d00ff30;">slipperymod</td> \n            <td style="background-color: #9d00ff30;text-align: center;"></td><td style="background-color: gray;text-align: center;" id="slippery">Activate</td> \n            </tr> \n        </tbody></table>\n        <a style="background: transparent; text-align: center; color: yellow; cursor: pointer; font-family: Minecraftia, sans-serif; text-decoration: underline; border: 0px; margin-right: 1rem; font-size: 1rem;" href="https://github.com/radmanplays/MeteorX-ts/issues/new" target="_blank">suggest a new feature/hack</a>\n        <a style="background: transparent;text-align: center;color: orange;cursor: pointer;font-family: Minecraftia, sans-serif;text-decoration: underline;border: 0px;font-size: 1rem;" href="https://github.com/orgs/EaglerReborn/discussions/9" target="_blank">version Roadmap</a>\n        \n          </gui>\n        ',r.id="myGui",r.style.width="100%",r.style.height="100%",r.style.position="fixed",r.style.top="0px",r.style.left="0px",r.style.zIndex="100",r.style.color="white",r.style.fontFamily="Minecraftia, sans-serif",r.style.overflow="hidden scroll",r.style.backgroundColor="rgba(80, 80, 80, 0.42)",r.style.backgroundBlendMode="multiply",r.style.backgroundSize="64px",document.body.appendChild(r),e=!0;var s=document.getElementById("jetpack"),d=document.getElementById("jetpacksettings"),p=document.getElementById("step"),f=document.getElementById("spider"),y=document.getElementById("nofall"),v=document.getElementById("fullbright"),b=document.getElementById("noweb"),k=document.getElementById("autoclickersettings"),m=document.getElementById("autoclicker"),h=document.getElementById("slippery");s.addEventListener("mouseover",(function(){s.style.cursor="pointer"})),d.addEventListener("mouseover",(function(){k.style.cursor="pointer"})),p.addEventListener("mouseover",(function(){p.style.cursor="pointer"})),f.addEventListener("mouseover",(function(){f.style.cursor="pointer"})),y.addEventListener("mouseover",(function(){y.style.cursor="pointer"})),v.addEventListener("mouseover",(function(){v.style.cursor="pointer"})),b.addEventListener("mouseover",(function(){b.style.cursor="pointer"})),k.addEventListener("mouseover",(function(){k.style.cursor="pointer"})),m.addEventListener("mouseover",(function(){m.style.cursor="pointer"})),h.addEventListener("mouseover",(function(){h.style.cursor="pointer"})),!1===(0,a.returnjetpacktoggle)()&&(s.innerText="Activate",s.style.backgroundColor="green"),!1===(0,n.returnStepToggle)()&&(p.innerText="Activate",p.style.backgroundColor="green"),!1===(0,o.returnSpiderToggle)()&&(f.innerText="Activate",f.style.backgroundColor="green"),!1===(0,l.returnNofallToggle)()&&(y.innerText="Activate",y.style.backgroundColor="green"),!1===(0,i.returnFullbrightToggle)()&&(v.innerText="Activate",v.style.backgroundColor="green"),!1===(0,c.returnnowebToggle)()&&(b.innerText="Activate",b.style.backgroundColor="green"),!1===(0,u.returnautoclickertoggle)()&&(m.innerText="Activate",m.style.backgroundColor="green"),!1===(0,g.returnslipperytoggle)()&&(h.innerText="Activate",h.style.backgroundColor="green"),!0===(0,a.returnjetpacktoggle)()&&(s.innerText="Deactivate",s.style.backgroundColor="red"),!0===(0,n.returnStepToggle)()&&(p.innerText="Deactivate",p.style.backgroundColor="red"),!0===(0,o.returnSpiderToggle)()&&(f.innerText="Deactivate",f.style.backgroundColor="red"),!0===(0,l.returnNofallToggle)()&&(y.innerText="Deactivate",y.style.backgroundColor="red"),!0===(0,i.returnFullbrightToggle)()&&(v.innerText="Deactivate",v.style.backgroundColor="red"),!0===(0,c.returnnowebToggle)()&&(b.innerText="Deactivate",b.style.backgroundColor="red"),!0===(0,u.returnautoclickertoggle)()&&(m.innerText="Deactivate",m.style.backgroundColor="red"),!0===(0,g.returnslipperytoggle)()&&(h.innerText="Deactivate",h.style.backgroundColor="red"),p.addEventListener("click",(function(){!0!==(0,n.returnStepToggle)()?(p.innerText="Deactivate",p.style.backgroundColor="red",(0,n.setStepToggle)(!0)):(p.innerText="Activate",p.style.backgroundColor="green",(0,n.setStepToggle)(!1))})),f.addEventListener("click",(function(){!0!==(0,o.returnSpiderToggle)()?(f.innerText="Deactivate",f.style.backgroundColor="red",(0,o.setSpiderToggle)(!0)):(f.innerText="Activate",f.style.backgroundColor="green",(0,o.setSpiderToggle)(!1))})),y.addEventListener("click",(function(){!0!==(0,l.returnNofallToggle)()?(y.innerText="Deactivate",y.style.backgroundColor="red",(0,l.setNofallToggle)(!0)):(y.innerText="Activate",y.style.backgroundColor="green",(0,l.setNofallToggle)(!1))})),v.addEventListener("click",(function(){!0!==(0,i.returnFullbrightToggle)()?(v.innerText="Deactivate",v.style.backgroundColor="red",(0,i.setFullbrightToggle)(!0)):(v.innerText="Activate",v.style.backgroundColor="green",(0,i.setFullbrightToggle)(!1))})),s.addEventListener("click",(function(){!0!==(0,a.returnjetpacktoggle)()?(s.innerText="Deactivate",s.style.backgroundColor="red",(0,a.setjetpacktoggle)(!0)):(s.innerText="Activate",s.style.backgroundColor="green",(0,a.setjetpacktoggle)(!1))})),d.addEventListener("click",(function(){var e=prompt("choose the force for jetpack.(more than 0.2 might trigger anticheats)\ndefault : 0.2 \ncurrent : "+(0,a.returnjetpackforce)()),t=Number(e);isNaN(t)&&(alert("jetpackforce is NAN (not a number) setting jetpackforce to default"),(0,a.setjetpackforce)(.2)),null==e||""==e?(alert("User cancelled the prompt.\n setting jetpackforce to default (0.2)"),(0,a.setjetpackforce)(.2)):(alert("jetpackforce set to "+e),(0,a.setjetpackforce)(t))})),b.addEventListener("click",(function(){!0!==(0,c.returnnowebToggle)()?(b.innerText="Deactivate",b.style.backgroundColor="red",(0,c.setnowebToggle)(!0)):(b.innerText="Activate",b.style.backgroundColor="green",(0,c.setnowebToggle)(!1))})),m.addEventListener("click",(function(){!0!==(0,u.returnautoclickertoggle)()?(m.innerText="Deactivate",m.style.backgroundColor="red",(0,u.setautoclickertoggle)(!0)):(m.innerText="Activate",m.style.backgroundColor="green",(0,u.setautoclickertoggle)(!1))})),k.addEventListener("click",(function(){var e=!1,t=prompt("choose mode (by entering a numberin the box below): \n [1] rightclick \n [2] leftclick","2"),r=Number(t);if(null==t||""==t?(console.log("User cancelled the prompt.\n mode set to default(leftclick)"),(0,u.setautoclickermode)("leftclick"),e=!0):"1"===t?(0,u.setautoclickermode)("rightclick"):"2"===t?(0,u.setautoclickermode)("leftclick"):(isNaN(r),alert("invalid input("+t+") please press the settings button again \n and choose the clicking mode that you want"),e=!0),!e){var n=prompt("enter delay between clicks (per tick (20 ticks = 1 second))\n (example : 10) \n (examples not to enter: 69.420) :","20"),o=Number(n);null==n?alert("User cancelled the delay prompt.\n delay set to default (20 ticks(1 cps))"):"1"===t?(0,u.setrightclickdelay)(o):"2"===t?(0,u.setleftclickdelay)(o):isNaN(o)&&alert("the delay that you chose("+n+") is NOT A NUMBER,\nplease press the settings button again and \n choose the delay that you want")}})),h.addEventListener("click",(function(){!0!==(0,g.returnslipperytoggle)()?(h.innerText="Deactivate",h.style.backgroundColor="red",(0,g.setslipperyToggle)(!0)):(h.innerText="Activate",h.style.backgroundColor="green",(0,g.setslipperyToggle)(!1))}))}()),"Escape"!==r.key&&"`"!==r.key||t()}))}},85:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnrightclickdelay=t.setrightclickdelay=t.returnleftclickdelay=t.setleftclickdelay=t.returnautoclickermode=t.setautoclickermode=t.returnautoclickertoggle=t.setautoclickertoggle=t.registerautoclicker=void 0;var r=!1,n="leftclick",o=20,l=0,i=20,a=0;t.registerautoclicker=function(){PluginAPI.addEventListener("update",(function(){1==r&&("rightclick"===n&&++a>i&&(PluginAPI.rightClickMouse(),a=0),"leftclick"===n&&++l>o&&(PluginAPI.clickMouse(),l=0),PluginAPI.player.reload())}))},t.setautoclickertoggle=function(e){r=e},t.returnautoclickertoggle=function(){return r},t.setautoclickermode=function(e){n=e},t.returnautoclickermode=function(){return n},t.setleftclickdelay=function(e){o=e},t.returnleftclickdelay=function(){return o},t.setrightclickdelay=function(e){i=e},t.returnrightclickdelay=function(){return i}},713:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnFullbrightToggle=t.setFullbrightToggle=t.registerFullbright=void 0;var r=!1;t.registerFullbright=function(){PluginAPI.addEventListener("update",(function(){0==r?(PluginAPI.blocks.air.lightValue=0,PluginAPI.blocks.air.reload()):(PluginAPI.blocks.air.lightValue=10,PluginAPI.blocks.air.reload())}))},t.setFullbrightToggle=function(e){r=e},t.returnFullbrightToggle=function(){return r}},128:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnjetpackforce=t.setjetpackforce=t.returnjetpacktoggle=t.setjetpacktoggle=t.registerjetpack=void 0;var r=!1,n=.2;t.registerjetpack=function(){PluginAPI.require("player");var e=!1;window.addEventListener("keydown",(function(t){" "===t.key.toLowerCase()&&(e=!0)})),window.addEventListener("keyup",(function(t){" "===t.key.toLowerCase()&&(e=!1)})),PluginAPI.addEventListener("update",(function(){if(1==r&&null!=document.pointerLockElement){if(!e)return;PluginAPI.player.motionY+=n,PluginAPI.player.reload()}}))},t.setjetpacktoggle=function(e){r=e},t.returnjetpacktoggle=function(){return r},t.setjetpackforce=function(e){n=e},t.returnjetpackforce=function(){return n}},965:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnNofallToggle=t.setNofallToggle=t.registerNofall=void 0;var r=!1;t.registerNofall=function(){PluginAPI.require("network"),PluginAPI.addEventListener("update",(function(){PluginAPI.player.fallDistance>2&&r&&PluginAPI.network.sendPacketPlayer({isOnGround:!0})}))},t.setNofallToggle=function(e){r=e},t.returnNofallToggle=function(){return r}},193:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnnowebToggle=t.setnowebToggle=t.registernoweb=void 0;var r=!1;t.registernoweb=function(){PluginAPI.require("player"),PluginAPI.addEventListener("update",(function(){1==r&&(PluginAPI.player.isInWeb=!1,PluginAPI.player.reload())}))},t.setnowebToggle=function(e){r=e},t.returnnowebToggle=function(){return r}},499:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnslipperytoggle=t.setslipperyToggle=void 0;var r=!1;t.setslipperyToggle=function(e){r=e},t.returnslipperytoggle=function(){return r}},537:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnSpiderToggle=t.setSpiderToggle=t.registerSpider=void 0;var r=!1;t.registerSpider=function(){PluginAPI.require("player"),PluginAPI.addEventListener("update",(function(){PluginAPI.player.isCollidedHorizontally&&1==r&&(PluginAPI.player.motionY=.2,PluginAPI.player.reload())}))},t.setSpiderToggle=function(e){r=e},t.returnSpiderToggle=function(){return r}},619:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.returnStepToggle=t.setStepToggle=t.registerStep=void 0;var r=!1;t.registerStep=function(){PluginAPI.addEventListener("update",(function(){1==r?(PluginAPI.player.stepHeight=1,PluginAPI.player.reload()):(PluginAPI.player.stepHeight=.5,PluginAPI.player.reload())}))},t.setStepToggle=function(e){r=e},t.returnStepToggle=function(){return r}},665:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.displayToChat=void 0,t.displayToChat=function(e){PluginAPI.displayToChat({msg:e})}},998:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MeteorXfailure=t.MeteorXsuccess=t.MeteorXerror=t.MeteorXwarning=t.MeteorXlog=void 0;var n=r(665);t.MeteorXlog=function(e){(0,n.displayToChat)("§c[§6MeteorX§c]§f "+e)},t.MeteorXwarning=function(e){(0,n.displayToChat)("§c[§6§lWARNING§c]§f "+e)},t.MeteorXerror=function(e){(0,n.displayToChat)("§c[§4§lERROR§c]§f "+e)},t.MeteorXsuccess=function(e){(0,n.displayToChat)("§a[§2§lSUCCESS§a]§f "+e)},t.MeteorXfailure=function(e){(0,n.displayToChat)("§c[§4§lFAILURE§c]§f "+e)}},222:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.copy=void 0,t.copy=function(e){var t=document.createElement("input");t.value=e,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t)}},666:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.updatePlayerPosition=t.getplayerpos=t.addtoplayerzpos=t.addtoplayerypos=t.addtoplayerxpos=void 0,PluginAPI.require("player");var r={x:0,y:0,z:0};t.getplayerpos=r,t.updatePlayerPosition=function(){r.x=PluginAPI.player.x,r.y=PluginAPI.player.y,r.z=PluginAPI.player.z,PluginAPI.player.reload()},t.addtoplayerxpos=function(e){PluginAPI.player.x+=e},t.addtoplayerypos=function(e){PluginAPI.player.y+=e},t.addtoplayerzpos=function(e){PluginAPI.player.z+=e}},315:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.gettps=t.registertps=void 0;var r=0;t.registertps=function(){var e,t=-1;PluginAPI.addEventListener("packettimeupdate",(function(n){var o=n.totalWorldTime,l=(new Date).getTime();-1==t&&(e=l,t=o);var i=o-t,a=l-e;t=o,e=l,r=i/(a/1e3)}))},t.gettps=function(){return r}}},g={};function s(e){var t=g[e];if(void 0!==t)return t.exports;var r=g[e]={exports:{}};return u[e](r,r.exports,s),r.exports}s.d=(e,t)=>{for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e=s(260),t=s(537),r=s(619),n=s(965),o=s(128),l=s(713),i=s(54),a=s(193),c=s(315),console.log("[MeteorX] Loading client..."),(0,i.registercmds)(),(0,a.registernoweb)(),(0,e.registergui)(),(0,o.registerjetpack)(),(0,t.registerSpider)(),(0,r.registerStep)(),(0,n.registerNofall)(),(0,l.registerFullbright)(),(0,c.registertps)(),console.log("[MeteorX] Finished loading client!")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LElBRTFFLEVDTkQySSxFQUFvQnZQLEVBQUksQ0FBQ2lRLEVBQUtDLElBQVV2UCxPQUFPMUIsVUFBVWtSLGVBQWU5UCxLQUFLNFAsRUFBS0MsR25CRTlFeFMsRUFBUSxFQUFRLEtBQ2hCQyxFQUFXLEVBQVEsS0FDbkJDLEVBQVMsRUFBUSxLQUNqQkMsRUFBVyxFQUFRLEtBQ25CQyxFQUFZLEVBQVEsS0FDcEJDLEVBQWUsRUFBUSxLQUN2QkMsRUFBUyxFQUFRLElBQ2pCQyxFQUFVLEVBQVEsS0FDbEJDLEVBQVEsRUFBUSxLQUVwQndNLFFBQVFDLElBQUksZ0NBRVosRUFBSTNNLEVBQU93RixpQkFDWCxFQUFJdkYsRUFBUW1QLGtCQUNaLEVBQUkxUCxFQUFNeUksZ0JBQ1YsRUFBSXJJLEVBQVUyTyxvQkFDZCxFQUFJOU8sRUFBUzZQLG1CQUNiLEVBQUk1UCxFQUFPK1AsaUJBQ1gsRUFBSTlQLEVBQVNrUCxtQkFDYixFQUFJaFAsRUFBYXFPLHVCQUdqQixFQUFJbE8sRUFBTXlRLGVBRVZqRSxRQUFRQyxJQUFJLHFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWV0ZW9yeC8uL3NyYy9tYWluLnRzIiwid2VicGFjazovL21ldGVvcngvLi9ub2RlX21vZHVsZXMvb3dvaWZ5LWpzL2Rpc3Qvb3dvaWZ5LWpzLmVzbS5qcyIsIndlYnBhY2s6Ly9tZXRlb3J4Ly4vc3JjL2V0Yy9jbWRzLnRzIiwid2VicGFjazovL21ldGVvcngvLi9zcmMvZXRjL2d1aS50cyIsIndlYnBhY2s6Ly9tZXRlb3J4Ly4vc3JjL21vZHVsZXMvYXV0b2NsaWNrZXIudHMiLCJ3ZWJwYWNrOi8vbWV0ZW9yeC8uL3NyYy9tb2R1bGVzL2Z1bGxicmlnaHQudHMiLCJ3ZWJwYWNrOi8vbWV0ZW9yeC8uL3NyYy9tb2R1bGVzL2pldHBhY2sudHMiLCJ3ZWJwYWNrOi8vbWV0ZW9yeC8uL3NyYy9tb2R1bGVzL25vZmFsbC50cyIsIndlYnBhY2s6Ly9tZXRlb3J4Ly4vc3JjL21vZHVsZXMvbm93ZWIudHMiLCJ3ZWJwYWNrOi8vbWV0ZW9yeC8uL3NyYy9tb2R1bGVzL3NsaXBwZXJ5LnRzIiwid2VicGFjazovL21ldGVvcngvLi9zcmMvbW9kdWxlcy9zcGlkZXIudHMiLCJ3ZWJwYWNrOi8vbWV0ZW9yeC8uL3NyYy9tb2R1bGVzL3N0ZXAudHMiLCJ3ZWJwYWNrOi8vbWV0ZW9yeC8uL3NyYy91dGlscy9jaGF0LnRzIiwid2VicGFjazovL21ldGVvcngvLi9zcmMvdXRpbHMvY2hhdHV0aWxzLnRzIiwid2VicGFjazovL21ldGVvcngvLi9zcmMvdXRpbHMvY2xpcGJvYXJkdXRpbHMudHMiLCJ3ZWJwYWNrOi8vbWV0ZW9yeC8uL3NyYy91dGlscy9wbGF5ZXJ1dGlscy50cyIsIndlYnBhY2s6Ly9tZXRlb3J4Ly4vc3JjL3V0aWxzL3Rwcy50cyIsIndlYnBhY2s6Ly9tZXRlb3J4L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL21ldGVvcngvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL21ldGVvcngvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBndWlfMSA9IHJlcXVpcmUoXCIuL2V0Yy9ndWlcIik7XG52YXIgc3BpZGVyXzEgPSByZXF1aXJlKFwiLi9tb2R1bGVzL3NwaWRlclwiKTtcbnZhciBzdGVwXzEgPSByZXF1aXJlKFwiLi9tb2R1bGVzL3N0ZXBcIik7XG52YXIgbm9mYWxsXzEgPSByZXF1aXJlKFwiLi9tb2R1bGVzL25vZmFsbFwiKTtcbnZhciBqZXRwYWNrXzEgPSByZXF1aXJlKFwiLi9tb2R1bGVzL2pldHBhY2tcIik7XG52YXIgZnVsbGJyaWdodF8xID0gcmVxdWlyZShcIi4vbW9kdWxlcy9mdWxsYnJpZ2h0XCIpO1xudmFyIGNtZHNfMSA9IHJlcXVpcmUoXCIuL2V0Yy9jbWRzXCIpO1xudmFyIG5vd2ViXzEgPSByZXF1aXJlKFwiLi9tb2R1bGVzL25vd2ViXCIpO1xudmFyIHRwc18xID0gcmVxdWlyZShcIi4vdXRpbHMvdHBzXCIpO1xuLy8gZGlzcGxheSBhIG1lc3NhZ2Ugb24gY29uc29sZSBpbmRpY2F0aW5nIHRoYXQgdGhlIGNsaWVudCBpcyBsb2FkaW5nXG5jb25zb2xlLmxvZyhcIltNZXRlb3JYXSBMb2FkaW5nIGNsaWVudC4uLlwiKTtcbi8vIHJlZ2lzdGVyIGFsbCBtb2R1bGVzIGFuZCBjb21tYW5kc1xuKDAsIGNtZHNfMS5yZWdpc3RlcmNtZHMpKCk7XG4oMCwgbm93ZWJfMS5yZWdpc3Rlcm5vd2ViKSgpO1xuKDAsIGd1aV8xLnJlZ2lzdGVyZ3VpKSgpO1xuKDAsIGpldHBhY2tfMS5yZWdpc3RlcmpldHBhY2spKCk7XG4oMCwgc3BpZGVyXzEucmVnaXN0ZXJTcGlkZXIpKCk7XG4oMCwgc3RlcF8xLnJlZ2lzdGVyU3RlcCkoKTtcbigwLCBub2ZhbGxfMS5yZWdpc3Rlck5vZmFsbCkoKTtcbigwLCBmdWxsYnJpZ2h0XzEucmVnaXN0ZXJGdWxsYnJpZ2h0KSgpO1xuLy8gcmVnaXN0ZXJ0YWNvKClcbi8vIGRpc3BsYXl0YWNvKClcbigwLCB0cHNfMS5yZWdpc3RlcnRwcykoKTtcbi8vIGRpc3BsYXkgYSBtZXNzYWdlIG9uIGNvbnNvbGUgaW5kaWNhdGluZyB0aGF0IHRoZSBjbGllbnQgaGFzIGZpbmlzaGVkIGxvYWRpbmdcbmNvbnNvbGUubG9nKFwiW01ldGVvclhdIEZpbmlzaGVkIGxvYWRpbmcgY2xpZW50IVwiKTtcbiIsImZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gIHJldHVybiBhcnIyO1xufVxuXG5mdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlKG8sIGFsbG93QXJyYXlMaWtlKSB7XG4gIHZhciBpdCA9IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdIHx8IG9bXCJAQGl0ZXJhdG9yXCJdO1xuICBpZiAoaXQpIHJldHVybiAoaXQgPSBpdC5jYWxsKG8pKS5uZXh0LmJpbmQoaXQpO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHtcbiAgICBpZiAoaXQpIG8gPSBpdDtcbiAgICB2YXIgaSA9IDA7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4ge1xuICAgICAgICBkb25lOiB0cnVlXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBvW2krK11cbiAgICAgIH07XG4gICAgfTtcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cblxuZnVuY3Rpb24gc2VhcmNoVmFsdWVDb250YWluc1JlcGxhY2VkV29yZHMoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSwgcmVwbGFjZWRXb3Jkcykge1xuICByZXR1cm4gQXJyYXkuZnJvbShyZXBsYWNlZFdvcmRzKS5zb21lKGZ1bmN0aW9uICh3b3JkKSB7XG4gICAgcmV0dXJuIHdvcmQucmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSAhPT0gd29yZDtcbiAgfSk7XG59XG5cbnZhciBXb3JkID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gV29yZCh3b3JkKSB7XG4gICAgdGhpcy53b3JkID0gd29yZC50cmltKCk7XG4gICAgdGhpcy5yZXBsYWNlZFdvcmRzID0gbmV3IFNldCgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFdvcmQucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlLCByZXBsYWNlUmVwbGFjZWRXb3Jkcykge1xuICAgIGlmIChyZXBsYWNlUmVwbGFjZWRXb3JkcyA9PT0gdm9pZCAwKSB7XG4gICAgICByZXBsYWNlUmVwbGFjZWRXb3JkcyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghcmVwbGFjZVJlcGxhY2VkV29yZHMgJiYgc2VhcmNoVmFsdWVDb250YWluc1JlcGxhY2VkV29yZHMoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSwgdGhpcy5yZXBsYWNlZFdvcmRzKSkgcmV0dXJuIHRoaXM7XG4gICAgdmFyIHJlcGxhY2luZ1dvcmQgPSB0aGlzLndvcmQucmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKS50cmltKCk7XG4gICAgdmFyIG1hdGNoQXJyYXkgPSB0aGlzLndvcmQubWF0Y2goc2VhcmNoVmFsdWUpO1xuICAgIHZhciByZXBsYWNlZFdvcmRzID0gbWF0Y2hBcnJheSAhPT0gbnVsbCA/IEFycmF5LmZyb20obWF0Y2hBcnJheSkubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4geC5yZXBsYWNlKHgsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSkgOiBbXTtcblxuICAgIGlmIChyZXBsYWNpbmdXb3JkICE9PSB0aGlzLndvcmQpIHtcbiAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UocmVwbGFjZWRXb3JkcyksIF9zdGVwOyAhKF9zdGVwID0gX2l0ZXJhdG9yKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciB3b3JkID0gX3N0ZXAudmFsdWU7XG4gICAgICAgIHRoaXMucmVwbGFjZWRXb3Jkcy5hZGQod29yZCk7XG4gICAgICB9XG4gICAgICB0aGlzLndvcmQgPSByZXBsYWNpbmdXb3JkO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLndvcmQ7XG4gIH07XG5cbiAgcmV0dXJuIFdvcmQ7XG59KCk7XG5cbi8qKlxyXG4gKiBJbnRlcmxlYXZlcyAyIGFycmF5c1xyXG4gKiBAaW50ZXJuYWxcclxuICogQHBhcmFtIGEgZmlyc3QgYXJyYXlcclxuICogQHBhcmFtIGIgc2Vjb25kIGFycnlcclxuICogQHJldHVybnMgYXJyYXkgd2l0aCBpbnRlcmxlYXZlZCBlbGVtZW50c1xyXG4gKi9cbmZ1bmN0aW9uIGludGVybGVhdmVBcnJheXMoYSwgYikge1xuICB2YXIgYXJyID0gW107XG4gIHZhciBvYnNlcnZlZCA9IGE7XG4gIHZhciBvdGhlciA9IGI7XG4gIHZhciB0ZW1wID0gbnVsbDtcblxuICB3aGlsZSAob2JzZXJ2ZWQubGVuZ3RoID4gMCkge1xuICAgIGFyci5wdXNoKG9ic2VydmVkLnNoaWZ0KCkpO1xuICAgIHRlbXAgPSBvYnNlcnZlZDtcbiAgICBvYnNlcnZlZCA9IG90aGVyO1xuICAgIG90aGVyID0gdGVtcDtcbiAgfVxuXG4gIGlmIChvdGhlci5sZW5ndGggPiAwKSBhcnIucHVzaC5hcHBseShhcnIsIG90aGVyKTtcbiAgcmV0dXJuIGFycjtcbn1cblxudmFyIGZhY2VzID0gWyco44O7YM+JwrTjg7spJywgJzs7dzs7JywgJ293bycsICdVd1UnLCAnPnc8JywgJ153XicsICcoKiBeIM+JIF4pJywgJyjijJLPieKMkiknLCAn44O9KCrjg7vPieODuynvvoknLCAnKG/CtOKIgGBvKScsICcob++9pc+J772lbyknLCAn77y8KO+8vuKWve+8vinvvI8nXTtcbnZhciBNYXBfT19Ub19Pd08gPSBmdW5jdGlvbiBNYXBfT19Ub19Pd08oaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL28vZywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkpID8gJ293bycgOiAnbyc7XG4gIH0pO1xufTtcbnZhciBNYXBfRXdfVG9fVXdVID0gZnVuY3Rpb24gTWFwX0V3X1RvX1V3VShpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvZXcvZywgJ3V3dScpO1xufTtcbnZhciBNYXBfSGV5X1RvX0hheSA9IGZ1bmN0aW9uIE1hcF9IZXlfVG9fSGF5KGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC8oW0hoXSlleS9nLCAnJDFheScpO1xufTtcbnZhciBNYXBfRGVhZF9Ub19EZWQgPSBmdW5jdGlvbiBNYXBfRGVhZF9Ub19EZWQoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL0RlYWQvZywgJ0RlZCcpLnJlcGxhY2UoL2RlYWQvZywgJ2RlZCcpO1xufTtcbnZhciBNYXBfTl9Wb3dlbF9UX1RvX05kID0gZnVuY3Rpb24gTWFwX05fVm93ZWxfVF9Ub19OZChpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvblthZWlvdV0qdC9nLCAnbmQnKTtcbn07XG52YXIgTWFwX1JlYWRfVG9fV2VhZCA9IGZ1bmN0aW9uIE1hcF9SZWFkX1RvX1dlYWQoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1JlYWQvZywgJ1dlYWQnKS5yZXBsYWNlKC9yZWFkL2csICd3ZWFkJyk7XG59O1xudmFyIE1hcF9CcmFja2V0c19Ub19TdGFyVHJhaWxzID0gZnVuY3Rpb24gTWFwX0JyYWNrZXRzX1RvX1N0YXJUcmFpbHMoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1soezxdL2csICfvvaHvvaU6KjrvvaXvvp/imIUs772h772lOio6772l776f4piGJykucmVwbGFjZSgvWyl9Pl0vZywgJ+KYhu++n++9pToqOu+9pe+9oSzimIXvvp/vvaU6KjrvvaXvvaEnKTtcbn07XG52YXIgTWFwX1BlcmlvZENvbW1hRXhjbGFtYXRpb25TZW1pY29sb25fVG9fS2FvbW9qaXMgPSBmdW5jdGlvbiBNYXBfUGVyaW9kQ29tbWFFeGNsYW1hdGlvblNlbWljb2xvbl9Ub19LYW9tb2ppcyhpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvWy4sXSg/IVswLTldKS9nLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcgJyArIGZhY2VzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGZhY2VzLmxlbmd0aCldO1xuICB9KS5yZXBsYWNlKC9bITtdKy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcgJyArIGZhY2VzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGZhY2VzLmxlbmd0aCldO1xuICB9KTtcbn07XG52YXIgTWFwX1RoYXRfVG9fRGF0ID0gZnVuY3Rpb24gTWFwX1RoYXRfVG9fRGF0KGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC90aGF0L2csICdkYXQnKS5yZXBsYWNlKC9UaGF0L2csICdEYXQnKTtcbn07XG52YXIgTWFwX1RoX1RvX0YgPSBmdW5jdGlvbiBNYXBfVGhfVG9fRihpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvW1R0XWgoPyFbRWVdKS9nLCAnZicpLnJlcGxhY2UoL1RIKD8hRSkvZywgJ0YnKTtcbn07XG52YXIgTWFwX0xlX1RvX1dhbCA9IGZ1bmN0aW9uIE1hcF9MZV9Ub19XYWwoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL2xlJC9nLCAnd2FsJyk7XG59O1xudmFyIE1hcF9WZV9Ub19XZSA9IGZ1bmN0aW9uIE1hcF9WZV9Ub19XZShpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvdmUvZywgJ3dlJykucmVwbGFjZSgvVmUvZywgJ1dlJyk7XG59O1xudmFyIE1hcF9SeV9Ub19Xd3kgPSBmdW5jdGlvbiBNYXBfUnlfVG9fV3d5KGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC9yeS9nLCAnd3d5Jyk7XG59O1xudmFyIE1hcF9ST3JMX1RvX1cgPSBmdW5jdGlvbiBNYXBfUk9yTF9Ub19XKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC8oPzpyfGwpL2csICd3JykucmVwbGFjZSgvKD86UnxMKS9nLCAnVycpO1xufTtcbnZhciBNYXBfTGxfVG9fV3cgPSBmdW5jdGlvbiBNYXBfTGxfVG9fV3coaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL2xsL2csICd3dycpO1xufTtcbnZhciBNYXBfVm93ZWxPclJFeGNlcHRPX0xfVG9fV2wgPSBmdW5jdGlvbiBNYXBfVm93ZWxPclJFeGNlcHRPX0xfVG9fV2woaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1thZWl1cl1sJC9nLCAnd2wnKS5yZXBsYWNlKC9bQUVJVVJdKFtsTF0pJC9nLCAnVyQxJyk7XG59O1xudmFyIE1hcF9PbGRfVG9fT3dsZCA9IGZ1bmN0aW9uIE1hcF9PbGRfVG9fT3dsZChpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvKFtPb10pbGQvZywgJyQxd2xkJykucmVwbGFjZSgvT0xEL2csICdPV0xEJyk7XG59O1xudmFyIE1hcF9PbF9Ub19Pd2wgPSBmdW5jdGlvbiBNYXBfT2xfVG9fT3dsKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC8oW09vXSlsL2csICckMXdsJykucmVwbGFjZSgvT0wvZywgJ09XTCcpO1xufTtcbnZhciBNYXBfTE9yUl9PX1RvX1dvID0gZnVuY3Rpb24gTWFwX0xPclJfT19Ub19XbyhpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvW2xyXW8vZywgJ3dvJykucmVwbGFjZSgvW0xSXShbb09dKS9nLCAnVyQxJyk7XG59O1xudmFyIE1hcF9TcGVjaWZpY0NvbnNvbmFudHNfT19Ub19MZXR0ZXJfQW5kX1dvID0gZnVuY3Rpb24gTWFwX1NwZWNpZmljQ29uc29uYW50c19PX1RvX0xldHRlcl9BbmRfV28oaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLyhbYmNkZmdoamttbnBxc3R4eXpdKW8vZywgJyQxd28nKS5yZXBsYWNlKC8oW0JDREZHSEpLTU5QUVNUWFlaXSkoW29PXSkvZywgZnVuY3Rpb24gKF8sIG0xLCBtMikge1xuICAgIHJldHVybiBtMSArIChtMi50b1VwcGVyQ2FzZSgpID09PSBtMiA/ICdXJyA6ICd3JykgKyBtMjtcbiAgfSk7XG59O1xudmFyIE1hcF9WT3JXX0xlX1RvX1dhbCA9IGZ1bmN0aW9uIE1hcF9WT3JXX0xlX1RvX1dhbChpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvW3Z3XWxlL2csICd3YWwnKTtcbn07XG52YXIgTWFwX0ZpX1RvX0Z3aSA9IGZ1bmN0aW9uIE1hcF9GaV9Ub19Gd2koaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLyhbRmZdKWkvZywgJyQxd2knKS5yZXBsYWNlKC9GSS9nLCAnRldJJyk7XG59O1xudmFyIE1hcF9WZXJfVG9fV2VyID0gZnVuY3Rpb24gTWFwX1Zlcl9Ub19XZXIoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLyhbVnZdKWVyL2csICd3ZXInKTtcbn07XG52YXIgTWFwX1BvaV9Ub19Qd29pID0gZnVuY3Rpb24gTWFwX1BvaV9Ub19Qd29pKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC8oW1BwXSlvaS9nLCAnJDF3b2knKTtcbn07XG52YXIgTWFwX1NwZWNpZmljQ29uc29uYW50c19MZV9Ub19MZXR0ZXJfQW5kX1dhbCA9IGZ1bmN0aW9uIE1hcF9TcGVjaWZpY0NvbnNvbmFudHNfTGVfVG9fTGV0dGVyX0FuZF9XYWwoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLyhbRGRGZkdnSGhKalBwUXFSclNzVHRYeFl5WnpdKWxlJC9nLCAnJDF3YWwnKTtcbn07XG52YXIgTWFwX0NvbnNvbmFudF9SX1RvX0NvbnNvbmFudF9XID0gZnVuY3Rpb24gTWFwX0NvbnNvbmFudF9SX1RvX0NvbnNvbmFudF9XKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC8oW0JiQ2NEZEZmR2dLa1BwUXFTc1R0V3dYeFp6XSlyL2csICckMXcnKTtcbn07XG52YXIgTWFwX0x5X1RvX1d5ID0gZnVuY3Rpb24gTWFwX0x5X1RvX1d5KGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC9seS9nLCAnd3knKS5yZXBsYWNlKC9MeS9nLCAnV3knKTtcbn07XG52YXIgTWFwX1BsZV9Ub19Qd2UgPSBmdW5jdGlvbiBNYXBfUGxlX1RvX1B3ZShpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvKFtQcF0pbGUvZywgJyQxd2UnKTtcbn07XG52YXIgTWFwX05yX1RvX053ID0gZnVuY3Rpb24gTWFwX05yX1RvX053KGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC8oW05uXSlyL2csICckMXcnKS5yZXBsYWNlKC9OUi9nLCAnTlcnKTtcbn07XG52YXIgTWFwX01lbV9Ub19Nd2VtID0gZnVuY3Rpb24gTWFwX01lbV9Ub19Nd2VtKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC9NZW0vZywgJ213ZW0nKS5yZXBsYWNlKC9tZW0vZywgJ013ZW0nKTtcbn07XG52YXIgVW5tYXBfTnl3b19Ub19OeW8gPSBmdW5jdGlvbiBVbm1hcF9OeXdvX1RvX055byhpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvKFtObl0peXdvL2csICckMXlvJywgdHJ1ZSk7XG59O1xudmFyIE1hcF9GdWNfVG9fRnd1YyA9IGZ1bmN0aW9uIE1hcF9GdWNfVG9fRnd1YyhpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvKFtGZl0pdWMvZywgJyQxd3VjJyk7XG59O1xudmFyIE1hcF9Nb21fVG9fTXdvbSA9IGZ1bmN0aW9uIE1hcF9Nb21fVG9fTXdvbShpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvKFtNbV0pb20vZywgJyQxd29tJyk7XG59O1xudmFyIE1hcF9NZV9Ub19Nd2UgPSBmdW5jdGlvbiBNYXBfTWVfVG9fTXdlKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC9eTWUkL2csICdNd2UnKS5yZXBsYWNlKC9ebWUkL2csICdtd2UnKTtcbn07XG52YXIgTWFwX05Wb3dlbF9Ub19OeSA9IGZ1bmN0aW9uIE1hcF9OVm93ZWxfVG9fTnkoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL24oW2FlaW91XSkvZywgJ255JDEnKS5yZXBsYWNlKC9OKFthZWlvdV0pL2csICdOeSQxJykucmVwbGFjZSgvTihbQUVJT1VdKS9nLCAnTlkkMScpO1xufTtcbnZhciBNYXBfT3ZlX1RvX1V2ID0gZnVuY3Rpb24gTWFwX092ZV9Ub19VdihpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvb3ZlL2csICd1dicpLnJlcGxhY2UoL09WRS9nLCAnVVYnKTtcbn07XG52YXIgTWFwX0hhaGFfVG9fSGVoZXhEID0gZnVuY3Rpb24gTWFwX0hhaGFfVG9fSGVoZXhEKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXGIoaGF8aGFofGhlaHxoZWhlKStcXGIvZywgJ2hlaGUgeEQnKTtcbn07XG52YXIgTWFwX1RoZV9Ub19UZWggPSBmdW5jdGlvbiBNYXBfVGhlX1RvX1RlaChpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXFxiKFtUdF0paGVcXGIvZywgJyQxZWgnKTtcbn07XG52YXIgTWFwX1lvdV9Ub19VID0gZnVuY3Rpb24gTWFwX1lvdV9Ub19VKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXGJZb3VcXGIvZywgJ1UnKS5yZXBsYWNlKC9cXGJ5b3VcXGIvZywgJ3UnKTtcbn07XG52YXIgTWFwX1RpbWVfVG9fVGltID0gZnVuY3Rpb24gTWFwX1RpbWVfVG9fVGltKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXGIoW1R0XSlpbWVcXGIvZywgJyQxaW0nKTtcbn07XG52YXIgTWFwX092ZXJfVG9fT3dvciA9IGZ1bmN0aW9uIE1hcF9PdmVyX1RvX093b3IoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLyhbT29dKXZlci9nLCAnJDF3b3InKTtcbn07XG52YXIgTWFwX1dvcnNlX1RvX1dvc2UgPSBmdW5jdGlvbiBNYXBfV29yc2VfVG9fV29zZShpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvKFtXd10pb3JzZS9nLCAnJDFvc2UnKTtcbn07XG52YXIgTWFwX0dyZWF0X1RvX0d3YXRlID0gZnVuY3Rpb24gTWFwX0dyZWF0X1RvX0d3YXRlKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC8oW0dnXSlyZWF0L2csICckMXdhdGUnKTtcbn07XG52YXIgTWFwX0F2aWF0X1RvX0F3aWF0ID0gZnVuY3Rpb24gTWFwX0F2aWF0X1RvX0F3aWF0KGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC8oW0FhXSl2aWF0L2csICckMXdpYXQnKTtcbn07XG52YXIgTWFwX0RlZGljYXRfVG9fRGVkaXRhdCA9IGZ1bmN0aW9uIE1hcF9EZWRpY2F0X1RvX0RlZGl0YXQoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLyhbRGRdKWVkaWNhdC9nLCAnJDFlZGl0YXQnKTtcbn07XG52YXIgTWFwX1JlbWVtYmVyX1RvX1JlbWJlciA9IGZ1bmN0aW9uIE1hcF9SZW1lbWJlcl9Ub19SZW1iZXIoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLyhbUnJdKWVtZW1iZXIvZywgJyQxZW1iZXInKTtcbn07XG52YXIgTWFwX1doZW5fVG9fV2VuID0gZnVuY3Rpb24gTWFwX1doZW5fVG9fV2VuKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC8oW1d3XSloZW4vZywgJyQxZW4nKTtcbn07XG52YXIgTWFwX0ZyaWdodGVuZWRfVG9fRnJpZ3RlbiA9IGZ1bmN0aW9uIE1hcF9GcmlnaHRlbmVkX1RvX0ZyaWd0ZW4oaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLyhbRmZdKXJpZ2h0ZW4oZWQpKi9nLCAnJDFyaWd0ZW4nKTtcbn07XG52YXIgTWFwX01lbWVfVG9fTWVtID0gZnVuY3Rpb24gTWFwX01lbWVfVG9fTWVtKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKC9NZW1lL2csICdtZW0nKS5yZXBsYWNlKC9NZW0vZywgJ01lbScpO1xufTtcbnZhciBNYXBfRmVlbF9Ub19GZWxsID0gZnVuY3Rpb24gTWFwX0ZlZWxfVG9fRmVsbChpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXihbRmZdKWVlbCQvZywgJyQxZWxsJyk7XG59O1xuXG52YXIgc3BlY2lmaWNXb3JkTWFwcGluZ0FycmF5ID0gW01hcF9GdWNfVG9fRnd1YywgTWFwX01vbV9Ub19Nd29tLCBNYXBfVGltZV9Ub19UaW0sIE1hcF9NZV9Ub19Nd2UsIE1hcF9PdmVyX1RvX093b3IsIE1hcF9PdmVfVG9fVXYsIE1hcF9IYWhhX1RvX0hlaGV4RCwgTWFwX1RoZV9Ub19UZWgsIE1hcF9Zb3VfVG9fVSwgTWFwX1JlYWRfVG9fV2VhZCwgTWFwX1dvcnNlX1RvX1dvc2UsIE1hcF9HcmVhdF9Ub19Hd2F0ZSwgTWFwX0F2aWF0X1RvX0F3aWF0LCBNYXBfRGVkaWNhdF9Ub19EZWRpdGF0LCBNYXBfUmVtZW1iZXJfVG9fUmVtYmVyLCBNYXBfV2hlbl9Ub19XZW4sIE1hcF9GcmlnaHRlbmVkX1RvX0ZyaWd0ZW4sIE1hcF9NZW1lX1RvX01lbSwgTWFwX0ZlZWxfVG9fRmVsbF07XG52YXIgdXZ1TWFwcGluZ0FycmF5ID0gW01hcF9PX1RvX093TywgTWFwX0V3X1RvX1V3VSwgTWFwX0hleV9Ub19IYXksIE1hcF9EZWFkX1RvX0RlZCwgTWFwX05fVm93ZWxfVF9Ub19OZF07XG52YXIgdXd1TWFwcGluZ0FycmF5ID0gW01hcF9CcmFja2V0c19Ub19TdGFyVHJhaWxzLCBNYXBfUGVyaW9kQ29tbWFFeGNsYW1hdGlvblNlbWljb2xvbl9Ub19LYW9tb2ppcywgTWFwX1RoYXRfVG9fRGF0LCBNYXBfVGhfVG9fRiwgTWFwX0xlX1RvX1dhbCwgTWFwX1ZlX1RvX1dlLCBNYXBfUnlfVG9fV3d5LCBNYXBfUk9yTF9Ub19XXTtcbnZhciBvd29NYXBwaW5nQXJyYXkgPSBbTWFwX05Wb3dlbF9Ub19OeSwgTWFwX0xsX1RvX1d3LCBNYXBfVm93ZWxPclJFeGNlcHRPX0xfVG9fV2wsIE1hcF9PbGRfVG9fT3dsZCwgTWFwX09sX1RvX093bCwgTWFwX0xPclJfT19Ub19XbywgTWFwX1NwZWNpZmljQ29uc29uYW50c19PX1RvX0xldHRlcl9BbmRfV28sIE1hcF9WT3JXX0xlX1RvX1dhbCwgTWFwX0ZpX1RvX0Z3aSwgTWFwX1Zlcl9Ub19XZXIsIE1hcF9Qb2lfVG9fUHdvaSwgTWFwX1NwZWNpZmljQ29uc29uYW50c19MZV9Ub19MZXR0ZXJfQW5kX1dhbCwgTWFwX0NvbnNvbmFudF9SX1RvX0NvbnNvbmFudF9XLCBNYXBfTHlfVG9fV3ksIE1hcF9QbGVfVG9fUHdlLCBNYXBfTnJfVG9fTncsIE1hcF9NZW1fVG9fTXdlbSwgVW5tYXBfTnl3b19Ub19OeW9dO1xuXG4vKipcclxuICogb3dvaWZ5IGV2ZXJ5dGhpbmdcclxuICogQHBhcmFtIHYgd29yZCB0byBvd29pZnlcclxuICogQHBhcmFtIGxldmVsIGxldmVsIG9mIG93by1uZXNzLiAob3dvIC0+IHV3dSAtPiB1dnUpXHJcbiAqL1xuXG5mdW5jdGlvbiBvd29pZnkodiwgbGV2ZWwpIHtcbiAgaWYgKGxldmVsID09PSB2b2lkIDApIHtcbiAgICBsZXZlbCA9ICdvd28nO1xuICB9XG5cbiAgdmFyIHdoaXRlc3BhY2UgPSB2LnNwbGl0KC9bXlxcc10rL2cpO1xuICB2YXIgd29yZHMgPSB2LnNwbGl0KC9cXHMrL2cpLm1hcChmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiBuZXcgV29yZCh4KTtcbiAgfSk7XG4gIHdvcmRzID0gd29yZHMubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgc3BlY2lmaWNXb3JkTWFwcGluZ0FycmF5LnJlZHVjZShmdW5jdGlvbiAod29yZCwgZikge1xuICAgICAgcmV0dXJuIGYod29yZCk7XG4gICAgfSwgeCk7XG5cbiAgICBzd2l0Y2ggKGxldmVsKSB7XG4gICAgICBjYXNlICd1dnUnOlxuICAgICAgICB1dnVNYXBwaW5nQXJyYXkucmVkdWNlKGZ1bmN0aW9uICh3b3JkLCBmKSB7XG4gICAgICAgICAgcmV0dXJuIGYod29yZCk7XG4gICAgICAgIH0sIHgpO1xuXG4gICAgICBjYXNlICd1d3UnOlxuICAgICAgICB1d3VNYXBwaW5nQXJyYXkucmVkdWNlKGZ1bmN0aW9uICh3b3JkLCBmKSB7XG4gICAgICAgICAgcmV0dXJuIGYod29yZCk7XG4gICAgICAgIH0sIHgpO1xuXG4gICAgICBjYXNlICdvd28nOlxuICAgICAgICBvd29NYXBwaW5nQXJyYXkucmVkdWNlKGZ1bmN0aW9uICh3b3JkLCBmKSB7XG4gICAgICAgICAgcmV0dXJuIGYod29yZCk7XG4gICAgICAgIH0sIHgpO1xuICAgIH1cblxuICAgIHJldHVybiB4O1xuICB9KTtcbiAgcmV0dXJuIGludGVybGVhdmVBcnJheXMod2hpdGVzcGFjZSwgd29yZHMpLmpvaW4oJycpO1xufVxuZnVuY3Rpb24gdXd1aWZ5KHYpIHtcbiAgcmV0dXJuIG93b2lmeSh2LCAndXd1Jyk7XG59XG5mdW5jdGlvbiB1dnVpZnkodikge1xuICByZXR1cm4gb3dvaWZ5KHYsICd1dnUnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb3dvaWZ5O1xuZXhwb3J0IHsgdXZ1aWZ5LCB1d3VpZnkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW93b2lmeS1qcy5lc20uanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVnaXN0ZXJjbWRzID0gdm9pZCAwO1xudmFyIG93b2lmeSA9IHJlcXVpcmUoJ293b2lmeS1qcycpLmRlZmF1bHQ7XG52YXIgY2hhdHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvY2hhdHV0aWxzXCIpO1xudmFyIHBsYXllcnV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvcGxheWVydXRpbHNcIik7XG52YXIgdHBzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvdHBzXCIpO1xudmFyIGNsaXBib2FyZHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvY2xpcGJvYXJkdXRpbHNcIik7XG52YXIgdmVyc2lvbiA9IFwidjEuMVwiO1xudmFyIGNtZHMgPSBcIi52ZXJzaW9uICwgLmhlbHAgLCAuaXAgLCAudXd1aWZ5ICwgLm15cG9zLCAudmNsaXAsIC50cHMsIC5jb3B5Y29yZHNcIjtcbnZhciBzZXJ2ZXJpcCA9IG51bGw7XG4vL0B0cy1pZ25vcmVcblBsdWdpbkFQSS5hZGRFdmVudExpc3RlbmVyKFwidXBkYXRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdHBzID0gKDAsIHRwc18xLmdldHRwcykoKTtcbn0pO1xuZnVuY3Rpb24gcmVnaXN0ZXJjbWRzKCkge1xuICAgIC8vQHRzLWlnbm9yZVxuICAgIFBsdWdpbkFQSS5hZGRFdmVudExpc3RlbmVyKFwicGFja2V0am9pbmdhbWVcIiwgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIHNlcnZlcmlwID0gZXYuaXA7XG4gICAgfSk7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgUGx1Z2luQVBJLmFkZEV2ZW50TGlzdGVuZXIoXCJzZW5kY2hhdG1lc3NhZ2VcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5tZXNzYWdlID09PSBcIi52ZXJzaW9uXCIpIHtcbiAgICAgICAgICAgICgwLCBjaGF0dXRpbHNfMS5NZXRlb3JYbG9nKShcInlvdSBhcmUgY3VycmVudGx5IHVzaW5nIHRoZSBcIiArIHZlcnNpb24gKyBcIiB2ZXJzaW9uIG9mIE1ldGVvclguXCIpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudC5tZXNzYWdlID09PSBcIi5oZWxwXCIpIHtcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgKDAsIGNoYXR1dGlsc18xLk1ldGVvclhsb2cpKFwiTWV0ZW9yWCBjb21tYW5kcyA6IFwiICsgY21kcyArIFwiIFwiKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQubWVzc2FnZSA9PT0gXCIuaXBcIikge1xuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAoMCwgY2hhdHV0aWxzXzEuTWV0ZW9yWGxvZykoXCJ0aGUgaXAgb2YgdGhlIGN1cnJlbnQgc2VydmVyIHlvdSBhcmUgcGxheWluZzogXCIgKyBzZXJ2ZXJpcCArIFwiIFwiKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQubWVzc2FnZSA9PT0gXCIudXd1aWZ5XCIpIHtcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgKDAsIGNoYXR1dGlsc18xLk1ldGVvclhsb2cpKFwidXNhZ2U6IC51d3VpZnkgW21lc3NhZ2VdXCIpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudC5tZXNzYWdlLnN0YXJ0c1dpdGgoXCIudXd1aWZ5IFwiKSkge1xuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICB2YXIgdGFyZ2V0TGVuZ3RoID0gXCIudXd1aWZ5XCIubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBldmVudC5tZXNzYWdlLnRvU3RyaW5nKCkudHJpbSgpO1xuICAgICAgICAgICAgaWYgKCAvL0lmXG4gICAgICAgICAgICBtZXNzYWdlLmxlbmd0aCA+IHRhcmdldExlbmd0aCAmJiAvL1RoZSBsZW5ndGggb2YgdGhlIG1lc3NhZ2UgaXMgbG9uZ2VyIHRoYW4gdGhlIHRhcmdldCBsZW5ndGhcbiAgICAgICAgICAgICAgICBtZXNzYWdlLnN1YnN0cmluZygwLCB0YXJnZXRMZW5ndGgpLnRyaW0oKS50b0xvd2VyQ2FzZSgpID09PSBcIi51d3VpZnlcIiAvL0FuZCwgdGhlIGNvbnRlbnQgZnJvbSBjaGFyYWN0ZXIgMCAoZmlyc3QpIHRvIHRoYXQgb2YgdGhlIGxlbmd0aCwgdHJpbW1lZCBhbmQgcHV0IHRvIGxvd2VyY2FzZSBpcyBcIi5tYWtlc2Nyb2xsXCJcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHZhciBhY3R1YWxjaGF0bWVzc2FnZSA9IG1lc3NhZ2Uuc3Vic3RyaW5nKHRhcmdldExlbmd0aCArIDEpO1xuICAgICAgICAgICAgICAgIHZhciB1d3VtZXNzYWdlID0gb3dvaWZ5KGFjdHVhbGNoYXRtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBQbHVnaW5BUEkubmV0d29yay5zZW5kUGFja2V0Q2hhdE1lc3NhZ2UoeyBtZXNzYWdlSW46IHV3dW1lc3NhZ2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLypcbiAgICAgICAgaWYgKGV2ZW50Lm1lc3NhZ2UgPT09IFwiLnRhY29cIikge1xuICAgICAgICAgICAgaWYgKHJldHVybnRhY29Ub2dnbGUoKSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHZhciByYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzKTtcbiAgICAgICAgICAgICAgICBpZiAocmFuZG9tID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIE1ldGVvclhsb2coXCJ0YWNvIVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJhbmRvbSA9PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICBNZXRlb3JYbG9nKFwiYSB3aWxkIHRhY28gaGFzIGFwcGVhcmVkIVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2V0dGFjb1RvZ2dsZSh0cnVlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBNZXRlb3JYbG9nKFwibm8gdGFjbyA6KFwiKTtcbiAgICAgICAgICAgICAgICBzZXR0YWNvVG9nZ2xlKGZhbHNlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQgPSB0cnVlO1xuICAgICAgICB9Ki9cbiAgICAgICAgaWYgKGV2ZW50Lm1lc3NhZ2UgPT09IFwiLm15cG9zXCIpIHtcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgUGx1Z2luQVBJLmFkZEV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICgwLCBwbGF5ZXJ1dGlsc18xLnVwZGF0ZVBsYXllclBvc2l0aW9uKSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBUT0RPOiB0cmltIHggYW5kIHkgdG8gbm90IGluY2x1ZGUgZGVjaW1hbHMgW2RvbmVdXG4gICAgICAgICAgICB2YXIgcGxheWVyeCA9IE1hdGgudHJ1bmMocGxheWVydXRpbHNfMS5nZXRwbGF5ZXJwb3MueCk7XG4gICAgICAgICAgICB2YXIgcGxheWVyeSA9IE1hdGgudHJ1bmMocGxheWVydXRpbHNfMS5nZXRwbGF5ZXJwb3MueSk7XG4gICAgICAgICAgICB2YXIgcGxheWVyeiA9IE1hdGgudHJ1bmMocGxheWVydXRpbHNfMS5nZXRwbGF5ZXJwb3Mueik7XG4gICAgICAgICAgICAoMCwgY2hhdHV0aWxzXzEuTWV0ZW9yWGxvZykoXCJ5b3VyIGxhc3QgcmVwb3J0ZWQgY29yZHMoSVJMKGprKSk6IFwiICsgXCIgeD0gXCIgKyBwbGF5ZXJ4ICsgXCIgeT0gXCIgKyBwbGF5ZXJ5ICsgXCIgej0gXCIgKyBwbGF5ZXJ6KTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQubWVzc2FnZSA9PT0gXCIudmNsaXBcIikge1xuICAgICAgICAgICAgKDAsIGNoYXR1dGlsc18xLk1ldGVvclhsb2cpKFwidXNhZ2U6IC52Y2xpcCBbdmFsdWUvYmxvY2tzXVwiKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQubWVzc2FnZS5zdGFydHNXaXRoKFwiLnZjbGlwIFwiKSkge1xuICAgICAgICAgICAgLy8gVE9ETyA6IG1ha2UgaXQgc28gdGhlIGNvbW1hbmQgb25seSBhY2NlcHRzIG51bWJlcnMgKCFpc05BTigpKSBbZG9uZV1cbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgdmFyIHRhcmdldExlbmd0aCA9IFwiLnZjbGlwXCIubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBldmVudC5tZXNzYWdlLnRvU3RyaW5nKCkudHJpbSgpO1xuICAgICAgICAgICAgaWYgKCAvL0lmXG4gICAgICAgICAgICBtZXNzYWdlLmxlbmd0aCA+IHRhcmdldExlbmd0aCAmJiAvL1RoZSBsZW5ndGggb2YgdGhlIG1lc3NhZ2UgaXMgbG9uZ2VyIHRoYW4gdGhlIHRhcmdldCBsZW5ndGhcbiAgICAgICAgICAgICAgICBtZXNzYWdlLnN1YnN0cmluZygwLCB0YXJnZXRMZW5ndGgpLnRyaW0oKS50b0xvd2VyQ2FzZSgpID09PSBcIi52Y2xpcFwiIC8vQW5kLCB0aGUgY29udGVudCBmcm9tIGNoYXJhY3RlciAwIChmaXJzdCkgdG8gdGhhdCBvZiB0aGUgbGVuZ3RoLCB0cmltbWVkIGFuZCBwdXQgdG8gbG93ZXJjYXNlIGlzIFwiLm1ha2VzY3JvbGxcIlxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZjbGlwdmFsdWUgPSBtZXNzYWdlLnN1YnN0cmluZyh0YXJnZXRMZW5ndGggKyAxKTtcbiAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICB2YXIgaXNwbGF5ZXJyaWRpbmcgPSBQbHVnaW5BUEkucGxheWVyLmlzUmlkaW5nKCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzcGxheWVycmlkaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgUGx1Z2luQVBJLnBsYXllci5zZXRQb3NpdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IFBsdWdpbkFQSS5wbGF5ZXIueCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgeTogUGx1Z2luQVBJLnBsYXllci55ICsgdmNsaXB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgejogUGx1Z2luQVBJLnBsYXllci56XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAoMCwgY2hhdHV0aWxzXzEuTWV0ZW9yWHN1Y2Nlc3MpKFwic3VjY2Vzc2Z1bGx5IHZjbGlwcGVkIFwiICsgdmNsaXB2YWx1ZSArIFwiIGJsb2NrcyFcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc3BsYXllcnJpZGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAoMCwgY2hhdHV0aWxzXzEuTWV0ZW9yWGVycm9yKShcInlvdSBuZWVkIHRvIGdldCBvZmYgdGhpcyBtb2IvdmVoaWNsZSB0byB1c2UgdGhpcyBjb21tYW5kIVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKHZjbGlwdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICgwLCBjaGF0dXRpbHNfMS5NZXRlb3JYZXJyb3IpKFwidGhlIGFtb3VudCBvZiBibG9ja3MgbmVlZHMgdG8gYmUgYSBOdW1iZXIhXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQubWVzc2FnZS50b0xvd2VyQ2FzZSgpID09PSBcIi50cHNcIikgeyAvL0lmIHRoZXkgdHlwZWQgJy50cHMnLCBvciAnLlRQUycsIG9yLi4uIGV0Yy5cbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0ID0gdHJ1ZTsgLy9QcmV2ZW50IHNlbmRpbmcgdGhlIGNoYXQgbWVzc2FnZS5cbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgKDAsIGNoYXR1dGlsc18xLk1ldGVvclhsb2cpKFwiwqc5IEN1cnJlbnQgc2VydmVyIHRwcyBpcyDCpzV+XCIgKyB0cHMudG9GaXhlZCgxKSk7IC8vUHJpbnQgdGhlIFRQUyB0byBjaGF0LlxuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudC5tZXNzYWdlID09PSBcIi5jb3B5Y29yZHNcIikge1xuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICBQbHVnaW5BUEkuYWRkRXZlbnRMaXN0ZW5lcihcInVwZGF0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgKDAsIHBsYXllcnV0aWxzXzEudXBkYXRlUGxheWVyUG9zaXRpb24pKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBwbGF5ZXJ4ID0gTWF0aC50cnVuYyhwbGF5ZXJ1dGlsc18xLmdldHBsYXllcnBvcy54KTtcbiAgICAgICAgICAgIHZhciBwbGF5ZXJ5ID0gTWF0aC50cnVuYyhwbGF5ZXJ1dGlsc18xLmdldHBsYXllcnBvcy55KTtcbiAgICAgICAgICAgIHZhciBwbGF5ZXJ6ID0gTWF0aC50cnVuYyhwbGF5ZXJ1dGlsc18xLmdldHBsYXllcnBvcy56KTtcbiAgICAgICAgICAgICgwLCBjbGlwYm9hcmR1dGlsc18xLmNvcHkpKFwiIHg9IFwiICsgcGxheWVyeCArIFwiIHk9IFwiICsgcGxheWVyeSArIFwiIHo9IFwiICsgcGxheWVyeik7XG4gICAgICAgICAgICAoMCwgY2hhdHV0aWxzXzEuTWV0ZW9yWHN1Y2Nlc3MpKFwiY3VycmVudCBjb3JkcyBjb3BpZWQgdG8gY2xpcGJvYXJkIVwiKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5yZWdpc3RlcmNtZHMgPSByZWdpc3RlcmNtZHM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVnaXN0ZXJndWkgPSB2b2lkIDA7XG52YXIgc3RlcF8xID0gcmVxdWlyZShcIi4uL21vZHVsZXMvc3RlcFwiKTtcbnZhciBzcGlkZXJfMSA9IHJlcXVpcmUoXCIuLi9tb2R1bGVzL3NwaWRlclwiKTtcbnZhciBub2ZhbGxfMSA9IHJlcXVpcmUoXCIuLi9tb2R1bGVzL25vZmFsbFwiKTtcbnZhciBmdWxsYnJpZ2h0XzEgPSByZXF1aXJlKFwiLi4vbW9kdWxlcy9mdWxsYnJpZ2h0XCIpO1xudmFyIGpldHBhY2tfMSA9IHJlcXVpcmUoXCIuLi9tb2R1bGVzL2pldHBhY2tcIik7XG52YXIgbm93ZWJfMSA9IHJlcXVpcmUoXCIuLi9tb2R1bGVzL25vd2ViXCIpO1xudmFyIGF1dG9jbGlja2VyXzEgPSByZXF1aXJlKFwiLi4vbW9kdWxlcy9hdXRvY2xpY2tlclwiKTtcbnZhciBzbGlwcGVyeV8xID0gcmVxdWlyZShcIi4uL21vZHVsZXMvc2xpcHBlcnlcIik7XG5mdW5jdGlvbiByZWdpc3Rlcmd1aSgpIHtcbiAgICB2YXIgZ3VpVmlzaWJsZSA9IGZhbHNlOyAvLyBWYXJpYWJsZSB0byBrZWVwIHRyYWNrIG9mIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBHVUlcbiAgICBmdW5jdGlvbiB0b2dnbGVHdWkoKSB7XG4gICAgICAgIGlmIChndWlWaXNpYmxlKSB7IC8vIElmIHRoZSBHVUkgaXMgdmlzaWJsZVxuICAgICAgICAgICAgaGlkZUd1aSgpOyAvLyBIaWRlIHRoZSBHVUlcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNob3dHdWkoKTsgLy8gT3RoZXJ3aXNlLCBzaG93IHRoZSBHVUlcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzaG93R3VpKCkge1xuICAgICAgICBoaWRlR3VpKCk7IC8vIElmIHRoZSBHVUkgaXMgYWxyZWFkeSBvcGVuLCB0aGlzIHdpbGwgaGlkZSBpdC5cbiAgICAgICAgdmFyIGd1aSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJndWlcIik7IC8vIENyZWF0ZSBhIG5ldyBcImd1aVwiIGVsZW1lbnRcbiAgICAgICAgaWYgKGRvY3VtZW50LnBvaW50ZXJMb2NrRWxlbWVudCAhPSBudWxsKSB7IC8vIGlmIHBvaW50ZXJsb2NrIGlzIGVuYWJsZWRcbiAgICAgICAgICAgIGRvY3VtZW50LmV4aXRQb2ludGVyTG9jaygpOyAvLyBleGl0cyBwb2ludGVybG9ja1xuICAgICAgICB9XG4gICAgICAgIC8vIGd1aSdzIGh0bWwgY29kZVxuICAgICAgICBndWkuaW5uZXJIVE1MID0gXCJcXG4gICAgICAgIDxndWkgaWQ9XFxcIm15R3VpXFxcIiBzdHlsZT1cXFwid2lkdGg6IDEwMCU7aGVpZ2h0OiAxMDAlO3Bvc2l0aW9uOiBmaXhlZDt0b3A6IDBweDtsZWZ0OiAwcHg7ei1pbmRleDogMTA7Y29sb3I6IHdoaXRlO2ZvbnQtZmFtaWx5OiBNaW5lY3JhZnRpYSwgc2Fucy1zZXJpZjtvdmVyZmxvdzogaGlkZGVuIHNjcm9sbDtiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDgwLCA4MCwgODAsIDAuNDIpO2JhY2tncm91bmQtYmxlbmQtbW9kZTogbXVsdGlwbHk7YmFja2dyb3VuZC1zaXplOiA2NHB4O1xcXCI+XFxuICAgICAgICA8aDEgc3R5bGU9XFxcInRleHQtc2hhZG93OiAwcHggMHB4IDRweDtcXFwiPk1ldGVvclggR1VJPC9oMT5cXG4gICAgICAgIDxwIHN0eWxlPVxcXCJmb250LXNpemU6IDAuOHJlbTsgY29sb3I6IHllbGxvdztcXFwiPih0b3RhbGx5IG5vdCBzdG9sZW4gZnJvbSBwbHVnaW4gbWFuYWdlcidzIGd1aSk8L3A+PHAgc3R5bGU9XFxcImZvbnQtc2l6ZTogMC44cmVtOyBjb2xvcjogeWVsbG93O1xcXCI+aWsgdGhlIGd1aSBsb29rcyBraW5kYSBiYWQgZm9yIGEgaGFja2VkIGNsaWVudCBidXQgaXRzIG1ldGVvclggYWxwaGEgaWcuIGkgV0lMTCB1cGRhdGUgdGhpcyBndWkgaW4gdGhlIGZ1dHVyZTwvcD48cCBzdHlsZT1cXFwiZm9udC1zaXplOiAwLjhyZW07IGNvbG9yOiBvcmFuZ2VyZWQ7XFxcIj5jbGljayBvbiBcXFwiQWN0aXZhdGVcXFwiIHRvIGFjdGl2YXRlIGEgaGFjayBhbmQgY2xpY2sgb24gXFxcIkRlYWN0aXZhdGVcXFwiIHRvIGRlYWN0aXZhdGUgYSBoYWNrPC9wPlxcbiAgICAgICAgPHRhYmxlIHN0eWxlPVxcXCJ0YWJsZS1sYXlvdXQ6IGZpeGVkOyB3aWR0aDogMTAwJTtcXFwiPlxcbiAgICAgICAgICAgIDx0Ym9keT48dHIgc3R5bGU9XFxcImJhY2tncm91bmQ6IHJnYig4MCwgODAsIDgwKTtcXFwiPlxcbiAgICAgICAgICAgICAgICA8dGggc3R5bGU9XFxcInRleHQtYWxpZ246IGNlbnRlcjtcXFwiPkhhY2tzPC90aD5cXG4gICAgICAgICAgICAgICAgXFxuICAgICAgICAgICAgPHRoIHN0eWxlPVxcXCJ0ZXh0LWFsaWduOiBjZW50ZXI7IHdpZHRoOiAxNSU7XFxcIj5TZXR0aW5nczwvdGg+PHRoIHN0eWxlPVxcXCJ0ZXh0LWFsaWduOiBjZW50ZXI7IHdpZHRoOiAxNSU7XFxcIj5BY3RpdmF0ZS9EZWFjdGl2YXRlPC90aD48L3RyPlxcbiAgICAgICAgICAgIDx0ciBzdHlsZT1cXFwiYm94LXNoYWRvdzogZ3JleSAwcHggMnB4IDBweDtcXFwiPlxcbiAgICAgICAgICAgICAgICA8dGQgc3R5bGU9XFxcInVzZXItc2VsZWN0OiB0ZXh0O2JhY2tncm91bmQtY29sb3I6ICM5ZDAwZmYzMDtcXFwiPkpldHBhY2sgKGhvbGQgc3BhY2UgdG8gZmx5KSBcXHVEODNDXFx1REY5MlxcdUQ4M0RcXHVEQ0E4PC90ZD5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcbiAgICAgICAgICAgIDx0ZCBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjogI2U1OTQwMDt0ZXh0LWFsaWduOiBjZW50ZXI7XFxcIiBpZD1cXFwiamV0cGFja3NldHRpbmdzXFxcIj5TZXR0aW5nczwvdGQ+PHRkIHN0eWxlPVxcXCJiYWNrZ3JvdW5kLWNvbG9yOiBncmF5O3RleHQtYWxpZ246IGNlbnRlcjtcXFwiIGlkPVxcXCJqZXRwYWNrXFxcIj5BY3RpdmF0ZTwvdGQ+PC90cj5cXG4gICAgICAgICAgICA8dHIgc3R5bGU9XFxcImJveC1zaGFkb3c6IGdyZXkgMHB4IDJweCAwcHg7XFxcIj5cXG4gICAgICAgICAgICAgICAgPHRkIHN0eWxlPVxcXCJ1c2VyLXNlbGVjdDogdGV4dDtiYWNrZ3JvdW5kLWNvbG9yOiAjOWQwMGZmMzA7XFxcIj5TdGVwPC90ZD5cXG4gICAgICAgICAgICAgICAgPHRkIHN0eWxlPVxcXCJiYWNrZ3JvdW5kLWNvbG9yOiAjOWQwMGZmMzA7dGV4dC1hbGlnbjogY2VudGVyO1xcXCI+PC90ZD48dGQgc3R5bGU9XFxcImJhY2tncm91bmQtY29sb3I6IGdyYXk7IHRleHQtYWxpZ246IGNlbnRlcjtcXFwiIGlkPVxcXCJzdGVwXFxcIj5BY3RpdmF0ZTwvdGQ+XFxuICAgICAgICAgICAgPC90cj5cXG4gICAgICAgICAgICA8dHIgc3R5bGU9XFxcImJveC1zaGFkb3c6IGdyZXkgMHB4IDJweCAwcHg7XFxcIj5cXG4gICAgICAgICAgICAgICAgPHRkIHN0eWxlPVxcXCJ1c2VyLXNlbGVjdDogdGV4dDtiYWNrZ3JvdW5kLWNvbG9yOiAjOWQwMGZmMzA7XFxcIj5TcGlkZXI8L3RkPlxcbiAgICAgICAgICAgICAgICA8dGQgc3R5bGU9XFxcImJhY2tncm91bmQtY29sb3I6ICM5ZDAwZmYzMDt0ZXh0LWFsaWduOiBjZW50ZXI7XFxcIj48L3RkPjx0ZCBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjogZ3JheTsgdGV4dC1hbGlnbjogY2VudGVyO1xcXCIgaWQ9XFxcInNwaWRlclxcXCI+QWN0aXZhdGU8L3RkPlxcbiAgICAgICAgICAgIDwvdHI+XFxuICAgICAgICAgICAgPHRyIHN0eWxlPVxcXCJib3gtc2hhZG93OiBncmV5IDBweCAycHggMHB4O1xcXCI+XFxuICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT1cXFwidXNlci1zZWxlY3Q6IHRleHQ7YmFja2dyb3VuZC1jb2xvcjogIzlkMDBmZjMwO1xcXCI+Tm9mYWxsPC90ZD5cXG4gICAgICAgICAgICAgICAgPHRkIHN0eWxlPVxcXCJiYWNrZ3JvdW5kLWNvbG9yOiAjOWQwMGZmMzA7dGV4dC1hbGlnbjogY2VudGVyO1xcXCI+PC90ZD48dGQgc3R5bGU9XFxcImJhY2tncm91bmQtY29sb3I6IGdyYXk7IHRleHQtYWxpZ246IGNlbnRlcjtcXFwiIGlkPVxcXCJub2ZhbGxcXFwiPkFjdGl2YXRlPC90ZD5cXG4gICAgICAgICAgICA8L3RyPlxcbiAgICAgICAgICAgIDx0ciBzdHlsZT1cXFwiYm94LXNoYWRvdzogZ3JleSAwcHggMnB4IDBweDtcXFwiPlxcbiAgICAgICAgICAgICAgICA8dGQgc3R5bGU9XFxcInVzZXItc2VsZWN0OiB0ZXh0O2JhY2tncm91bmQtY29sb3I6ICM5ZDAwZmYzMDtcXFwiPkZ1bGxicmlnaHQ8L3RkPlxcbiAgICAgICAgICAgICAgICA8dGQgc3R5bGU9XFxcImJhY2tncm91bmQtY29sb3I6ICM5ZDAwZmYzMDt0ZXh0LWFsaWduOiBjZW50ZXI7XFxcIj48L3RkPjx0ZCBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjogZ3JheTsgdGV4dC1hbGlnbjogY2VudGVyO1xcXCIgaWQ9XFxcImZ1bGxicmlnaHRcXFwiPkFjdGl2YXRlPC90ZD5cXG4gICAgICAgICAgICA8L3RyPlxcbiAgICAgICAgICAgIDx0ciBzdHlsZT1cXFwiYm94LXNoYWRvdzogZ3JleSAwcHggMnB4IDBweDtcXFwiPiBcXG4gICAgICAgICAgICA8dGQgc3R5bGU9XFxcInVzZXItc2VsZWN0OiB0ZXh0O2JhY2tncm91bmQtY29sb3I6ICM5ZDAwZmYzMDtcXFwiPk5vV2ViPC90ZD4gXFxuICAgICAgICAgICAgPHRkIHN0eWxlPVxcXCJiYWNrZ3JvdW5kLWNvbG9yOiAjOWQwMGZmMzA7dGV4dC1hbGlnbjogY2VudGVyO1xcXCI+PC90ZD48dGQgc3R5bGU9XFxcImJhY2tncm91bmQtY29sb3I6IGdyYXk7dGV4dC1hbGlnbjogY2VudGVyO1xcXCIgaWQ9XFxcIm5vd2ViXFxcIj5BY3RpdmF0ZTwvdGQ+IFxcbiAgICAgICAgICAgIDwvdHI+IFxcbiAgICAgICAgICAgIDx0ciBzdHlsZT1cXFwiYm94LXNoYWRvdzogZ3JleSAwcHggMnB4IDBweDtcXFwiPiBcXG4gICAgICAgICAgICA8dGQgc3R5bGU9XFxcInVzZXItc2VsZWN0OiB0ZXh0O2JhY2tncm91bmQtY29sb3I6ICM5ZDAwZmYzMDtcXFwiPkF1dG9jbGlja2VyPC90ZD4gXFxuICAgICAgICAgICAgIFxcbiAgICAgICAgICAgIDx0ZCBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjogI2U1OTQwMDt0ZXh0LWFsaWduOiBjZW50ZXI7XFxcIiBpZD1cXFwiYXV0b2NsaWNrZXJzZXR0aW5nc1xcXCI+U2V0dGluZ3M8L3RkPjx0ZCBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjogZ3JheTt0ZXh0LWFsaWduOiBjZW50ZXI7XFxcIiBpZD1cXFwiYXV0b2NsaWNrZXJcXFwiPkFjdGl2YXRlPC90ZD5cXG5cXG4gICAgICAgICAgICA8L3RyPiBcXG4gICAgICAgICAgICA8dHIgc3R5bGU9XFxcImJveC1zaGFkb3c6IGdyZXkgMHB4IDJweCAwcHg7XFxcIj4gXFxuICAgICAgICAgICAgPHRkIHN0eWxlPVxcXCJ1c2VyLXNlbGVjdDogdGV4dDtiYWNrZ3JvdW5kLWNvbG9yOiAjOWQwMGZmMzA7XFxcIj5zbGlwcGVyeW1vZDwvdGQ+IFxcbiAgICAgICAgICAgIDx0ZCBzdHlsZT1cXFwiYmFja2dyb3VuZC1jb2xvcjogIzlkMDBmZjMwO3RleHQtYWxpZ246IGNlbnRlcjtcXFwiPjwvdGQ+PHRkIHN0eWxlPVxcXCJiYWNrZ3JvdW5kLWNvbG9yOiBncmF5O3RleHQtYWxpZ246IGNlbnRlcjtcXFwiIGlkPVxcXCJzbGlwcGVyeVxcXCI+QWN0aXZhdGU8L3RkPiBcXG4gICAgICAgICAgICA8L3RyPiBcXG4gICAgICAgIDwvdGJvZHk+PC90YWJsZT5cXG4gICAgICAgIDxhIHN0eWxlPVxcXCJiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsgdGV4dC1hbGlnbjogY2VudGVyOyBjb2xvcjogeWVsbG93OyBjdXJzb3I6IHBvaW50ZXI7IGZvbnQtZmFtaWx5OiBNaW5lY3JhZnRpYSwgc2Fucy1zZXJpZjsgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IGJvcmRlcjogMHB4OyBtYXJnaW4tcmlnaHQ6IDFyZW07IGZvbnQtc2l6ZTogMXJlbTtcXFwiIGhyZWY9XFxcImh0dHBzOi8vZ2l0aHViLmNvbS9yYWRtYW5wbGF5cy9NZXRlb3JYLXRzL2lzc3Vlcy9uZXdcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5zdWdnZXN0IGEgbmV3IGZlYXR1cmUvaGFjazwvYT5cXG4gICAgICAgIDxhIHN0eWxlPVxcXCJiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDt0ZXh0LWFsaWduOiBjZW50ZXI7Y29sb3I6IG9yYW5nZTtjdXJzb3I6IHBvaW50ZXI7Zm9udC1mYW1pbHk6IE1pbmVjcmFmdGlhLCBzYW5zLXNlcmlmO3RleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO2JvcmRlcjogMHB4O2ZvbnQtc2l6ZTogMXJlbTtcXFwiIGhyZWY9XFxcImh0dHBzOi8vZ2l0aHViLmNvbS9vcmdzL0VhZ2xlclJlYm9ybi9kaXNjdXNzaW9ucy85XFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+dmVyc2lvbiBSb2FkbWFwPC9hPlxcbiAgICAgICAgXFxuICAgICAgICAgIDwvZ3VpPlxcbiAgICAgICAgXCI7IC8vIFNldCB0aGUgSFRNTCBjb250ZW50IG9mIHRoZSBcImd1aVwiIGVsZW1lbnRcbiAgICAgICAgZ3VpLmlkID0gXCJteUd1aVwiOyAvLyBTZXQgdGhlIElEIG9mIHRoZSBcImd1aVwiIGVsZW1lbnQgdG8gXCJteUd1aVwiXG4gICAgICAgIC8vIGNzcyBzdHlsZXMgb2YgdGhlIGd1aVxuICAgICAgICBndWkuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICAgIGd1aS5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG4gICAgICAgIGd1aS5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gICAgICAgIGd1aS5zdHlsZS50b3AgPSAnMHB4JztcbiAgICAgICAgZ3VpLnN0eWxlLmxlZnQgPSAnMHB4JztcbiAgICAgICAgZ3VpLnN0eWxlLnpJbmRleCA9ICcxMDAnO1xuICAgICAgICBndWkuc3R5bGUuY29sb3IgPSAnd2hpdGUnO1xuICAgICAgICBndWkuc3R5bGUuZm9udEZhbWlseSA9ICdNaW5lY3JhZnRpYSwgc2Fucy1zZXJpZic7XG4gICAgICAgIGd1aS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4gc2Nyb2xsJztcbiAgICAgICAgZ3VpLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdyZ2JhKDgwLCA4MCwgODAsIDAuNDIpJztcbiAgICAgICAgZ3VpLnN0eWxlLmJhY2tncm91bmRCbGVuZE1vZGUgPSAnbXVsdGlwbHknO1xuICAgICAgICBndWkuc3R5bGUuYmFja2dyb3VuZFNpemUgPSAnNjRweCc7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZ3VpKTsgLy8gQXBwZW5kIHRoZSBcImd1aVwiIGVsZW1lbnQgdG8gdGhlIGJvZHkgb2YgdGhlIGRvY3VtZW50XG4gICAgICAgIGd1aVZpc2libGUgPSB0cnVlOyAvLyBTZXQgdGhlIEdVSSB2aXNpYmlsaXR5IHRvIHRydWVcbiAgICAgICAgLy8gYXNzaWduIHRoZSBhY3RpdmF0ZS9kZWFjdGl2YXRlIGJ1dHRvbnMgdG8gdmFyaWFibGVzXG4gICAgICAgIHZhciBqZXRwYWNrRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiamV0cGFja1wiKTtcbiAgICAgICAgdmFyIGpldHBhY2tzZXR0aW5ncyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiamV0cGFja3NldHRpbmdzXCIpO1xuICAgICAgICB2YXIgc3RlcEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0ZXBcIik7XG4gICAgICAgIHZhciBzcGlkZXJFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzcGlkZXJcIik7XG4gICAgICAgIHZhciBub2ZhbGxFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJub2ZhbGxcIik7XG4gICAgICAgIHZhciBmdWxsYnJpZ2h0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZnVsbGJyaWdodFwiKTtcbiAgICAgICAgdmFyIG5vd2ViRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibm93ZWJcIik7XG4gICAgICAgIHZhciBhdXRvY2xpY2tlcnNldHRpbmdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhdXRvY2xpY2tlcnNldHRpbmdzXCIpO1xuICAgICAgICB2YXIgYXV0b2NsaWNrZXJFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhdXRvY2xpY2tlclwiKTtcbiAgICAgICAgdmFyIHNsaXBwZXJ5RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2xpcHBlcnlcIik7XG4gICAgICAgIC8vIGlmIG1vdXNlIGN1cnNvciBpcyBob3ZlcmluZyBvdmVyIHRoZSBidXR0b25zIHNldCB0aGUgY3Vyc29yIHRvIHBvaW50ZXJcbiAgICAgICAgamV0cGFja0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBqZXRwYWNrRWxlbWVudC5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgfSk7XG4gICAgICAgIGpldHBhY2tzZXR0aW5ncy5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGF1dG9jbGlja2Vyc2V0dGluZ3Muc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XG4gICAgICAgIH0pO1xuICAgICAgICBzdGVwRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN0ZXBFbGVtZW50LnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xuICAgICAgICB9KTtcbiAgICAgICAgc3BpZGVyRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNwaWRlckVsZW1lbnQuc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XG4gICAgICAgIH0pO1xuICAgICAgICBub2ZhbGxFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbm9mYWxsRWxlbWVudC5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgfSk7XG4gICAgICAgIGZ1bGxicmlnaHRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZnVsbGJyaWdodEVsZW1lbnQuc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XG4gICAgICAgIH0pO1xuICAgICAgICBub3dlYkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBub3dlYkVsZW1lbnQuc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XG4gICAgICAgIH0pO1xuICAgICAgICBhdXRvY2xpY2tlcnNldHRpbmdzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYXV0b2NsaWNrZXJzZXR0aW5ncy5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgfSk7XG4gICAgICAgIGF1dG9jbGlja2VyRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGF1dG9jbGlja2VyRWxlbWVudC5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgfSk7XG4gICAgICAgIHNsaXBwZXJ5RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNsaXBwZXJ5RWxlbWVudC5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGlmIHRoZSBndWkgb3BlbnMgYW5kIHRoZSB2YXJpYWJsZSBmb3IgbW9kdWxlcyBhcmUgZmFsc2UgbWFrZSB0aGUgYnV0dG9ucyBzYXk6IFwiQWN0aXZhdGVcIlxuICAgICAgICBpZiAoKDAsIGpldHBhY2tfMS5yZXR1cm5qZXRwYWNrdG9nZ2xlKSgpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgamV0cGFja0VsZW1lbnQuaW5uZXJUZXh0ID0gXCJBY3RpdmF0ZVwiO1xuICAgICAgICAgICAgamV0cGFja0VsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmVlblwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgc3RlcF8xLnJldHVyblN0ZXBUb2dnbGUpKCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBzdGVwRWxlbWVudC5pbm5lclRleHQgPSBcIkFjdGl2YXRlXCI7XG4gICAgICAgICAgICBzdGVwRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImdyZWVuXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgwLCBzcGlkZXJfMS5yZXR1cm5TcGlkZXJUb2dnbGUpKCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBzcGlkZXJFbGVtZW50LmlubmVyVGV4dCA9IFwiQWN0aXZhdGVcIjtcbiAgICAgICAgICAgIHNwaWRlckVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmVlblwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgbm9mYWxsXzEucmV0dXJuTm9mYWxsVG9nZ2xlKSgpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgbm9mYWxsRWxlbWVudC5pbm5lclRleHQgPSBcIkFjdGl2YXRlXCI7XG4gICAgICAgICAgICBub2ZhbGxFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiZ3JlZW5cIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIGZ1bGxicmlnaHRfMS5yZXR1cm5GdWxsYnJpZ2h0VG9nZ2xlKSgpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZnVsbGJyaWdodEVsZW1lbnQuaW5uZXJUZXh0ID0gXCJBY3RpdmF0ZVwiO1xuICAgICAgICAgICAgZnVsbGJyaWdodEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmVlblwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgbm93ZWJfMS5yZXR1cm5ub3dlYlRvZ2dsZSkoKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIG5vd2ViRWxlbWVudC5pbm5lclRleHQgPSBcIkFjdGl2YXRlXCI7XG4gICAgICAgICAgICBub3dlYkVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmVlblwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgYXV0b2NsaWNrZXJfMS5yZXR1cm5hdXRvY2xpY2tlcnRvZ2dsZSkoKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGF1dG9jbGlja2VyRWxlbWVudC5pbm5lclRleHQgPSBcIkFjdGl2YXRlXCI7XG4gICAgICAgICAgICBhdXRvY2xpY2tlckVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmVlblwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgc2xpcHBlcnlfMS5yZXR1cm5zbGlwcGVyeXRvZ2dsZSkoKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHNsaXBwZXJ5RWxlbWVudC5pbm5lclRleHQgPSBcIkFjdGl2YXRlXCI7XG4gICAgICAgICAgICBzbGlwcGVyeUVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmVlblwiO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIHRoZSBndWkgb3BlbnMgYW5kIHRoZSB2YXJpYWJsZSBmb3IgbW9kdWxlcyBhcmUgdHJ1ZSBtYWtlIHRoZSBidXR0b25zIHNheTogXCJEZWFjdGl2YXRlXCJcbiAgICAgICAgaWYgKCgwLCBqZXRwYWNrXzEucmV0dXJuamV0cGFja3RvZ2dsZSkoKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgamV0cGFja0VsZW1lbnQuaW5uZXJUZXh0ID0gXCJEZWFjdGl2YXRlXCI7XG4gICAgICAgICAgICBqZXRwYWNrRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgc3RlcF8xLnJldHVyblN0ZXBUb2dnbGUpKCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHN0ZXBFbGVtZW50LmlubmVyVGV4dCA9IFwiRGVhY3RpdmF0ZVwiO1xuICAgICAgICAgICAgc3RlcEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIHNwaWRlcl8xLnJldHVyblNwaWRlclRvZ2dsZSkoKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgc3BpZGVyRWxlbWVudC5pbm5lclRleHQgPSBcIkRlYWN0aXZhdGVcIjtcbiAgICAgICAgICAgIHNwaWRlckVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIG5vZmFsbF8xLnJldHVybk5vZmFsbFRvZ2dsZSkoKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgbm9mYWxsRWxlbWVudC5pbm5lclRleHQgPSBcIkRlYWN0aXZhdGVcIjtcbiAgICAgICAgICAgIG5vZmFsbEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIGZ1bGxicmlnaHRfMS5yZXR1cm5GdWxsYnJpZ2h0VG9nZ2xlKSgpID09PSB0cnVlKSB7XG4gICAgICAgICAgICBmdWxsYnJpZ2h0RWxlbWVudC5pbm5lclRleHQgPSBcIkRlYWN0aXZhdGVcIjtcbiAgICAgICAgICAgIGZ1bGxicmlnaHRFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgwLCBub3dlYl8xLnJldHVybm5vd2ViVG9nZ2xlKSgpID09PSB0cnVlKSB7XG4gICAgICAgICAgICBub3dlYkVsZW1lbnQuaW5uZXJUZXh0ID0gXCJEZWFjdGl2YXRlXCI7XG4gICAgICAgICAgICBub3dlYkVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIGF1dG9jbGlja2VyXzEucmV0dXJuYXV0b2NsaWNrZXJ0b2dnbGUpKCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGF1dG9jbGlja2VyRWxlbWVudC5pbm5lclRleHQgPSBcIkRlYWN0aXZhdGVcIjtcbiAgICAgICAgICAgIGF1dG9jbGlja2VyRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgc2xpcHBlcnlfMS5yZXR1cm5zbGlwcGVyeXRvZ2dsZSkoKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgc2xpcHBlcnlFbGVtZW50LmlubmVyVGV4dCA9IFwiRGVhY3RpdmF0ZVwiO1xuICAgICAgICAgICAgc2xpcHBlcnlFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgdGhlIHVzZXIgY2xpY2tzIG9uIHRoZSBidXR0b25zIGFuZCB0aGUgdmFyaWFibGUgZm9yIG1vZHVsZXMgYXJlIGZhbHNlIG1ha2UgdGhlIGJ1dHRvbnMgc2F5IFwiRGVhY3RpdmF0ZVwiIGFuZCBpZiBpdHMgdHJ1ZSBtYWtlIHRoZSBidXR0b25zIHNheSBcImFjdGl2YXRlXCIgd2hlbmV2ZXIgdGhlIHVzZXIgY2xpY2tzIG9uIHRoZSBidXR0b24gXG4gICAgICAgIHN0ZXBFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoKDAsIHN0ZXBfMS5yZXR1cm5TdGVwVG9nZ2xlKSgpICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgc3RlcEVsZW1lbnQuaW5uZXJUZXh0ID0gXCJEZWFjdGl2YXRlXCI7XG4gICAgICAgICAgICAgICAgc3RlcEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjtcbiAgICAgICAgICAgICAgICAoMCwgc3RlcF8xLnNldFN0ZXBUb2dnbGUpKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RlcEVsZW1lbnQuaW5uZXJUZXh0ID0gXCJBY3RpdmF0ZVwiO1xuICAgICAgICAgICAgICAgIHN0ZXBFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiZ3JlZW5cIjtcbiAgICAgICAgICAgICAgICAoMCwgc3RlcF8xLnNldFN0ZXBUb2dnbGUpKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHNwaWRlckVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICgoMCwgc3BpZGVyXzEucmV0dXJuU3BpZGVyVG9nZ2xlKSgpICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgc3BpZGVyRWxlbWVudC5pbm5lclRleHQgPSBcIkRlYWN0aXZhdGVcIjtcbiAgICAgICAgICAgICAgICBzcGlkZXJFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XG4gICAgICAgICAgICAgICAgKDAsIHNwaWRlcl8xLnNldFNwaWRlclRvZ2dsZSkodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzcGlkZXJFbGVtZW50LmlubmVyVGV4dCA9IFwiQWN0aXZhdGVcIjtcbiAgICAgICAgICAgICAgICBzcGlkZXJFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiZ3JlZW5cIjtcbiAgICAgICAgICAgICAgICAoMCwgc3BpZGVyXzEuc2V0U3BpZGVyVG9nZ2xlKShmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBub2ZhbGxFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoKDAsIG5vZmFsbF8xLnJldHVybk5vZmFsbFRvZ2dsZSkoKSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIG5vZmFsbEVsZW1lbnQuaW5uZXJUZXh0ID0gXCJEZWFjdGl2YXRlXCI7XG4gICAgICAgICAgICAgICAgbm9mYWxsRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICAgICAgICAgICAgICAgICgwLCBub2ZhbGxfMS5zZXROb2ZhbGxUb2dnbGUpKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbm9mYWxsRWxlbWVudC5pbm5lclRleHQgPSBcIkFjdGl2YXRlXCI7XG4gICAgICAgICAgICAgICAgbm9mYWxsRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImdyZWVuXCI7XG4gICAgICAgICAgICAgICAgKDAsIG5vZmFsbF8xLnNldE5vZmFsbFRvZ2dsZSkoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZnVsbGJyaWdodEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICgoMCwgZnVsbGJyaWdodF8xLnJldHVybkZ1bGxicmlnaHRUb2dnbGUpKCkgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBmdWxsYnJpZ2h0RWxlbWVudC5pbm5lclRleHQgPSBcIkRlYWN0aXZhdGVcIjtcbiAgICAgICAgICAgICAgICBmdWxsYnJpZ2h0RWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICAgICAgICAgICAgICAgICgwLCBmdWxsYnJpZ2h0XzEuc2V0RnVsbGJyaWdodFRvZ2dsZSkodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmdWxsYnJpZ2h0RWxlbWVudC5pbm5lclRleHQgPSBcIkFjdGl2YXRlXCI7XG4gICAgICAgICAgICAgICAgZnVsbGJyaWdodEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmVlblwiO1xuICAgICAgICAgICAgICAgICgwLCBmdWxsYnJpZ2h0XzEuc2V0RnVsbGJyaWdodFRvZ2dsZSkoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgamV0cGFja0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICgoMCwgamV0cGFja18xLnJldHVybmpldHBhY2t0b2dnbGUpKCkgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBqZXRwYWNrRWxlbWVudC5pbm5lclRleHQgPSBcIkRlYWN0aXZhdGVcIjtcbiAgICAgICAgICAgICAgICBqZXRwYWNrRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICAgICAgICAgICAgICAgICgwLCBqZXRwYWNrXzEuc2V0amV0cGFja3RvZ2dsZSkodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBqZXRwYWNrRWxlbWVudC5pbm5lclRleHQgPSBcIkFjdGl2YXRlXCI7XG4gICAgICAgICAgICAgICAgamV0cGFja0VsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmVlblwiO1xuICAgICAgICAgICAgICAgICgwLCBqZXRwYWNrXzEuc2V0amV0cGFja3RvZ2dsZSkoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgamV0cGFja3NldHRpbmdzLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvL3Byb21wdCB1c2VyIHdpdGggYSBib3ggdG8gZW50ZXIgamV0cGFjayBmb3JjZSBcbiAgICAgICAgICAgIHZhciBqZXRwYWNrZm9yY2UgPSBwcm9tcHQoXCJjaG9vc2UgdGhlIGZvcmNlIGZvciBqZXRwYWNrLihtb3JlIHRoYW4gMC4yIG1pZ2h0IHRyaWdnZXIgYW50aWNoZWF0cylcXG5kZWZhdWx0IDogMC4yIFxcbmN1cnJlbnQgOiBcIiArICgwLCBqZXRwYWNrXzEucmV0dXJuamV0cGFja2ZvcmNlKSgpKTtcbiAgICAgICAgICAgIC8vdHVybnMgdGhlIHByb21wdCBhbnN3ZXIgaW50byBhIG51bWJlclxuICAgICAgICAgICAgdmFyIG51bWpldHBhY2tmb3JjZSA9IE51bWJlcihqZXRwYWNrZm9yY2UpO1xuICAgICAgICAgICAgLy8gaWYgaXQgd2FzbnQgYSBudW1iZXIgdGVsbCB0aGUgdXNlciB0byBlbnRlciB0aGUgamV0cGFjayBmb3JjZSBhZ2FpblxuICAgICAgICAgICAgaWYgKGlzTmFOKG51bWpldHBhY2tmb3JjZSkpIHtcbiAgICAgICAgICAgICAgICBhbGVydChcImpldHBhY2tmb3JjZSBpcyBOQU4gKG5vdCBhIG51bWJlcikgc2V0dGluZyBqZXRwYWNrZm9yY2UgdG8gZGVmYXVsdFwiKTtcbiAgICAgICAgICAgICAgICAoMCwgamV0cGFja18xLnNldGpldHBhY2tmb3JjZSkoMC4yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIHRoZSB1c2VyIGNhbmNlbGVkIHRoZSBwcm9tcHQgbWFrZSB0aGUgdXNlciBQQVkgRk9SIFRIRUlSIEFDVElPTlMoaSBtZWFuIHNldCB0aGUgamV0cGFjayBmb3JjZSB0byBkZWZhdWx0IDo+IClcbiAgICAgICAgICAgIGlmIChqZXRwYWNrZm9yY2UgPT0gbnVsbCB8fCBqZXRwYWNrZm9yY2UgPT0gXCJcIikge1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiVXNlciBjYW5jZWxsZWQgdGhlIHByb21wdC5cXG4gc2V0dGluZyBqZXRwYWNrZm9yY2UgdG8gZGVmYXVsdCAoMC4yKVwiKTtcbiAgICAgICAgICAgICAgICAoMCwgamV0cGFja18xLnNldGpldHBhY2tmb3JjZSkoMC4yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgeyAvLyBpZiB0aGUgdXNlciBkaWRudCBjYW5jZWwgdGhlIHByb21wdCBsaWtlIGEgZ29vZCBib3kgdGVsbCB0aGVtIHRoYXQgdGhlIGpldHBhY2sgZm9yY2UgaGFzIGJlZW4gc2V0IHRvIHdoYXQgdGhleSBjaG9zZVxuICAgICAgICAgICAgICAgIGFsZXJ0KFwiamV0cGFja2ZvcmNlIHNldCB0byBcIiArIGpldHBhY2tmb3JjZSk7XG4gICAgICAgICAgICAgICAgKDAsIGpldHBhY2tfMS5zZXRqZXRwYWNrZm9yY2UpKG51bWpldHBhY2tmb3JjZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBub3dlYkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIFRvZ2dsZSB0aGUgamV0cGFja0d1aUFjdGl2ZSBzdGF0ZVxuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSB0ZXh0IGFuZCBiYWNrZ3JvdW5kIGNvbG9yIGJhc2VkIG9uIHRoZSBzdGF0ZVxuICAgICAgICAgICAgaWYgKCgwLCBub3dlYl8xLnJldHVybm5vd2ViVG9nZ2xlKSgpICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgbm93ZWJFbGVtZW50LmlubmVyVGV4dCA9IFwiRGVhY3RpdmF0ZVwiO1xuICAgICAgICAgICAgICAgIG5vd2ViRWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICAgICAgICAgICAgICAgICgwLCBub3dlYl8xLnNldG5vd2ViVG9nZ2xlKSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5vd2ViRWxlbWVudC5pbm5lclRleHQgPSBcIkFjdGl2YXRlXCI7XG4gICAgICAgICAgICAgICAgbm93ZWJFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiZ3JlZW5cIjtcbiAgICAgICAgICAgICAgICAoMCwgbm93ZWJfMS5zZXRub3dlYlRvZ2dsZSkoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYXV0b2NsaWNrZXJFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoKDAsIGF1dG9jbGlja2VyXzEucmV0dXJuYXV0b2NsaWNrZXJ0b2dnbGUpKCkgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBhdXRvY2xpY2tlckVsZW1lbnQuaW5uZXJUZXh0ID0gXCJEZWFjdGl2YXRlXCI7XG4gICAgICAgICAgICAgICAgYXV0b2NsaWNrZXJFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XG4gICAgICAgICAgICAgICAgKDAsIGF1dG9jbGlja2VyXzEuc2V0YXV0b2NsaWNrZXJ0b2dnbGUpKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYXV0b2NsaWNrZXJFbGVtZW50LmlubmVyVGV4dCA9IFwiQWN0aXZhdGVcIjtcbiAgICAgICAgICAgICAgICBhdXRvY2xpY2tlckVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmVlblwiO1xuICAgICAgICAgICAgICAgICgwLCBhdXRvY2xpY2tlcl8xLnNldGF1dG9jbGlja2VydG9nZ2xlKShmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBhdXRvY2xpY2tlcnNldHRpbmdzLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY2xpY2tlcmNhbmNlbGVkID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgY2xpY2tlcm1vZGUgPSBwcm9tcHQoXCJjaG9vc2UgbW9kZSAoYnkgZW50ZXJpbmcgYSBudW1iZXJpbiB0aGUgYm94IGJlbG93KTogXFxuIFsxXSByaWdodGNsaWNrIFxcbiBbMl0gbGVmdGNsaWNrXCIsIFwiMlwiKTtcbiAgICAgICAgICAgIHZhciBudW1tb2RlID0gTnVtYmVyKGNsaWNrZXJtb2RlKTtcbiAgICAgICAgICAgIGlmIChjbGlja2VybW9kZSA9PSBudWxsIHx8IGNsaWNrZXJtb2RlID09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlVzZXIgY2FuY2VsbGVkIHRoZSBwcm9tcHQuXFxuIG1vZGUgc2V0IHRvIGRlZmF1bHQobGVmdGNsaWNrKVwiKTtcbiAgICAgICAgICAgICAgICAoMCwgYXV0b2NsaWNrZXJfMS5zZXRhdXRvY2xpY2tlcm1vZGUpKFwibGVmdGNsaWNrXCIpO1xuICAgICAgICAgICAgICAgIGNsaWNrZXJjYW5jZWxlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjbGlja2VybW9kZSA9PT0gXCIxXCIpIHtcbiAgICAgICAgICAgICAgICAoMCwgYXV0b2NsaWNrZXJfMS5zZXRhdXRvY2xpY2tlcm1vZGUpKFwicmlnaHRjbGlja1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNsaWNrZXJtb2RlID09PSBcIjJcIikge1xuICAgICAgICAgICAgICAgICgwLCBhdXRvY2xpY2tlcl8xLnNldGF1dG9jbGlja2VybW9kZSkoXCJsZWZ0Y2xpY2tcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc05hTihudW1tb2RlKSB8fCBudW1tb2RlICE9IDEgfHwgMikge1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiaW52YWxpZCBpbnB1dChcIiArIGNsaWNrZXJtb2RlICsgXCIpIHBsZWFzZSBwcmVzcyB0aGUgc2V0dGluZ3MgYnV0dG9uIGFnYWluIFxcbiBhbmQgY2hvb3NlIHRoZSBjbGlja2luZyBtb2RlIHRoYXQgeW91IHdhbnRcIik7XG4gICAgICAgICAgICAgICAgY2xpY2tlcmNhbmNlbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY2xpY2tlcmNhbmNlbGVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlbGF5ID0gcHJvbXB0KFwiZW50ZXIgZGVsYXkgYmV0d2VlbiBjbGlja3MgKHBlciB0aWNrICgyMCB0aWNrcyA9IDEgc2Vjb25kKSlcXG4gKGV4YW1wbGUgOiAxMCkgXFxuIChleGFtcGxlcyBub3QgdG8gZW50ZXI6IDY5LjQyMCkgOlwiLCBcIjIwXCIpO1xuICAgICAgICAgICAgICAgIHZhciBudW1kZWxheSA9IE51bWJlcihkZWxheSk7XG4gICAgICAgICAgICAgICAgaWYgKGRlbGF5ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJVc2VyIGNhbmNlbGxlZCB0aGUgZGVsYXkgcHJvbXB0LlxcbiBkZWxheSBzZXQgdG8gZGVmYXVsdCAoMjAgdGlja3MoMSBjcHMpKVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2xpY2tlcm1vZGUgPT09IFwiMVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICgwLCBhdXRvY2xpY2tlcl8xLnNldHJpZ2h0Y2xpY2tkZWxheSkobnVtZGVsYXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjbGlja2VybW9kZSA9PT0gXCIyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgKDAsIGF1dG9jbGlja2VyXzEuc2V0bGVmdGNsaWNrZGVsYXkpKG51bWRlbGF5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNOYU4obnVtZGVsYXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwidGhlIGRlbGF5IHRoYXQgeW91IGNob3NlKFwiICsgZGVsYXkgKyBcIikgaXMgTk9UIEEgTlVNQkVSLFxcbnBsZWFzZSBwcmVzcyB0aGUgc2V0dGluZ3MgYnV0dG9uIGFnYWluIGFuZCBcXG4gY2hvb3NlIHRoZSBkZWxheSB0aGF0IHlvdSB3YW50XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHNsaXBwZXJ5RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCgwLCBzbGlwcGVyeV8xLnJldHVybnNsaXBwZXJ5dG9nZ2xlKSgpICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgc2xpcHBlcnlFbGVtZW50LmlubmVyVGV4dCA9IFwiRGVhY3RpdmF0ZVwiO1xuICAgICAgICAgICAgICAgIHNsaXBwZXJ5RWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICAgICAgICAgICAgICAgICgwLCBzbGlwcGVyeV8xLnNldHNsaXBwZXJ5VG9nZ2xlKSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNsaXBwZXJ5RWxlbWVudC5pbm5lclRleHQgPSBcIkFjdGl2YXRlXCI7XG4gICAgICAgICAgICAgICAgc2xpcHBlcnlFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiZ3JlZW5cIjtcbiAgICAgICAgICAgICAgICAoMCwgc2xpcHBlcnlfMS5zZXRzbGlwcGVyeVRvZ2dsZSkoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGlkZUd1aSgpIHtcbiAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXlHdWlcIikpIHsgLy8gSWYgdGhlIFwibXlHdWlcIiBlbGVtZW50IGV4aXN0c1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJteUd1aVwiKS5yZW1vdmUoKTsgLy8gUmVtb3ZlIHRoZSBcIm15R3VpXCIgZWxlbWVudCBmcm9tIHRoZSBkb2N1bWVudFxuICAgICAgICB9XG4gICAgICAgIGd1aVZpc2libGUgPSBmYWxzZTsgLy8gU2V0IHRoZSBHVUkgdmlzaWJpbGl0eSB0byBmYWxzZVxuICAgIH1cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5rZXkgPT09IFwiU2hpZnRcIiAmJiBldmVudC5sb2NhdGlvbiA9PT0gS2V5Ym9hcmRFdmVudC5ET01fS0VZX0xPQ0FUSU9OX1JJR0hUKSB7IC8vIElmIHRoZSByaWdodCBTaGlmdCBrZXkgaXMgcHJlc3NlZFxuICAgICAgICAgICAgdG9nZ2xlR3VpKCk7IC8vIFRvZ2dsZSB0aGUgR1VJIHZpc2liaWxpdHlcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQua2V5ID09PSBcIkVzY2FwZVwiIHx8IGV2ZW50LmtleSA9PT0gXCJgXCIpIHsgLy8gSWYgdGhlIEVzY2FwZSBrZXkgb3IgYmFja3RpY2sgaXMgcHJlc3NlZFxuICAgICAgICAgICAgaGlkZUd1aSgpOyAvLyBIaWRlIHRoZSBHVUlcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5yZWdpc3Rlcmd1aSA9IHJlZ2lzdGVyZ3VpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJldHVybnJpZ2h0Y2xpY2tkZWxheSA9IGV4cG9ydHMuc2V0cmlnaHRjbGlja2RlbGF5ID0gZXhwb3J0cy5yZXR1cm5sZWZ0Y2xpY2tkZWxheSA9IGV4cG9ydHMuc2V0bGVmdGNsaWNrZGVsYXkgPSBleHBvcnRzLnJldHVybmF1dG9jbGlja2VybW9kZSA9IGV4cG9ydHMuc2V0YXV0b2NsaWNrZXJtb2RlID0gZXhwb3J0cy5yZXR1cm5hdXRvY2xpY2tlcnRvZ2dsZSA9IGV4cG9ydHMuc2V0YXV0b2NsaWNrZXJ0b2dnbGUgPSBleHBvcnRzLnJlZ2lzdGVyYXV0b2NsaWNrZXIgPSB2b2lkIDA7XG4vL2Zyb20gaHR0cHM6Ly9naXRodWIuY29tL01ldGVvckRldmVsb3BtZW50L21ldGVvci1jbGllbnQvYmxvYi9tYXN0ZXIvc3JjL21haW4vamF2YS9tZXRlb3JkZXZlbG9wbWVudC9tZXRlb3JjbGllbnQvc3lzdGVtcy9tb2R1bGVzL3BsYXllci9BdXRvQ2xpY2tlci5qYXZhXG52YXIgYXV0b2NsaWNrZXJUb2dnbGUgPSBmYWxzZTtcbnZhciBtb2RlID0gXCJsZWZ0Y2xpY2tcIjtcbnZhciBsZWZ0Y2xpY2tkZWxheSA9IDIwO1xudmFyIGxlZnRjbGlja3RpbWVyID0gMDtcbnZhciByaWdodGNsaWNrZGVsYXkgPSAyMDtcbnZhciByaWdodGNsaWNrdGltZXIgPSAwO1xuLy9mdW4gZmFjdDogeW91IGdvdHRhIHN0YXkgaHlkcmF0ZWQgd2hlbiBkZXZlbG9waW5nIGEgaGFja2VkIGNsaWVudFxuZnVuY3Rpb24gcmVnaXN0ZXJhdXRvY2xpY2tlcigpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgUGx1Z2luQVBJLmFkZEV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoYXV0b2NsaWNrZXJUb2dnbGUgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKG1vZGUgPT09IFwicmlnaHRjbGlja1wiKSB7XG4gICAgICAgICAgICAgICAgcmlnaHRjbGlja3RpbWVyKys7XG4gICAgICAgICAgICAgICAgaWYgKHJpZ2h0Y2xpY2t0aW1lciA+IHJpZ2h0Y2xpY2tkZWxheSkge1xuICAgICAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgUGx1Z2luQVBJLnJpZ2h0Q2xpY2tNb3VzZSgpO1xuICAgICAgICAgICAgICAgICAgICByaWdodGNsaWNrdGltZXIgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtb2RlID09PSBcImxlZnRjbGlja1wiKSB7XG4gICAgICAgICAgICAgICAgbGVmdGNsaWNrdGltZXIrKztcbiAgICAgICAgICAgICAgICBpZiAobGVmdGNsaWNrdGltZXIgPiBsZWZ0Y2xpY2tkZWxheSkge1xuICAgICAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgUGx1Z2luQVBJLmNsaWNrTW91c2UoKTtcbiAgICAgICAgICAgICAgICAgICAgbGVmdGNsaWNrdGltZXIgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIFBsdWdpbkFQSS5wbGF5ZXIucmVsb2FkKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMucmVnaXN0ZXJhdXRvY2xpY2tlciA9IHJlZ2lzdGVyYXV0b2NsaWNrZXI7XG5mdW5jdGlvbiBzZXRhdXRvY2xpY2tlcnRvZ2dsZSh0aGVCb29sZWFuKSB7XG4gICAgYXV0b2NsaWNrZXJUb2dnbGUgPSB0aGVCb29sZWFuOyAvLyB0aGFua3MgQE90dGVyQ29kZXMxMDJcbn1cbmV4cG9ydHMuc2V0YXV0b2NsaWNrZXJ0b2dnbGUgPSBzZXRhdXRvY2xpY2tlcnRvZ2dsZTtcbmZ1bmN0aW9uIHJldHVybmF1dG9jbGlja2VydG9nZ2xlKCkge1xuICAgIHJldHVybiBhdXRvY2xpY2tlclRvZ2dsZTtcbn1cbmV4cG9ydHMucmV0dXJuYXV0b2NsaWNrZXJ0b2dnbGUgPSByZXR1cm5hdXRvY2xpY2tlcnRvZ2dsZTtcbmZ1bmN0aW9uIHNldGF1dG9jbGlja2VybW9kZSh0aGVzdHJpbmcpIHtcbiAgICBtb2RlID0gdGhlc3RyaW5nO1xufVxuZXhwb3J0cy5zZXRhdXRvY2xpY2tlcm1vZGUgPSBzZXRhdXRvY2xpY2tlcm1vZGU7XG5mdW5jdGlvbiByZXR1cm5hdXRvY2xpY2tlcm1vZGUoKSB7XG4gICAgcmV0dXJuIG1vZGU7XG59XG5leHBvcnRzLnJldHVybmF1dG9jbGlja2VybW9kZSA9IHJldHVybmF1dG9jbGlja2VybW9kZTtcbmZ1bmN0aW9uIHNldGxlZnRjbGlja2RlbGF5KHRoZW51bWJlcjEpIHtcbiAgICBsZWZ0Y2xpY2tkZWxheSA9IHRoZW51bWJlcjE7XG59XG5leHBvcnRzLnNldGxlZnRjbGlja2RlbGF5ID0gc2V0bGVmdGNsaWNrZGVsYXk7XG5mdW5jdGlvbiByZXR1cm5sZWZ0Y2xpY2tkZWxheSgpIHtcbiAgICByZXR1cm4gbGVmdGNsaWNrZGVsYXk7XG59XG5leHBvcnRzLnJldHVybmxlZnRjbGlja2RlbGF5ID0gcmV0dXJubGVmdGNsaWNrZGVsYXk7XG5mdW5jdGlvbiBzZXRyaWdodGNsaWNrZGVsYXkodGhlbnVtYmVyMikge1xuICAgIHJpZ2h0Y2xpY2tkZWxheSA9IHRoZW51bWJlcjI7XG59XG5leHBvcnRzLnNldHJpZ2h0Y2xpY2tkZWxheSA9IHNldHJpZ2h0Y2xpY2tkZWxheTtcbmZ1bmN0aW9uIHJldHVybnJpZ2h0Y2xpY2tkZWxheSgpIHtcbiAgICByZXR1cm4gcmlnaHRjbGlja2RlbGF5O1xufVxuZXhwb3J0cy5yZXR1cm5yaWdodGNsaWNrZGVsYXkgPSByZXR1cm5yaWdodGNsaWNrZGVsYXk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmV0dXJuRnVsbGJyaWdodFRvZ2dsZSA9IGV4cG9ydHMuc2V0RnVsbGJyaWdodFRvZ2dsZSA9IGV4cG9ydHMucmVnaXN0ZXJGdWxsYnJpZ2h0ID0gdm9pZCAwO1xuLy9hZGRlZCBieSBAT3R0ZXJDb2RlczEwMlxudmFyIGZ1bGxicmlnaHRUb2dnbGUgPSBmYWxzZTtcbmZ1bmN0aW9uIHJlZ2lzdGVyRnVsbGJyaWdodCgpIHtcbiAgICAvL0B0cy1pZ25vcmVcbiAgICBQbHVnaW5BUEkuYWRkRXZlbnRMaXN0ZW5lcihcInVwZGF0ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChmdWxsYnJpZ2h0VG9nZ2xlID09IGZhbHNlKSB7XG4gICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgIFBsdWdpbkFQSS5ibG9ja3MuYWlyLmxpZ2h0VmFsdWUgPSAwOyAvL1NldCB0aGUgYWlyJ3MgbGlnaHQgbGV2ZWwgdG8gMC5cbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgUGx1Z2luQVBJLmJsb2Nrcy5haXIucmVsb2FkKCk7IC8vU2F2ZSBjaGFuZ2VzICAgXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgIFBsdWdpbkFQSS5ibG9ja3MuYWlyLmxpZ2h0VmFsdWUgPSAxMDsgLy9TZXQgdGhlIGFpcidzIGxpZ2h0IGxldmVsIHRvIDEwLlxuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICBQbHVnaW5BUEkuYmxvY2tzLmFpci5yZWxvYWQoKTsgLy9TYXZlIGNoYW5nZXNcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5yZWdpc3RlckZ1bGxicmlnaHQgPSByZWdpc3RlckZ1bGxicmlnaHQ7XG5mdW5jdGlvbiBzZXRGdWxsYnJpZ2h0VG9nZ2xlKHRoZUJvb2xlYW4pIHtcbiAgICBmdWxsYnJpZ2h0VG9nZ2xlID0gdGhlQm9vbGVhbjtcbn1cbmV4cG9ydHMuc2V0RnVsbGJyaWdodFRvZ2dsZSA9IHNldEZ1bGxicmlnaHRUb2dnbGU7XG5mdW5jdGlvbiByZXR1cm5GdWxsYnJpZ2h0VG9nZ2xlKCkge1xuICAgIHJldHVybiBmdWxsYnJpZ2h0VG9nZ2xlO1xufVxuZXhwb3J0cy5yZXR1cm5GdWxsYnJpZ2h0VG9nZ2xlID0gcmV0dXJuRnVsbGJyaWdodFRvZ2dsZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXR1cm5qZXRwYWNrZm9yY2UgPSBleHBvcnRzLnNldGpldHBhY2tmb3JjZSA9IGV4cG9ydHMucmV0dXJuamV0cGFja3RvZ2dsZSA9IGV4cG9ydHMuc2V0amV0cGFja3RvZ2dsZSA9IGV4cG9ydHMucmVnaXN0ZXJqZXRwYWNrID0gdm9pZCAwO1xudmFyIGpldHBhY2tndWlhY3RpdmUgPSBmYWxzZTtcbnZhciBqZXRwYWNrZm9yY2UgPSAwLjI7XG5mdW5jdGlvbiByZWdpc3RlcmpldHBhY2soKSB7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgUGx1Z2luQVBJLnJlcXVpcmUoXCJwbGF5ZXJcIik7XG4gICAgdmFyIGpldHBhY2tBY3RpdmUgPSBmYWxzZTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5rZXkudG9Mb3dlckNhc2UoKSA9PT0gXCIgXCIpIHtcbiAgICAgICAgICAgIGpldHBhY2tBY3RpdmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmtleS50b0xvd2VyQ2FzZSgpID09PSBcIiBcIikge1xuICAgICAgICAgICAgamV0cGFja0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgUGx1Z2luQVBJLmFkZEV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoamV0cGFja2d1aWFjdGl2ZSA9PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQucG9pbnRlckxvY2tFbGVtZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWpldHBhY2tBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBQbHVnaW5BUEkucGxheWVyLm1vdGlvblkgKz0gamV0cGFja2ZvcmNlO1xuICAgICAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIFBsdWdpbkFQSS5wbGF5ZXIucmVsb2FkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMucmVnaXN0ZXJqZXRwYWNrID0gcmVnaXN0ZXJqZXRwYWNrO1xuZnVuY3Rpb24gc2V0amV0cGFja3RvZ2dsZSh0aGVCb29sZWFuKSB7XG4gICAgamV0cGFja2d1aWFjdGl2ZSA9IHRoZUJvb2xlYW47XG59XG5leHBvcnRzLnNldGpldHBhY2t0b2dnbGUgPSBzZXRqZXRwYWNrdG9nZ2xlO1xuZnVuY3Rpb24gcmV0dXJuamV0cGFja3RvZ2dsZSgpIHtcbiAgICByZXR1cm4gamV0cGFja2d1aWFjdGl2ZTtcbn1cbmV4cG9ydHMucmV0dXJuamV0cGFja3RvZ2dsZSA9IHJldHVybmpldHBhY2t0b2dnbGU7XG5mdW5jdGlvbiBzZXRqZXRwYWNrZm9yY2UodGhlTnVtYmVyKSB7XG4gICAgamV0cGFja2ZvcmNlID0gdGhlTnVtYmVyO1xufVxuZXhwb3J0cy5zZXRqZXRwYWNrZm9yY2UgPSBzZXRqZXRwYWNrZm9yY2U7XG5mdW5jdGlvbiByZXR1cm5qZXRwYWNrZm9yY2UoKSB7XG4gICAgcmV0dXJuIGpldHBhY2tmb3JjZTtcbn1cbmV4cG9ydHMucmV0dXJuamV0cGFja2ZvcmNlID0gcmV0dXJuamV0cGFja2ZvcmNlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJldHVybk5vZmFsbFRvZ2dsZSA9IGV4cG9ydHMuc2V0Tm9mYWxsVG9nZ2xlID0gZXhwb3J0cy5yZWdpc3Rlck5vZmFsbCA9IHZvaWQgMDtcbi8vYWRkZWQgYnkgQE90dGVyQ29kZXMxMDJcbnZhciBub2ZhbGxUb2dnbGUgPSBmYWxzZTtcbmZ1bmN0aW9uIHJlZ2lzdGVyTm9mYWxsKCkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBQbHVnaW5BUEkucmVxdWlyZShcIm5ldHdvcmtcIik7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIFBsdWdpbkFQSS5hZGRFdmVudExpc3RlbmVyKFwidXBkYXRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAoUGx1Z2luQVBJLnBsYXllci5mYWxsRGlzdGFuY2UgPiAyLjAgJiYgbm9mYWxsVG9nZ2xlKSB7IC8vIHR5IHp4bXVzaHJvb21cbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIFBsdWdpbkFQSS5uZXR3b3JrLnNlbmRQYWNrZXRQbGF5ZXIoeyBpc09uR3JvdW5kOiB0cnVlIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnRzLnJlZ2lzdGVyTm9mYWxsID0gcmVnaXN0ZXJOb2ZhbGw7XG5mdW5jdGlvbiBzZXROb2ZhbGxUb2dnbGUodGhlQm9vbGVhbikge1xuICAgIG5vZmFsbFRvZ2dsZSA9IHRoZUJvb2xlYW47XG59XG5leHBvcnRzLnNldE5vZmFsbFRvZ2dsZSA9IHNldE5vZmFsbFRvZ2dsZTtcbmZ1bmN0aW9uIHJldHVybk5vZmFsbFRvZ2dsZSgpIHtcbiAgICByZXR1cm4gbm9mYWxsVG9nZ2xlO1xufVxuZXhwb3J0cy5yZXR1cm5Ob2ZhbGxUb2dnbGUgPSByZXR1cm5Ob2ZhbGxUb2dnbGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmV0dXJubm93ZWJUb2dnbGUgPSBleHBvcnRzLnNldG5vd2ViVG9nZ2xlID0gZXhwb3J0cy5yZWdpc3Rlcm5vd2ViID0gdm9pZCAwO1xudmFyIG5vd2ViVG9nZ2xlID0gZmFsc2U7XG5mdW5jdGlvbiByZWdpc3Rlcm5vd2ViKCkge1xuICAgIC8vQHRzLWlnbm9yZVxuICAgIFBsdWdpbkFQSS5yZXF1aXJlKFwicGxheWVyXCIpO1xuICAgIC8vQHRzLWlnbm9yZVxuICAgIFBsdWdpbkFQSS5hZGRFdmVudExpc3RlbmVyKFwidXBkYXRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKG5vd2ViVG9nZ2xlID09IHRydWUpIHtcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgUGx1Z2luQVBJLnBsYXllci5pc0luV2ViID0gZmFsc2U7XG4gICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgIFBsdWdpbkFQSS5wbGF5ZXIucmVsb2FkKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMucmVnaXN0ZXJub3dlYiA9IHJlZ2lzdGVybm93ZWI7XG5mdW5jdGlvbiBzZXRub3dlYlRvZ2dsZSh0aGVCb29sZWFuKSB7XG4gICAgbm93ZWJUb2dnbGUgPSB0aGVCb29sZWFuO1xufVxuZXhwb3J0cy5zZXRub3dlYlRvZ2dsZSA9IHNldG5vd2ViVG9nZ2xlO1xuZnVuY3Rpb24gcmV0dXJubm93ZWJUb2dnbGUoKSB7XG4gICAgcmV0dXJuIG5vd2ViVG9nZ2xlO1xufVxuZXhwb3J0cy5yZXR1cm5ub3dlYlRvZ2dsZSA9IHJldHVybm5vd2ViVG9nZ2xlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJldHVybnNsaXBwZXJ5dG9nZ2xlID0gZXhwb3J0cy5zZXRzbGlwcGVyeVRvZ2dsZSA9IHZvaWQgMDtcbnZhciBzbGlwcGVyeXRvZ2dsZSA9IGZhbHNlO1xuZnVuY3Rpb24gcmVnaXN0ZXJzbGlwcGVyeSgpIHtcbiAgICAvL0B0cy1pZ25vcmVcbiAgICB2YXIgYmxvY2tLZXlzID0gT2JqZWN0LmtleXMoUGx1Z2luQVBJLmJsb2Nrcyk7XG4gICAgYmxvY2tLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgaWYgKChfYiA9IChfYSA9IFBsdWdpbkFQSSA9PT0gbnVsbCB8fCBQbHVnaW5BUEkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IFBsdWdpbkFQSS5ibG9ja3MpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtrZXldKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iuc2xpcHBlcmluZXNzKSB7IC8vIFRlYVZNIGxpa2VzIHRvIGFkZCBtZXRhZGF0YSBwcm9wZXJ0aWVzIHdoaWNoIGFyZSBgbnVsbGAgb3IgYHVuZGVmaW5lZGBcbiAgICAgICAgICAgIGlmIChzbGlwcGVyeXRvZ2dsZSA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgUGx1Z2luQVBJLmJsb2Nrc1trZXldLnNsaXBwZXJpbmVzcyA9IDAuOTg7IC8vSWNlIHNsaXBwZXJpbmVzcyB2YWx1ZS5cbiAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBQbHVnaW5BUEkuYmxvY2tzW2tleV0ucmVsb2FkKCk7IC8vVGhlIG5ldyBtZXRob2QsIGBQbHVnaW5BUEkudXBkYXRlQ29tcG9uZW50YCBpcyBvYnNvbGV0ZSBub3cuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBQbHVnaW5BUEkuYmxvY2tzW2tleV0uc2xpcHBlcmluZXNzID0gMC42OyAvL0ljZSBzbGlwcGVyaW5lc3MgdmFsdWUuXG4gICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgUGx1Z2luQVBJLmJsb2Nrc1trZXldLnJlbG9hZCgpOyAvL1RoZSBuZXcgbWV0aG9kLCBgUGx1Z2luQVBJLnVwZGF0ZUNvbXBvbmVudGAgaXMgb2Jzb2xldGUgbm93LlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiBzZXRzbGlwcGVyeVRvZ2dsZSh0aGVCb29sZWFuKSB7XG4gICAgc2xpcHBlcnl0b2dnbGUgPSB0aGVCb29sZWFuOyAvLyB5dyByYWRtYW4gOjNcbn1cbmV4cG9ydHMuc2V0c2xpcHBlcnlUb2dnbGUgPSBzZXRzbGlwcGVyeVRvZ2dsZTtcbmZ1bmN0aW9uIHJldHVybnNsaXBwZXJ5dG9nZ2xlKCkge1xuICAgIHJldHVybiBzbGlwcGVyeXRvZ2dsZTtcbn1cbmV4cG9ydHMucmV0dXJuc2xpcHBlcnl0b2dnbGUgPSByZXR1cm5zbGlwcGVyeXRvZ2dsZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXR1cm5TcGlkZXJUb2dnbGUgPSBleHBvcnRzLnNldFNwaWRlclRvZ2dsZSA9IGV4cG9ydHMucmVnaXN0ZXJTcGlkZXIgPSB2b2lkIDA7XG52YXIgc3BpZGVyVG9nZ2xlID0gZmFsc2U7XG5mdW5jdGlvbiByZWdpc3RlclNwaWRlcigpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgUGx1Z2luQVBJLnJlcXVpcmUoXCJwbGF5ZXJcIik7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIFBsdWdpbkFQSS5hZGRFdmVudExpc3RlbmVyKFwidXBkYXRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAoUGx1Z2luQVBJLnBsYXllci5pc0NvbGxpZGVkSG9yaXpvbnRhbGx5ICYmIHNwaWRlclRvZ2dsZSA9PSB0cnVlKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBQbHVnaW5BUEkucGxheWVyLm1vdGlvblkgPSAwLjI7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBQbHVnaW5BUEkucGxheWVyLnJlbG9hZCgpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIC8vUGx1Z2luQVBJLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlcIiwgKGV2ZW50KSA9PiB7XG4gICAgLy9AIHRzLWlnbm9yZVxuICAgIC8vaWYgKGV2ZW50LmtleSA9PSAyMikge1xuICAgIC8vc3BpZGVyVG9nZ2xlID0gIXNwaWRlclRvZ2dsZVxuICAgIC8vaWYgKHNwaWRlclRvZ2dsZSA9PSB0cnVlKSB7XG4gICAgLy9kaXNwbGF5VG9DaGF0KFwiwqdkwqdsW01ldGVvclhdIMKncsKnZUVuYWJsZWQgc3BpZGVyLlwiKVxuICAgIC8vfSBlbHNlIHtcbiAgICAvL2Rpc3BsYXlUb0NoYXQoXCLCp2TCp2xbTWV0ZW9yWF0gwqdywqdlRGlzYWJsZWQgc3BpZGVyLlwiKVxuICAgIC8vfVxufVxuZXhwb3J0cy5yZWdpc3RlclNwaWRlciA9IHJlZ2lzdGVyU3BpZGVyO1xuLy99KVxuLy99XG5mdW5jdGlvbiBzZXRTcGlkZXJUb2dnbGUodGhlQm9vbGVhbikge1xuICAgIHNwaWRlclRvZ2dsZSA9IHRoZUJvb2xlYW47IC8vIHl3IHJhZG1hbiA6M1xufVxuZXhwb3J0cy5zZXRTcGlkZXJUb2dnbGUgPSBzZXRTcGlkZXJUb2dnbGU7XG5mdW5jdGlvbiByZXR1cm5TcGlkZXJUb2dnbGUoKSB7XG4gICAgcmV0dXJuIHNwaWRlclRvZ2dsZTtcbn1cbmV4cG9ydHMucmV0dXJuU3BpZGVyVG9nZ2xlID0gcmV0dXJuU3BpZGVyVG9nZ2xlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJldHVyblN0ZXBUb2dnbGUgPSBleHBvcnRzLnNldFN0ZXBUb2dnbGUgPSBleHBvcnRzLnJlZ2lzdGVyU3RlcCA9IHZvaWQgMDtcbnZhciBzdGVwVG9nZ2xlID0gZmFsc2U7XG5mdW5jdGlvbiByZWdpc3RlclN0ZXAoKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIFBsdWdpbkFQSS5hZGRFdmVudExpc3RlbmVyKFwidXBkYXRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHN0ZXBUb2dnbGUgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgUGx1Z2luQVBJLnBsYXllci5zdGVwSGVpZ2h0ID0gMTtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIFBsdWdpbkFQSS5wbGF5ZXIucmVsb2FkKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBQbHVnaW5BUEkucGxheWVyLnN0ZXBIZWlnaHQgPSAwLjU7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBQbHVnaW5BUEkucGxheWVyLnJlbG9hZCgpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy8gQHRzLWlnbm9yZSBcbiAgICAvL1BsdWdpbkFQSS5hZGRFdmVudExpc3RlbmVyKFwia2V5XCIsIChldmVudCk9PnsgY29tbWVudCBvdXQgY29kZSByYWRtYW4gbGlrZWx5IHdvbid0IHVzZVxuICAgIC8vaWYgKGV2ZW50LmtleSA9PSA0NykgeyBcbiAgICAvLyAgc3RlcFRvZ2dsZSA9ICFzdGVwVG9nZ2xlO1xuICAgIC8vIGlmIChzdGVwVG9nZ2xlID09IHRydWUpIHtcbiAgICAvLyAgIGRpc3BsYXlUb0NoYXQoXCLCp2TCp2xbTWV0ZW9yWF0gwqdywqdlRW5hYmxlZCBzdGVwLlwiKVxuICAgIC8vIH0gZWxzZSB7XG4gICAgLy8gICAgZGlzcGxheVRvQ2hhdChcIsKnZMKnbFtNZXRlb3JYXSDCp3LCp2VEaXNhYmxlZCBzdGVwLlwiKVxuICAgIC8vIH1cbiAgICAvLyB9XG4gICAgLy8gIH0pXG59XG5leHBvcnRzLnJlZ2lzdGVyU3RlcCA9IHJlZ2lzdGVyU3RlcDtcbmZ1bmN0aW9uIHNldFN0ZXBUb2dnbGUodGhlQm9vbGVhbikge1xuICAgIHN0ZXBUb2dnbGUgPSB0aGVCb29sZWFuOyAvLyB5dyByYWRtYW4gOjNcbn1cbmV4cG9ydHMuc2V0U3RlcFRvZ2dsZSA9IHNldFN0ZXBUb2dnbGU7XG5mdW5jdGlvbiByZXR1cm5TdGVwVG9nZ2xlKCkge1xuICAgIHJldHVybiBzdGVwVG9nZ2xlO1xufVxuZXhwb3J0cy5yZXR1cm5TdGVwVG9nZ2xlID0gcmV0dXJuU3RlcFRvZ2dsZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kaXNwbGF5VG9DaGF0ID0gdm9pZCAwO1xuZnVuY3Rpb24gZGlzcGxheVRvQ2hhdChtZXNzYWdlKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIFBsdWdpbkFQSS5kaXNwbGF5VG9DaGF0KHsgbXNnOiBtZXNzYWdlIH0pOyAvL2Rpc3BsYXkgdGhhdCB2YWx1ZSB0byBjaGF0XG59XG5leHBvcnRzLmRpc3BsYXlUb0NoYXQgPSBkaXNwbGF5VG9DaGF0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1ldGVvclhmYWlsdXJlID0gZXhwb3J0cy5NZXRlb3JYc3VjY2VzcyA9IGV4cG9ydHMuTWV0ZW9yWGVycm9yID0gZXhwb3J0cy5NZXRlb3JYd2FybmluZyA9IGV4cG9ydHMuTWV0ZW9yWGxvZyA9IHZvaWQgMDtcbnZhciBjaGF0XzEgPSByZXF1aXJlKFwiLi9jaGF0XCIpO1xuZnVuY3Rpb24gTWV0ZW9yWGxvZyhtZXNzYWdlKSB7XG4gICAgKDAsIGNoYXRfMS5kaXNwbGF5VG9DaGF0KShcIsKnY1vCpzZNZXRlb3JYwqdjXcKnZiBcIiArIG1lc3NhZ2UpO1xufVxuZXhwb3J0cy5NZXRlb3JYbG9nID0gTWV0ZW9yWGxvZztcbmZ1bmN0aW9uIE1ldGVvclh3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgICAoMCwgY2hhdF8xLmRpc3BsYXlUb0NoYXQpKFwiwqdjW8KnNsKnbFdBUk5JTkfCp2NdwqdmIFwiICsgbWVzc2FnZSk7XG59XG5leHBvcnRzLk1ldGVvclh3YXJuaW5nID0gTWV0ZW9yWHdhcm5pbmc7XG5mdW5jdGlvbiBNZXRlb3JYZXJyb3IobWVzc2FnZSkge1xuICAgICgwLCBjaGF0XzEuZGlzcGxheVRvQ2hhdCkoXCLCp2Nbwqc0wqdsRVJST1LCp2NdwqdmIFwiICsgbWVzc2FnZSk7XG59XG5leHBvcnRzLk1ldGVvclhlcnJvciA9IE1ldGVvclhlcnJvcjtcbmZ1bmN0aW9uIE1ldGVvclhzdWNjZXNzKG1lc3NhZ2UpIHtcbiAgICAoMCwgY2hhdF8xLmRpc3BsYXlUb0NoYXQpKFwiwqdhW8KnMsKnbFNVQ0NFU1PCp2FdwqdmIFwiICsgbWVzc2FnZSk7XG59XG5leHBvcnRzLk1ldGVvclhzdWNjZXNzID0gTWV0ZW9yWHN1Y2Nlc3M7XG5mdW5jdGlvbiBNZXRlb3JYZmFpbHVyZShtZXNzYWdlKSB7XG4gICAgKDAsIGNoYXRfMS5kaXNwbGF5VG9DaGF0KShcIsKnY1vCpzTCp2xGQUlMVVJFwqdjXcKnZiBcIiArIG1lc3NhZ2UpO1xufVxuZXhwb3J0cy5NZXRlb3JYZmFpbHVyZSA9IE1ldGVvclhmYWlsdXJlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvcHkgPSB2b2lkIDA7XG5mdW5jdGlvbiBjb3B5KHRleHQpIHtcbiAgICB2YXIgdGVtcElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIHRlbXBJbnB1dC52YWx1ZSA9IHRleHQ7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0ZW1wSW5wdXQpO1xuICAgIHRlbXBJbnB1dC5zZWxlY3QoKTtcbiAgICBkb2N1bWVudC5leGVjQ29tbWFuZChcImNvcHlcIik7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0ZW1wSW5wdXQpO1xufVxuZXhwb3J0cy5jb3B5ID0gY29weTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51cGRhdGVQbGF5ZXJQb3NpdGlvbiA9IGV4cG9ydHMuZ2V0cGxheWVycG9zID0gZXhwb3J0cy5hZGR0b3BsYXllcnpwb3MgPSBleHBvcnRzLmFkZHRvcGxheWVyeXBvcyA9IGV4cG9ydHMuYWRkdG9wbGF5ZXJ4cG9zID0gdm9pZCAwO1xuLy8gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vUGhlb1plbi9XdXJzdC1NQy0xLjgvYmxvYi9tYXN0ZXIvc3JjL3RrL3d1cnN0X2NsaWVudC91dGlscy9QbGF5ZXJVdGlscy5qYXZhXG4vL0B0cy1pZ25vcmVcblBsdWdpbkFQSS5yZXF1aXJlKFwicGxheWVyXCIpO1xudmFyIGdldHBsYXllcnBvcyA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDAsXG4gICAgejogMFxufTtcbmV4cG9ydHMuZ2V0cGxheWVycG9zID0gZ2V0cGxheWVycG9zO1xuZnVuY3Rpb24gdXBkYXRlUGxheWVyUG9zaXRpb24oKSB7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgZ2V0cGxheWVycG9zLnggPSBQbHVnaW5BUEkucGxheWVyLng7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgZ2V0cGxheWVycG9zLnkgPSBQbHVnaW5BUEkucGxheWVyLnk7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgZ2V0cGxheWVycG9zLnogPSBQbHVnaW5BUEkucGxheWVyLno7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgUGx1Z2luQVBJLnBsYXllci5yZWxvYWQoKTtcbn1cbmV4cG9ydHMudXBkYXRlUGxheWVyUG9zaXRpb24gPSB1cGRhdGVQbGF5ZXJQb3NpdGlvbjtcbmZ1bmN0aW9uIGFkZHRvcGxheWVyeHBvcyh4KSB7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgUGx1Z2luQVBJLnBsYXllci54ICs9IHg7XG59XG5leHBvcnRzLmFkZHRvcGxheWVyeHBvcyA9IGFkZHRvcGxheWVyeHBvcztcbmZ1bmN0aW9uIGFkZHRvcGxheWVyeXBvcyh5KSB7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgUGx1Z2luQVBJLnBsYXllci55ICs9IHk7XG59XG5leHBvcnRzLmFkZHRvcGxheWVyeXBvcyA9IGFkZHRvcGxheWVyeXBvcztcbmZ1bmN0aW9uIGFkZHRvcGxheWVyenBvcyh6KSB7XG4gICAgLy9AdHMtaWdub3JlXG4gICAgUGx1Z2luQVBJLnBsYXllci56ICs9IHo7XG59XG5leHBvcnRzLmFkZHRvcGxheWVyenBvcyA9IGFkZHRvcGxheWVyenBvcztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXR0cHMgPSBleHBvcnRzLnJlZ2lzdGVydHBzID0gdm9pZCAwO1xuLy8gZnJvbSBlYWdsZXJyZWJvcm4ncyBleGFtcGxlIHBsdWdpbnNcbnZhciBjdXJyZW50VHBzID0gMDtcbmZ1bmN0aW9uIHJlZ2lzdGVydHBzKCkge1xuICAgIC8vIENsaWVudC1zaWRlIHNlcnZlciBUUFMgZXN0aW1hdG9yIHdpdGggdGhlIFBsdWdpbiBBUElcbiAgICAvLyBPbmx5IHJlbGlhYmxlIGlmIHlvdSBhcmUgbm90IGxhZ2dpbmcgKGllIGhpZ2ggZnBzKVxuICAgIHZhciBsYXN0VGltZTtcbiAgICB2YXIgbGFzdEFnZSA9IC0xO1xuICAgIC8vQHRzLWlnbm9yZVxuICAgIFBsdWdpbkFQSS5hZGRFdmVudExpc3RlbmVyKFwicGFja2V0dGltZXVwZGF0ZVwiLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgdmFyIGFnZSA9IGV2LnRvdGFsV29ybGRUaW1lO1xuICAgICAgICB2YXIgdGltZSA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG4gICAgICAgIGlmIChsYXN0QWdlID09IC0xKSB7XG4gICAgICAgICAgICBsYXN0VGltZSA9IHRpbWU7XG4gICAgICAgICAgICBsYXN0QWdlID0gYWdlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkaWZmQWdlID0gYWdlIC0gbGFzdEFnZTtcbiAgICAgICAgdmFyIGRpZmZUaW1lID0gdGltZSAtIGxhc3RUaW1lO1xuICAgICAgICBsYXN0QWdlID0gYWdlO1xuICAgICAgICBsYXN0VGltZSA9IHRpbWU7XG4gICAgICAgIGN1cnJlbnRUcHMgPSBkaWZmQWdlIC8gKGRpZmZUaW1lIC8gMTAwMCk7XG4gICAgfSk7XG59XG5leHBvcnRzLnJlZ2lzdGVydHBzID0gcmVnaXN0ZXJ0cHM7XG5mdW5jdGlvbiBnZXR0cHMoKSB7XG4gICAgcmV0dXJuIGN1cnJlbnRUcHM7XG59XG5leHBvcnRzLmdldHRwcyA9IGdldHRwcztcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIl0sIm5hbWVzIjpbImd1aV8xIiwic3BpZGVyXzEiLCJzdGVwXzEiLCJub2ZhbGxfMSIsImpldHBhY2tfMSIsImZ1bGxicmlnaHRfMSIsImNtZHNfMSIsIm5vd2ViXzEiLCJ0cHNfMSIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwibGVuZ3RoIiwiaSIsImFycjIiLCJBcnJheSIsIldvcmQiLCJ3b3JkIiwidGhpcyIsInRyaW0iLCJyZXBsYWNlZFdvcmRzIiwiU2V0IiwiX3Byb3RvIiwicHJvdG90eXBlIiwicmVwbGFjZSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwicmVwbGFjZVJlcGxhY2VkV29yZHMiLCJmcm9tIiwic29tZSIsInNlYXJjaFZhbHVlQ29udGFpbnNSZXBsYWNlZFdvcmRzIiwicmVwbGFjaW5nV29yZCIsIm1hdGNoQXJyYXkiLCJtYXRjaCIsIm1hcCIsIngiLCJfc3RlcCIsIl9pdGVyYXRvciIsIm8iLCJhbGxvd0FycmF5TGlrZSIsIml0IiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjYWxsIiwibmV4dCIsImJpbmQiLCJpc0FycmF5IiwibWluTGVuIiwibiIsIk9iamVjdCIsInRvU3RyaW5nIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJ0ZXN0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiZG9uZSIsInZhbHVlIiwiVHlwZUVycm9yIiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZSIsImFkZCIsImZhY2VzIiwic3BlY2lmaWNXb3JkTWFwcGluZ0FycmF5IiwiaW5wdXQiLCJ1dnVNYXBwaW5nQXJyYXkiLCJNYXRoIiwicm91bmQiLCJyYW5kb20iLCJ1d3VNYXBwaW5nQXJyYXkiLCJmbG9vciIsIm93b01hcHBpbmdBcnJheSIsIl8iLCJtMSIsIm0yIiwidG9VcHBlckNhc2UiLCJ2IiwibGV2ZWwiLCJ3aGl0ZXNwYWNlIiwic3BsaXQiLCJ3b3JkcyIsImEiLCJiIiwib2JzZXJ2ZWQiLCJvdGhlciIsInRlbXAiLCJwdXNoIiwic2hpZnQiLCJhcHBseSIsImludGVybGVhdmVBcnJheXMiLCJyZWR1Y2UiLCJmIiwiam9pbiIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInJlZ2lzdGVyY21kcyIsIm93b2lmeSIsImNoYXR1dGlsc18xIiwicGxheWVydXRpbHNfMSIsImNsaXBib2FyZHV0aWxzXzEiLCJzZXJ2ZXJpcCIsIlBsdWdpbkFQSSIsImFkZEV2ZW50TGlzdGVuZXIiLCJnZXR0cHMiLCJldiIsImlwIiwiZXZlbnQiLCJtZXNzYWdlIiwiTWV0ZW9yWGxvZyIsInByZXZlbnREZWZhdWx0Iiwic3RhcnRzV2l0aCIsInRhcmdldExlbmd0aCIsInN1YnN0cmluZyIsInRvTG93ZXJDYXNlIiwiYWN0dWFsY2hhdG1lc3NhZ2UiLCJ1d3VtZXNzYWdlIiwibmV0d29yayIsInNlbmRQYWNrZXRDaGF0TWVzc2FnZSIsIm1lc3NhZ2VJbiIsInVwZGF0ZVBsYXllclBvc2l0aW9uIiwicGxheWVyeCIsInRydW5jIiwiZ2V0cGxheWVycG9zIiwicGxheWVyeSIsInkiLCJwbGF5ZXJ6IiwieiIsInZjbGlwdmFsdWUiLCJpc3BsYXllcnJpZGluZyIsInBsYXllciIsImlzUmlkaW5nIiwic2V0UG9zaXRpb24iLCJNZXRlb3JYc3VjY2VzcyIsIk1ldGVvclhlcnJvciIsImlzTmFOIiwidHBzIiwidG9GaXhlZCIsImNvcHkiLCJyZWdpc3Rlcmd1aSIsImF1dG9jbGlja2VyXzEiLCJzbGlwcGVyeV8xIiwiZ3VpVmlzaWJsZSIsImhpZGVHdWkiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwicmVtb3ZlIiwid2luZG93Iiwia2V5IiwibG9jYXRpb24iLCJLZXlib2FyZEV2ZW50IiwiRE9NX0tFWV9MT0NBVElPTl9SSUdIVCIsImd1aSIsImNyZWF0ZUVsZW1lbnQiLCJwb2ludGVyTG9ja0VsZW1lbnQiLCJleGl0UG9pbnRlckxvY2siLCJpbm5lckhUTUwiLCJpZCIsInN0eWxlIiwid2lkdGgiLCJoZWlnaHQiLCJwb3NpdGlvbiIsInRvcCIsImxlZnQiLCJ6SW5kZXgiLCJjb2xvciIsImZvbnRGYW1pbHkiLCJvdmVyZmxvdyIsImJhY2tncm91bmRDb2xvciIsImJhY2tncm91bmRCbGVuZE1vZGUiLCJiYWNrZ3JvdW5kU2l6ZSIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImpldHBhY2tFbGVtZW50IiwiamV0cGFja3NldHRpbmdzIiwic3RlcEVsZW1lbnQiLCJzcGlkZXJFbGVtZW50Iiwibm9mYWxsRWxlbWVudCIsImZ1bGxicmlnaHRFbGVtZW50Iiwibm93ZWJFbGVtZW50IiwiYXV0b2NsaWNrZXJzZXR0aW5ncyIsImF1dG9jbGlja2VyRWxlbWVudCIsInNsaXBwZXJ5RWxlbWVudCIsImN1cnNvciIsInJldHVybmpldHBhY2t0b2dnbGUiLCJpbm5lclRleHQiLCJyZXR1cm5TdGVwVG9nZ2xlIiwicmV0dXJuU3BpZGVyVG9nZ2xlIiwicmV0dXJuTm9mYWxsVG9nZ2xlIiwicmV0dXJuRnVsbGJyaWdodFRvZ2dsZSIsInJldHVybm5vd2ViVG9nZ2xlIiwicmV0dXJuYXV0b2NsaWNrZXJ0b2dnbGUiLCJyZXR1cm5zbGlwcGVyeXRvZ2dsZSIsInNldFN0ZXBUb2dnbGUiLCJzZXRTcGlkZXJUb2dnbGUiLCJzZXROb2ZhbGxUb2dnbGUiLCJzZXRGdWxsYnJpZ2h0VG9nZ2xlIiwic2V0amV0cGFja3RvZ2dsZSIsImpldHBhY2tmb3JjZSIsInByb21wdCIsInJldHVybmpldHBhY2tmb3JjZSIsIm51bWpldHBhY2tmb3JjZSIsIk51bWJlciIsImFsZXJ0Iiwic2V0amV0cGFja2ZvcmNlIiwic2V0bm93ZWJUb2dnbGUiLCJzZXRhdXRvY2xpY2tlcnRvZ2dsZSIsImNsaWNrZXJjYW5jZWxlZCIsImNsaWNrZXJtb2RlIiwibnVtbW9kZSIsImNvbnNvbGUiLCJsb2ciLCJzZXRhdXRvY2xpY2tlcm1vZGUiLCJkZWxheSIsIm51bWRlbGF5Iiwic2V0cmlnaHRjbGlja2RlbGF5Iiwic2V0bGVmdGNsaWNrZGVsYXkiLCJzZXRzbGlwcGVyeVRvZ2dsZSIsInNob3dHdWkiLCJyZXR1cm5yaWdodGNsaWNrZGVsYXkiLCJyZXR1cm5sZWZ0Y2xpY2tkZWxheSIsInJldHVybmF1dG9jbGlja2VybW9kZSIsInJlZ2lzdGVyYXV0b2NsaWNrZXIiLCJhdXRvY2xpY2tlclRvZ2dsZSIsIm1vZGUiLCJsZWZ0Y2xpY2tkZWxheSIsImxlZnRjbGlja3RpbWVyIiwicmlnaHRjbGlja2RlbGF5IiwicmlnaHRjbGlja3RpbWVyIiwicmlnaHRDbGlja01vdXNlIiwiY2xpY2tNb3VzZSIsInJlbG9hZCIsInRoZUJvb2xlYW4iLCJ0aGVzdHJpbmciLCJ0aGVudW1iZXIxIiwidGhlbnVtYmVyMiIsInJlZ2lzdGVyRnVsbGJyaWdodCIsImZ1bGxicmlnaHRUb2dnbGUiLCJibG9ja3MiLCJhaXIiLCJsaWdodFZhbHVlIiwicmVnaXN0ZXJqZXRwYWNrIiwiamV0cGFja2d1aWFjdGl2ZSIsInJlcXVpcmUiLCJqZXRwYWNrQWN0aXZlIiwibW90aW9uWSIsInRoZU51bWJlciIsInJlZ2lzdGVyTm9mYWxsIiwibm9mYWxsVG9nZ2xlIiwiZmFsbERpc3RhbmNlIiwic2VuZFBhY2tldFBsYXllciIsImlzT25Hcm91bmQiLCJyZWdpc3Rlcm5vd2ViIiwibm93ZWJUb2dnbGUiLCJpc0luV2ViIiwic2xpcHBlcnl0b2dnbGUiLCJyZWdpc3RlclNwaWRlciIsInNwaWRlclRvZ2dsZSIsImlzQ29sbGlkZWRIb3Jpem9udGFsbHkiLCJyZWdpc3RlclN0ZXAiLCJzdGVwVG9nZ2xlIiwic3RlcEhlaWdodCIsImRpc3BsYXlUb0NoYXQiLCJtc2ciLCJNZXRlb3JYZmFpbHVyZSIsIk1ldGVvclh3YXJuaW5nIiwiY2hhdF8xIiwidGV4dCIsInRlbXBJbnB1dCIsInNlbGVjdCIsImV4ZWNDb21tYW5kIiwicmVtb3ZlQ2hpbGQiLCJhZGR0b3BsYXllcnpwb3MiLCJhZGR0b3BsYXllcnlwb3MiLCJhZGR0b3BsYXllcnhwb3MiLCJyZWdpc3RlcnRwcyIsImN1cnJlbnRUcHMiLCJsYXN0VGltZSIsImxhc3RBZ2UiLCJhZ2UiLCJ0b3RhbFdvcmxkVGltZSIsInRpbWUiLCJEYXRlIiwiZ2V0VGltZSIsImRpZmZBZ2UiLCJkaWZmVGltZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkIiwiZGVmaW5pdGlvbiIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiXSwic291cmNlUm9vdCI6IiJ9